// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package backendgflags

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type TReservedWordsVersion int64

const (
	TReservedWordsVersion_IMPALA_2_11 TReservedWordsVersion = 0
	TReservedWordsVersion_IMPALA_3_0  TReservedWordsVersion = 1
)

func (p TReservedWordsVersion) String() string {
	switch p {
	case TReservedWordsVersion_IMPALA_2_11:
		return "IMPALA_2_11"
	case TReservedWordsVersion_IMPALA_3_0:
		return "IMPALA_3_0"
	}
	return "<UNSET>"
}

func TReservedWordsVersionFromString(s string) (TReservedWordsVersion, error) {
	switch s {
	case "IMPALA_2_11":
		return TReservedWordsVersion_IMPALA_2_11, nil
	case "IMPALA_3_0":
		return TReservedWordsVersion_IMPALA_3_0, nil
	}
	return TReservedWordsVersion(0), fmt.Errorf("not a valid TReservedWordsVersion string")
}

func TReservedWordsVersionPtr(v TReservedWordsVersion) *TReservedWordsVersion { return &v }

func (p TReservedWordsVersion) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TReservedWordsVersion) UnmarshalText(text []byte) error {
	q, err := TReservedWordsVersionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TReservedWordsVersion) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TReservedWordsVersion(v)
	return nil
}

func (p *TReservedWordsVersion) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - LoadAuthToLocalRules
//   - NonImpalaJavaVlog
//   - ImpalaLogLvl
//   - IncStatsSizeLimitBytes
//   - LineageEventLogDir
//   - LoadCatalogInBackground
//   - NumMetadataLoadingThreads
//   - Principal
//   - ServerName
//   - KuduMasterHosts
//   - LocalLibraryPath
//   - ReadSize
//   - KuduOperationTimeoutMs
//   - InitialHmsCnxnTimeoutS
//   - EnableStatsExtrapolation
//   - MaxHdfsPartitionsParallelLoad
//   - MaxNonhdfsPartitionsParallelLoad
//   - ReservedWordsVersion
//   - MaxFilterErrorRate
//   - MinBufferSize
//   - AuthorizedProxyGroupConfig
//   - UseLocalCatalog
//   - DisableCatalogDataOpsDebugOnly
//   - LocalCatalogCacheMb
//   - LocalCatalogCacheExpirationS
//   - CatalogTopicMode
//   - InvalidateTablesTimeoutS
//   - InvalidateTablesOnMemoryPressure
//   - InvalidateTablesGcOldGenFullThreshold
//   - InvalidateTablesFractionOnMemoryPressure
//   - LocalCatalogMaxFetchRetries
//   - KuduScannerThreadEstimatedBytesPerColumn
//   - KuduScannerThreadMaxEstimatedBytes
//   - CatalogMaxParallelPartialFetchRPC
//   - CatalogPartialFetchRPCQueueTimeoutS
//   - ExchgNodeBufferSizeBytes
//   - KuduMutationBufferSize
//   - KuduErrorBufferSize
//   - HmsEventPollingIntervalS
//   - ImpalaBuildVersion
//   - AuthorizationFactoryClass
//   - RangerServiceType
//   - RangerAppID
//   - AuthorizationProvider
//   - RecursivelyListPartitions
//   - QueryEventHookClasses
//   - QueryEventHookNthreads
//   - IsExecutor
//   - IsCoordinator
//   - UseDedicatedCoordinatorEstimates
//   - BlacklistedDbs
//   - BlacklistedTables
//   - UnlockZorderSort
//   - MinPrivilegeSetForShowStmts
//   - NumExpectedExecutors
//   - NumCheckAuthorizationThreads
//   - UseCustomizedUserGroupsMapperForRanger
//   - EnableColumnMasking
//   - EnableInsertEvents
//   - CompactCatalogTopic
//   - EnableIncrementalMetadataUpdates
//   - TopicUpdateTblMaxWaitTimeMs
//   - CatalogMaxLockSkippedTopicUpdates
//   - Saml2KeystorePath
//   - Saml2KeystorePassword
//   - Saml2PrivateKeyPassword
//   - Saml2IdpMetadata
//   - Saml2SpEntityID
//   - Saml2SpCallbackURL
//   - Saml2WantAssertationsSigned
//   - Saml2SignRequests
//   - Saml2CallbackTokenTTL
//   - Saml2GroupAttributeName
//   - Saml2GroupFilter
//   - Saml2EeTestMode
//   - ScratchDirs
//   - EnableRowFiltering
//   - MaxWaitTimeForSyncDdlS
//   - AllowOrdinalsInHaving
//   - StartHmsServer
//   - HmsPort
//   - FallbackToHmsOnErrors
//   - EnableCatalogdHmsCache
//   - KuduSaslProtocolName
//   - WarnCatalogResponseSizeMb
//   - WarnCatalogResponseDurationS
//   - InvalidateHmsCacheOnDdls
//   - StartupFilesystemCheckDirectories
//   - HmsEventIncrementalRefreshTransactionalTable
//   - EnableShellBasedGroupsMappingSupport
//   - AutoCheckCompaction
//   - EnableSyncToLatestEventOnDdls
//   - PullTableTypesAndComments
//   - UseHmsColumnOrderForHbaseTables
//   - IgnoredDirPrefixList
type TBackendGflags struct {
	// unused field # 1
	LoadAuthToLocalRules      bool   `thrift:"load_auth_to_local_rules,2,required" db:"load_auth_to_local_rules" json:"load_auth_to_local_rules"`
	NonImpalaJavaVlog         int32  `thrift:"non_impala_java_vlog,3,required" db:"non_impala_java_vlog" json:"non_impala_java_vlog"`
	ImpalaLogLvl              int32  `thrift:"impala_log_lvl,4,required" db:"impala_log_lvl" json:"impala_log_lvl"`
	IncStatsSizeLimitBytes    int64  `thrift:"inc_stats_size_limit_bytes,5,required" db:"inc_stats_size_limit_bytes" json:"inc_stats_size_limit_bytes"`
	LineageEventLogDir        string `thrift:"lineage_event_log_dir,6,required" db:"lineage_event_log_dir" json:"lineage_event_log_dir"`
	LoadCatalogInBackground   bool   `thrift:"load_catalog_in_background,7,required" db:"load_catalog_in_background" json:"load_catalog_in_background"`
	NumMetadataLoadingThreads int32  `thrift:"num_metadata_loading_threads,8,required" db:"num_metadata_loading_threads" json:"num_metadata_loading_threads"`
	Principal                 string `thrift:"principal,9,required" db:"principal" json:"principal"`
	// unused field # 10
	ServerName string `thrift:"server_name,11,required" db:"server_name" json:"server_name"`
	// unused field # 12
	KuduMasterHosts          string `thrift:"kudu_master_hosts,13,required" db:"kudu_master_hosts" json:"kudu_master_hosts"`
	LocalLibraryPath         string `thrift:"local_library_path,14,required" db:"local_library_path" json:"local_library_path"`
	ReadSize                 int32  `thrift:"read_size,15,required" db:"read_size" json:"read_size"`
	KuduOperationTimeoutMs   int32  `thrift:"kudu_operation_timeout_ms,16,required" db:"kudu_operation_timeout_ms" json:"kudu_operation_timeout_ms"`
	InitialHmsCnxnTimeoutS   int32  `thrift:"initial_hms_cnxn_timeout_s,17,required" db:"initial_hms_cnxn_timeout_s" json:"initial_hms_cnxn_timeout_s"`
	EnableStatsExtrapolation bool   `thrift:"enable_stats_extrapolation,18,required" db:"enable_stats_extrapolation" json:"enable_stats_extrapolation"`
	// unused field # 19
	MaxHdfsPartitionsParallelLoad    int32                 `thrift:"max_hdfs_partitions_parallel_load,20,required" db:"max_hdfs_partitions_parallel_load" json:"max_hdfs_partitions_parallel_load"`
	MaxNonhdfsPartitionsParallelLoad int32                 `thrift:"max_nonhdfs_partitions_parallel_load,21,required" db:"max_nonhdfs_partitions_parallel_load" json:"max_nonhdfs_partitions_parallel_load"`
	ReservedWordsVersion             TReservedWordsVersion `thrift:"reserved_words_version,22,required" db:"reserved_words_version" json:"reserved_words_version"`
	MaxFilterErrorRate               float64               `thrift:"max_filter_error_rate,23,required" db:"max_filter_error_rate" json:"max_filter_error_rate"`
	MinBufferSize                    int64                 `thrift:"min_buffer_size,24,required" db:"min_buffer_size" json:"min_buffer_size"`
	// unused field # 25
	AuthorizedProxyGroupConfig     string `thrift:"authorized_proxy_group_config,26,required" db:"authorized_proxy_group_config" json:"authorized_proxy_group_config"`
	UseLocalCatalog                bool   `thrift:"use_local_catalog,27,required" db:"use_local_catalog" json:"use_local_catalog"`
	DisableCatalogDataOpsDebugOnly bool   `thrift:"disable_catalog_data_ops_debug_only,28,required" db:"disable_catalog_data_ops_debug_only" json:"disable_catalog_data_ops_debug_only"`
	LocalCatalogCacheMb            int32  `thrift:"local_catalog_cache_mb,29,required" db:"local_catalog_cache_mb" json:"local_catalog_cache_mb"`
	LocalCatalogCacheExpirationS   int32  `thrift:"local_catalog_cache_expiration_s,30,required" db:"local_catalog_cache_expiration_s" json:"local_catalog_cache_expiration_s"`
	// unused field # 31
	CatalogTopicMode                         string  `thrift:"catalog_topic_mode,32,required" db:"catalog_topic_mode" json:"catalog_topic_mode"`
	InvalidateTablesTimeoutS                 int32   `thrift:"invalidate_tables_timeout_s,33,required" db:"invalidate_tables_timeout_s" json:"invalidate_tables_timeout_s"`
	InvalidateTablesOnMemoryPressure         bool    `thrift:"invalidate_tables_on_memory_pressure,34,required" db:"invalidate_tables_on_memory_pressure" json:"invalidate_tables_on_memory_pressure"`
	InvalidateTablesGcOldGenFullThreshold    float64 `thrift:"invalidate_tables_gc_old_gen_full_threshold,35,required" db:"invalidate_tables_gc_old_gen_full_threshold" json:"invalidate_tables_gc_old_gen_full_threshold"`
	InvalidateTablesFractionOnMemoryPressure float64 `thrift:"invalidate_tables_fraction_on_memory_pressure,36,required" db:"invalidate_tables_fraction_on_memory_pressure" json:"invalidate_tables_fraction_on_memory_pressure"`
	LocalCatalogMaxFetchRetries              int32   `thrift:"local_catalog_max_fetch_retries,37,required" db:"local_catalog_max_fetch_retries" json:"local_catalog_max_fetch_retries"`
	KuduScannerThreadEstimatedBytesPerColumn int64   `thrift:"kudu_scanner_thread_estimated_bytes_per_column,38,required" db:"kudu_scanner_thread_estimated_bytes_per_column" json:"kudu_scanner_thread_estimated_bytes_per_column"`
	KuduScannerThreadMaxEstimatedBytes       int64   `thrift:"kudu_scanner_thread_max_estimated_bytes,39,required" db:"kudu_scanner_thread_max_estimated_bytes" json:"kudu_scanner_thread_max_estimated_bytes"`
	CatalogMaxParallelPartialFetchRPC        int32   `thrift:"catalog_max_parallel_partial_fetch_rpc,40,required" db:"catalog_max_parallel_partial_fetch_rpc" json:"catalog_max_parallel_partial_fetch_rpc"`
	CatalogPartialFetchRPCQueueTimeoutS      int64   `thrift:"catalog_partial_fetch_rpc_queue_timeout_s,41,required" db:"catalog_partial_fetch_rpc_queue_timeout_s" json:"catalog_partial_fetch_rpc_queue_timeout_s"`
	ExchgNodeBufferSizeBytes                 int64   `thrift:"exchg_node_buffer_size_bytes,42,required" db:"exchg_node_buffer_size_bytes" json:"exchg_node_buffer_size_bytes"`
	KuduMutationBufferSize                   int32   `thrift:"kudu_mutation_buffer_size,43,required" db:"kudu_mutation_buffer_size" json:"kudu_mutation_buffer_size"`
	KuduErrorBufferSize                      int32   `thrift:"kudu_error_buffer_size,44,required" db:"kudu_error_buffer_size" json:"kudu_error_buffer_size"`
	HmsEventPollingIntervalS                 int32   `thrift:"hms_event_polling_interval_s,45,required" db:"hms_event_polling_interval_s" json:"hms_event_polling_interval_s"`
	ImpalaBuildVersion                       string  `thrift:"impala_build_version,46,required" db:"impala_build_version" json:"impala_build_version"`
	AuthorizationFactoryClass                string  `thrift:"authorization_factory_class,47,required" db:"authorization_factory_class" json:"authorization_factory_class"`
	// unused field # 48
	RangerServiceType                string `thrift:"ranger_service_type,49,required" db:"ranger_service_type" json:"ranger_service_type"`
	RangerAppID                      string `thrift:"ranger_app_id,50,required" db:"ranger_app_id" json:"ranger_app_id"`
	AuthorizationProvider            string `thrift:"authorization_provider,51,required" db:"authorization_provider" json:"authorization_provider"`
	RecursivelyListPartitions        bool   `thrift:"recursively_list_partitions,52,required" db:"recursively_list_partitions" json:"recursively_list_partitions"`
	QueryEventHookClasses            string `thrift:"query_event_hook_classes,53,required" db:"query_event_hook_classes" json:"query_event_hook_classes"`
	QueryEventHookNthreads           int32  `thrift:"query_event_hook_nthreads,54,required" db:"query_event_hook_nthreads" json:"query_event_hook_nthreads"`
	IsExecutor                       bool   `thrift:"is_executor,55,required" db:"is_executor" json:"is_executor"`
	IsCoordinator                    bool   `thrift:"is_coordinator,56,required" db:"is_coordinator" json:"is_coordinator"`
	UseDedicatedCoordinatorEstimates bool   `thrift:"use_dedicated_coordinator_estimates,57,required" db:"use_dedicated_coordinator_estimates" json:"use_dedicated_coordinator_estimates"`
	BlacklistedDbs                   string `thrift:"blacklisted_dbs,58,required" db:"blacklisted_dbs" json:"blacklisted_dbs"`
	BlacklistedTables                string `thrift:"blacklisted_tables,59,required" db:"blacklisted_tables" json:"blacklisted_tables"`
	UnlockZorderSort                 bool   `thrift:"unlock_zorder_sort,60,required" db:"unlock_zorder_sort" json:"unlock_zorder_sort"`
	MinPrivilegeSetForShowStmts      string `thrift:"min_privilege_set_for_show_stmts,61,required" db:"min_privilege_set_for_show_stmts" json:"min_privilege_set_for_show_stmts"`
	// unused field # 62
	NumExpectedExecutors                         int32  `thrift:"num_expected_executors,63,required" db:"num_expected_executors" json:"num_expected_executors"`
	NumCheckAuthorizationThreads                 int32  `thrift:"num_check_authorization_threads,64,required" db:"num_check_authorization_threads" json:"num_check_authorization_threads"`
	UseCustomizedUserGroupsMapperForRanger       bool   `thrift:"use_customized_user_groups_mapper_for_ranger,65,required" db:"use_customized_user_groups_mapper_for_ranger" json:"use_customized_user_groups_mapper_for_ranger"`
	EnableColumnMasking                          bool   `thrift:"enable_column_masking,66,required" db:"enable_column_masking" json:"enable_column_masking"`
	EnableInsertEvents                           bool   `thrift:"enable_insert_events,67,required" db:"enable_insert_events" json:"enable_insert_events"`
	CompactCatalogTopic                          bool   `thrift:"compact_catalog_topic,68,required" db:"compact_catalog_topic" json:"compact_catalog_topic"`
	EnableIncrementalMetadataUpdates             bool   `thrift:"enable_incremental_metadata_updates,69,required" db:"enable_incremental_metadata_updates" json:"enable_incremental_metadata_updates"`
	TopicUpdateTblMaxWaitTimeMs                  int64  `thrift:"topic_update_tbl_max_wait_time_ms,70,required" db:"topic_update_tbl_max_wait_time_ms" json:"topic_update_tbl_max_wait_time_ms"`
	CatalogMaxLockSkippedTopicUpdates            int32  `thrift:"catalog_max_lock_skipped_topic_updates,71,required" db:"catalog_max_lock_skipped_topic_updates" json:"catalog_max_lock_skipped_topic_updates"`
	Saml2KeystorePath                            string `thrift:"saml2_keystore_path,72,required" db:"saml2_keystore_path" json:"saml2_keystore_path"`
	Saml2KeystorePassword                        string `thrift:"saml2_keystore_password,73,required" db:"saml2_keystore_password" json:"saml2_keystore_password"`
	Saml2PrivateKeyPassword                      string `thrift:"saml2_private_key_password,74,required" db:"saml2_private_key_password" json:"saml2_private_key_password"`
	Saml2IdpMetadata                             string `thrift:"saml2_idp_metadata,75,required" db:"saml2_idp_metadata" json:"saml2_idp_metadata"`
	Saml2SpEntityID                              string `thrift:"saml2_sp_entity_id,76,required" db:"saml2_sp_entity_id" json:"saml2_sp_entity_id"`
	Saml2SpCallbackURL                           string `thrift:"saml2_sp_callback_url,77,required" db:"saml2_sp_callback_url" json:"saml2_sp_callback_url"`
	Saml2WantAssertationsSigned                  bool   `thrift:"saml2_want_assertations_signed,78,required" db:"saml2_want_assertations_signed" json:"saml2_want_assertations_signed"`
	Saml2SignRequests                            bool   `thrift:"saml2_sign_requests,79,required" db:"saml2_sign_requests" json:"saml2_sign_requests"`
	Saml2CallbackTokenTTL                        int32  `thrift:"saml2_callback_token_ttl,80,required" db:"saml2_callback_token_ttl" json:"saml2_callback_token_ttl"`
	Saml2GroupAttributeName                      string `thrift:"saml2_group_attribute_name,81,required" db:"saml2_group_attribute_name" json:"saml2_group_attribute_name"`
	Saml2GroupFilter                             string `thrift:"saml2_group_filter,82,required" db:"saml2_group_filter" json:"saml2_group_filter"`
	Saml2EeTestMode                              bool   `thrift:"saml2_ee_test_mode,83,required" db:"saml2_ee_test_mode" json:"saml2_ee_test_mode"`
	ScratchDirs                                  string `thrift:"scratch_dirs,84,required" db:"scratch_dirs" json:"scratch_dirs"`
	EnableRowFiltering                           bool   `thrift:"enable_row_filtering,85,required" db:"enable_row_filtering" json:"enable_row_filtering"`
	MaxWaitTimeForSyncDdlS                       int32  `thrift:"max_wait_time_for_sync_ddl_s,86,required" db:"max_wait_time_for_sync_ddl_s" json:"max_wait_time_for_sync_ddl_s"`
	AllowOrdinalsInHaving                        bool   `thrift:"allow_ordinals_in_having,87,required" db:"allow_ordinals_in_having" json:"allow_ordinals_in_having"`
	StartHmsServer                               bool   `thrift:"start_hms_server,88,required" db:"start_hms_server" json:"start_hms_server"`
	HmsPort                                      int32  `thrift:"hms_port,89,required" db:"hms_port" json:"hms_port"`
	FallbackToHmsOnErrors                        bool   `thrift:"fallback_to_hms_on_errors,90,required" db:"fallback_to_hms_on_errors" json:"fallback_to_hms_on_errors"`
	EnableCatalogdHmsCache                       bool   `thrift:"enable_catalogd_hms_cache,91,required" db:"enable_catalogd_hms_cache" json:"enable_catalogd_hms_cache"`
	KuduSaslProtocolName                         string `thrift:"kudu_sasl_protocol_name,92,required" db:"kudu_sasl_protocol_name" json:"kudu_sasl_protocol_name"`
	WarnCatalogResponseSizeMb                    int32  `thrift:"warn_catalog_response_size_mb,93,required" db:"warn_catalog_response_size_mb" json:"warn_catalog_response_size_mb"`
	WarnCatalogResponseDurationS                 int32  `thrift:"warn_catalog_response_duration_s,94,required" db:"warn_catalog_response_duration_s" json:"warn_catalog_response_duration_s"`
	InvalidateHmsCacheOnDdls                     bool   `thrift:"invalidate_hms_cache_on_ddls,95,required" db:"invalidate_hms_cache_on_ddls" json:"invalidate_hms_cache_on_ddls"`
	StartupFilesystemCheckDirectories            string `thrift:"startup_filesystem_check_directories,96,required" db:"startup_filesystem_check_directories" json:"startup_filesystem_check_directories"`
	HmsEventIncrementalRefreshTransactionalTable bool   `thrift:"hms_event_incremental_refresh_transactional_table,97,required" db:"hms_event_incremental_refresh_transactional_table" json:"hms_event_incremental_refresh_transactional_table"`
	EnableShellBasedGroupsMappingSupport         bool   `thrift:"enable_shell_based_groups_mapping_support,98,required" db:"enable_shell_based_groups_mapping_support" json:"enable_shell_based_groups_mapping_support"`
	AutoCheckCompaction                          bool   `thrift:"auto_check_compaction,99,required" db:"auto_check_compaction" json:"auto_check_compaction"`
	EnableSyncToLatestEventOnDdls                bool   `thrift:"enable_sync_to_latest_event_on_ddls,100,required" db:"enable_sync_to_latest_event_on_ddls" json:"enable_sync_to_latest_event_on_ddls"`
	PullTableTypesAndComments                    bool   `thrift:"pull_table_types_and_comments,101,required" db:"pull_table_types_and_comments" json:"pull_table_types_and_comments"`
	UseHmsColumnOrderForHbaseTables              bool   `thrift:"use_hms_column_order_for_hbase_tables,102,required" db:"use_hms_column_order_for_hbase_tables" json:"use_hms_column_order_for_hbase_tables"`
	IgnoredDirPrefixList                         string `thrift:"ignored_dir_prefix_list,103,required" db:"ignored_dir_prefix_list" json:"ignored_dir_prefix_list"`
}

func NewTBackendGflags() *TBackendGflags {
	return &TBackendGflags{}
}

func (p *TBackendGflags) GetLoadAuthToLocalRules() bool {
	return p.LoadAuthToLocalRules
}

func (p *TBackendGflags) GetNonImpalaJavaVlog() int32 {
	return p.NonImpalaJavaVlog
}

func (p *TBackendGflags) GetImpalaLogLvl() int32 {
	return p.ImpalaLogLvl
}

func (p *TBackendGflags) GetIncStatsSizeLimitBytes() int64 {
	return p.IncStatsSizeLimitBytes
}

func (p *TBackendGflags) GetLineageEventLogDir() string {
	return p.LineageEventLogDir
}

func (p *TBackendGflags) GetLoadCatalogInBackground() bool {
	return p.LoadCatalogInBackground
}

func (p *TBackendGflags) GetNumMetadataLoadingThreads() int32 {
	return p.NumMetadataLoadingThreads
}

func (p *TBackendGflags) GetPrincipal() string {
	return p.Principal
}

func (p *TBackendGflags) GetServerName() string {
	return p.ServerName
}

func (p *TBackendGflags) GetKuduMasterHosts() string {
	return p.KuduMasterHosts
}

func (p *TBackendGflags) GetLocalLibraryPath() string {
	return p.LocalLibraryPath
}

func (p *TBackendGflags) GetReadSize() int32 {
	return p.ReadSize
}

func (p *TBackendGflags) GetKuduOperationTimeoutMs() int32 {
	return p.KuduOperationTimeoutMs
}

func (p *TBackendGflags) GetInitialHmsCnxnTimeoutS() int32 {
	return p.InitialHmsCnxnTimeoutS
}

func (p *TBackendGflags) GetEnableStatsExtrapolation() bool {
	return p.EnableStatsExtrapolation
}

func (p *TBackendGflags) GetMaxHdfsPartitionsParallelLoad() int32 {
	return p.MaxHdfsPartitionsParallelLoad
}

func (p *TBackendGflags) GetMaxNonhdfsPartitionsParallelLoad() int32 {
	return p.MaxNonhdfsPartitionsParallelLoad
}

func (p *TBackendGflags) GetReservedWordsVersion() TReservedWordsVersion {
	return p.ReservedWordsVersion
}

func (p *TBackendGflags) GetMaxFilterErrorRate() float64 {
	return p.MaxFilterErrorRate
}

func (p *TBackendGflags) GetMinBufferSize() int64 {
	return p.MinBufferSize
}

func (p *TBackendGflags) GetAuthorizedProxyGroupConfig() string {
	return p.AuthorizedProxyGroupConfig
}

func (p *TBackendGflags) GetUseLocalCatalog() bool {
	return p.UseLocalCatalog
}

func (p *TBackendGflags) GetDisableCatalogDataOpsDebugOnly() bool {
	return p.DisableCatalogDataOpsDebugOnly
}

func (p *TBackendGflags) GetLocalCatalogCacheMb() int32 {
	return p.LocalCatalogCacheMb
}

func (p *TBackendGflags) GetLocalCatalogCacheExpirationS() int32 {
	return p.LocalCatalogCacheExpirationS
}

func (p *TBackendGflags) GetCatalogTopicMode() string {
	return p.CatalogTopicMode
}

func (p *TBackendGflags) GetInvalidateTablesTimeoutS() int32 {
	return p.InvalidateTablesTimeoutS
}

func (p *TBackendGflags) GetInvalidateTablesOnMemoryPressure() bool {
	return p.InvalidateTablesOnMemoryPressure
}

func (p *TBackendGflags) GetInvalidateTablesGcOldGenFullThreshold() float64 {
	return p.InvalidateTablesGcOldGenFullThreshold
}

func (p *TBackendGflags) GetInvalidateTablesFractionOnMemoryPressure() float64 {
	return p.InvalidateTablesFractionOnMemoryPressure
}

func (p *TBackendGflags) GetLocalCatalogMaxFetchRetries() int32 {
	return p.LocalCatalogMaxFetchRetries
}

func (p *TBackendGflags) GetKuduScannerThreadEstimatedBytesPerColumn() int64 {
	return p.KuduScannerThreadEstimatedBytesPerColumn
}

func (p *TBackendGflags) GetKuduScannerThreadMaxEstimatedBytes() int64 {
	return p.KuduScannerThreadMaxEstimatedBytes
}

func (p *TBackendGflags) GetCatalogMaxParallelPartialFetchRPC() int32 {
	return p.CatalogMaxParallelPartialFetchRPC
}

func (p *TBackendGflags) GetCatalogPartialFetchRPCQueueTimeoutS() int64 {
	return p.CatalogPartialFetchRPCQueueTimeoutS
}

func (p *TBackendGflags) GetExchgNodeBufferSizeBytes() int64 {
	return p.ExchgNodeBufferSizeBytes
}

func (p *TBackendGflags) GetKuduMutationBufferSize() int32 {
	return p.KuduMutationBufferSize
}

func (p *TBackendGflags) GetKuduErrorBufferSize() int32 {
	return p.KuduErrorBufferSize
}

func (p *TBackendGflags) GetHmsEventPollingIntervalS() int32 {
	return p.HmsEventPollingIntervalS
}

func (p *TBackendGflags) GetImpalaBuildVersion() string {
	return p.ImpalaBuildVersion
}

func (p *TBackendGflags) GetAuthorizationFactoryClass() string {
	return p.AuthorizationFactoryClass
}

func (p *TBackendGflags) GetRangerServiceType() string {
	return p.RangerServiceType
}

func (p *TBackendGflags) GetRangerAppID() string {
	return p.RangerAppID
}

func (p *TBackendGflags) GetAuthorizationProvider() string {
	return p.AuthorizationProvider
}

func (p *TBackendGflags) GetRecursivelyListPartitions() bool {
	return p.RecursivelyListPartitions
}

func (p *TBackendGflags) GetQueryEventHookClasses() string {
	return p.QueryEventHookClasses
}

func (p *TBackendGflags) GetQueryEventHookNthreads() int32 {
	return p.QueryEventHookNthreads
}

func (p *TBackendGflags) GetIsExecutor() bool {
	return p.IsExecutor
}

func (p *TBackendGflags) GetIsCoordinator() bool {
	return p.IsCoordinator
}

func (p *TBackendGflags) GetUseDedicatedCoordinatorEstimates() bool {
	return p.UseDedicatedCoordinatorEstimates
}

func (p *TBackendGflags) GetBlacklistedDbs() string {
	return p.BlacklistedDbs
}

func (p *TBackendGflags) GetBlacklistedTables() string {
	return p.BlacklistedTables
}

func (p *TBackendGflags) GetUnlockZorderSort() bool {
	return p.UnlockZorderSort
}

func (p *TBackendGflags) GetMinPrivilegeSetForShowStmts() string {
	return p.MinPrivilegeSetForShowStmts
}

func (p *TBackendGflags) GetNumExpectedExecutors() int32 {
	return p.NumExpectedExecutors
}

func (p *TBackendGflags) GetNumCheckAuthorizationThreads() int32 {
	return p.NumCheckAuthorizationThreads
}

func (p *TBackendGflags) GetUseCustomizedUserGroupsMapperForRanger() bool {
	return p.UseCustomizedUserGroupsMapperForRanger
}

func (p *TBackendGflags) GetEnableColumnMasking() bool {
	return p.EnableColumnMasking
}

func (p *TBackendGflags) GetEnableInsertEvents() bool {
	return p.EnableInsertEvents
}

func (p *TBackendGflags) GetCompactCatalogTopic() bool {
	return p.CompactCatalogTopic
}

func (p *TBackendGflags) GetEnableIncrementalMetadataUpdates() bool {
	return p.EnableIncrementalMetadataUpdates
}

func (p *TBackendGflags) GetTopicUpdateTblMaxWaitTimeMs() int64 {
	return p.TopicUpdateTblMaxWaitTimeMs
}

func (p *TBackendGflags) GetCatalogMaxLockSkippedTopicUpdates() int32 {
	return p.CatalogMaxLockSkippedTopicUpdates
}

func (p *TBackendGflags) GetSaml2KeystorePath() string {
	return p.Saml2KeystorePath
}

func (p *TBackendGflags) GetSaml2KeystorePassword() string {
	return p.Saml2KeystorePassword
}

func (p *TBackendGflags) GetSaml2PrivateKeyPassword() string {
	return p.Saml2PrivateKeyPassword
}

func (p *TBackendGflags) GetSaml2IdpMetadata() string {
	return p.Saml2IdpMetadata
}

func (p *TBackendGflags) GetSaml2SpEntityID() string {
	return p.Saml2SpEntityID
}

func (p *TBackendGflags) GetSaml2SpCallbackURL() string {
	return p.Saml2SpCallbackURL
}

func (p *TBackendGflags) GetSaml2WantAssertationsSigned() bool {
	return p.Saml2WantAssertationsSigned
}

func (p *TBackendGflags) GetSaml2SignRequests() bool {
	return p.Saml2SignRequests
}

func (p *TBackendGflags) GetSaml2CallbackTokenTTL() int32 {
	return p.Saml2CallbackTokenTTL
}

func (p *TBackendGflags) GetSaml2GroupAttributeName() string {
	return p.Saml2GroupAttributeName
}

func (p *TBackendGflags) GetSaml2GroupFilter() string {
	return p.Saml2GroupFilter
}

func (p *TBackendGflags) GetSaml2EeTestMode() bool {
	return p.Saml2EeTestMode
}

func (p *TBackendGflags) GetScratchDirs() string {
	return p.ScratchDirs
}

func (p *TBackendGflags) GetEnableRowFiltering() bool {
	return p.EnableRowFiltering
}

func (p *TBackendGflags) GetMaxWaitTimeForSyncDdlS() int32 {
	return p.MaxWaitTimeForSyncDdlS
}

func (p *TBackendGflags) GetAllowOrdinalsInHaving() bool {
	return p.AllowOrdinalsInHaving
}

func (p *TBackendGflags) GetStartHmsServer() bool {
	return p.StartHmsServer
}

func (p *TBackendGflags) GetHmsPort() int32 {
	return p.HmsPort
}

func (p *TBackendGflags) GetFallbackToHmsOnErrors() bool {
	return p.FallbackToHmsOnErrors
}

func (p *TBackendGflags) GetEnableCatalogdHmsCache() bool {
	return p.EnableCatalogdHmsCache
}

func (p *TBackendGflags) GetKuduSaslProtocolName() string {
	return p.KuduSaslProtocolName
}

func (p *TBackendGflags) GetWarnCatalogResponseSizeMb() int32 {
	return p.WarnCatalogResponseSizeMb
}

func (p *TBackendGflags) GetWarnCatalogResponseDurationS() int32 {
	return p.WarnCatalogResponseDurationS
}

func (p *TBackendGflags) GetInvalidateHmsCacheOnDdls() bool {
	return p.InvalidateHmsCacheOnDdls
}

func (p *TBackendGflags) GetStartupFilesystemCheckDirectories() string {
	return p.StartupFilesystemCheckDirectories
}

func (p *TBackendGflags) GetHmsEventIncrementalRefreshTransactionalTable() bool {
	return p.HmsEventIncrementalRefreshTransactionalTable
}

func (p *TBackendGflags) GetEnableShellBasedGroupsMappingSupport() bool {
	return p.EnableShellBasedGroupsMappingSupport
}

func (p *TBackendGflags) GetAutoCheckCompaction() bool {
	return p.AutoCheckCompaction
}

func (p *TBackendGflags) GetEnableSyncToLatestEventOnDdls() bool {
	return p.EnableSyncToLatestEventOnDdls
}

func (p *TBackendGflags) GetPullTableTypesAndComments() bool {
	return p.PullTableTypesAndComments
}

func (p *TBackendGflags) GetUseHmsColumnOrderForHbaseTables() bool {
	return p.UseHmsColumnOrderForHbaseTables
}

func (p *TBackendGflags) GetIgnoredDirPrefixList() string {
	return p.IgnoredDirPrefixList
}
func (p *TBackendGflags) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetLoadAuthToLocalRules bool = false
	var issetNonImpalaJavaVlog bool = false
	var issetImpalaLogLvl bool = false
	var issetIncStatsSizeLimitBytes bool = false
	var issetLineageEventLogDir bool = false
	var issetLoadCatalogInBackground bool = false
	var issetNumMetadataLoadingThreads bool = false
	var issetPrincipal bool = false
	var issetServerName bool = false
	var issetKuduMasterHosts bool = false
	var issetLocalLibraryPath bool = false
	var issetReadSize bool = false
	var issetKuduOperationTimeoutMs bool = false
	var issetInitialHmsCnxnTimeoutS bool = false
	var issetEnableStatsExtrapolation bool = false
	var issetMaxHdfsPartitionsParallelLoad bool = false
	var issetMaxNonhdfsPartitionsParallelLoad bool = false
	var issetReservedWordsVersion bool = false
	var issetMaxFilterErrorRate bool = false
	var issetMinBufferSize bool = false
	var issetAuthorizedProxyGroupConfig bool = false
	var issetUseLocalCatalog bool = false
	var issetDisableCatalogDataOpsDebugOnly bool = false
	var issetLocalCatalogCacheMb bool = false
	var issetLocalCatalogCacheExpirationS bool = false
	var issetCatalogTopicMode bool = false
	var issetInvalidateTablesTimeoutS bool = false
	var issetInvalidateTablesOnMemoryPressure bool = false
	var issetInvalidateTablesGcOldGenFullThreshold bool = false
	var issetInvalidateTablesFractionOnMemoryPressure bool = false
	var issetLocalCatalogMaxFetchRetries bool = false
	var issetKuduScannerThreadEstimatedBytesPerColumn bool = false
	var issetKuduScannerThreadMaxEstimatedBytes bool = false
	var issetCatalogMaxParallelPartialFetchRPC bool = false
	var issetCatalogPartialFetchRPCQueueTimeoutS bool = false
	var issetExchgNodeBufferSizeBytes bool = false
	var issetKuduMutationBufferSize bool = false
	var issetKuduErrorBufferSize bool = false
	var issetHmsEventPollingIntervalS bool = false
	var issetImpalaBuildVersion bool = false
	var issetAuthorizationFactoryClass bool = false
	var issetRangerServiceType bool = false
	var issetRangerAppID bool = false
	var issetAuthorizationProvider bool = false
	var issetRecursivelyListPartitions bool = false
	var issetQueryEventHookClasses bool = false
	var issetQueryEventHookNthreads bool = false
	var issetIsExecutor bool = false
	var issetIsCoordinator bool = false
	var issetUseDedicatedCoordinatorEstimates bool = false
	var issetBlacklistedDbs bool = false
	var issetBlacklistedTables bool = false
	var issetUnlockZorderSort bool = false
	var issetMinPrivilegeSetForShowStmts bool = false
	var issetNumExpectedExecutors bool = false
	var issetNumCheckAuthorizationThreads bool = false
	var issetUseCustomizedUserGroupsMapperForRanger bool = false
	var issetEnableColumnMasking bool = false
	var issetEnableInsertEvents bool = false
	var issetCompactCatalogTopic bool = false
	var issetEnableIncrementalMetadataUpdates bool = false
	var issetTopicUpdateTblMaxWaitTimeMs bool = false
	var issetCatalogMaxLockSkippedTopicUpdates bool = false
	var issetSaml2KeystorePath bool = false
	var issetSaml2KeystorePassword bool = false
	var issetSaml2PrivateKeyPassword bool = false
	var issetSaml2IdpMetadata bool = false
	var issetSaml2SpEntityID bool = false
	var issetSaml2SpCallbackURL bool = false
	var issetSaml2WantAssertationsSigned bool = false
	var issetSaml2SignRequests bool = false
	var issetSaml2CallbackTokenTTL bool = false
	var issetSaml2GroupAttributeName bool = false
	var issetSaml2GroupFilter bool = false
	var issetSaml2EeTestMode bool = false
	var issetScratchDirs bool = false
	var issetEnableRowFiltering bool = false
	var issetMaxWaitTimeForSyncDdlS bool = false
	var issetAllowOrdinalsInHaving bool = false
	var issetStartHmsServer bool = false
	var issetHmsPort bool = false
	var issetFallbackToHmsOnErrors bool = false
	var issetEnableCatalogdHmsCache bool = false
	var issetKuduSaslProtocolName bool = false
	var issetWarnCatalogResponseSizeMb bool = false
	var issetWarnCatalogResponseDurationS bool = false
	var issetInvalidateHmsCacheOnDdls bool = false
	var issetStartupFilesystemCheckDirectories bool = false
	var issetHmsEventIncrementalRefreshTransactionalTable bool = false
	var issetEnableShellBasedGroupsMappingSupport bool = false
	var issetAutoCheckCompaction bool = false
	var issetEnableSyncToLatestEventOnDdls bool = false
	var issetPullTableTypesAndComments bool = false
	var issetUseHmsColumnOrderForHbaseTables bool = false
	var issetIgnoredDirPrefixList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetLoadAuthToLocalRules = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetNonImpalaJavaVlog = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetImpalaLogLvl = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetIncStatsSizeLimitBytes = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetLineageEventLogDir = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetLoadCatalogInBackground = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetNumMetadataLoadingThreads = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetPrincipal = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetServerName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
				issetKuduMasterHosts = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
				issetLocalLibraryPath = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
				issetReadSize = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
				issetKuduOperationTimeoutMs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
				issetInitialHmsCnxnTimeoutS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
				issetEnableStatsExtrapolation = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
				issetMaxHdfsPartitionsParallelLoad = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField21(ctx, iprot); err != nil {
					return err
				}
				issetMaxNonhdfsPartitionsParallelLoad = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField22(ctx, iprot); err != nil {
					return err
				}
				issetReservedWordsVersion = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField23(ctx, iprot); err != nil {
					return err
				}
				issetMaxFilterErrorRate = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField24(ctx, iprot); err != nil {
					return err
				}
				issetMinBufferSize = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField26(ctx, iprot); err != nil {
					return err
				}
				issetAuthorizedProxyGroupConfig = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField27(ctx, iprot); err != nil {
					return err
				}
				issetUseLocalCatalog = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField28(ctx, iprot); err != nil {
					return err
				}
				issetDisableCatalogDataOpsDebugOnly = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 29:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField29(ctx, iprot); err != nil {
					return err
				}
				issetLocalCatalogCacheMb = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField30(ctx, iprot); err != nil {
					return err
				}
				issetLocalCatalogCacheExpirationS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField32(ctx, iprot); err != nil {
					return err
				}
				issetCatalogTopicMode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 33:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField33(ctx, iprot); err != nil {
					return err
				}
				issetInvalidateTablesTimeoutS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 34:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField34(ctx, iprot); err != nil {
					return err
				}
				issetInvalidateTablesOnMemoryPressure = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 35:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField35(ctx, iprot); err != nil {
					return err
				}
				issetInvalidateTablesGcOldGenFullThreshold = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 36:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField36(ctx, iprot); err != nil {
					return err
				}
				issetInvalidateTablesFractionOnMemoryPressure = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 37:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField37(ctx, iprot); err != nil {
					return err
				}
				issetLocalCatalogMaxFetchRetries = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 38:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField38(ctx, iprot); err != nil {
					return err
				}
				issetKuduScannerThreadEstimatedBytesPerColumn = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 39:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField39(ctx, iprot); err != nil {
					return err
				}
				issetKuduScannerThreadMaxEstimatedBytes = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField40(ctx, iprot); err != nil {
					return err
				}
				issetCatalogMaxParallelPartialFetchRPC = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 41:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField41(ctx, iprot); err != nil {
					return err
				}
				issetCatalogPartialFetchRPCQueueTimeoutS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 42:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField42(ctx, iprot); err != nil {
					return err
				}
				issetExchgNodeBufferSizeBytes = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 43:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField43(ctx, iprot); err != nil {
					return err
				}
				issetKuduMutationBufferSize = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 44:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField44(ctx, iprot); err != nil {
					return err
				}
				issetKuduErrorBufferSize = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 45:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField45(ctx, iprot); err != nil {
					return err
				}
				issetHmsEventPollingIntervalS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 46:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField46(ctx, iprot); err != nil {
					return err
				}
				issetImpalaBuildVersion = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 47:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField47(ctx, iprot); err != nil {
					return err
				}
				issetAuthorizationFactoryClass = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 49:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField49(ctx, iprot); err != nil {
					return err
				}
				issetRangerServiceType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField50(ctx, iprot); err != nil {
					return err
				}
				issetRangerAppID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 51:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField51(ctx, iprot); err != nil {
					return err
				}
				issetAuthorizationProvider = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 52:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField52(ctx, iprot); err != nil {
					return err
				}
				issetRecursivelyListPartitions = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 53:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField53(ctx, iprot); err != nil {
					return err
				}
				issetQueryEventHookClasses = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 54:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField54(ctx, iprot); err != nil {
					return err
				}
				issetQueryEventHookNthreads = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 55:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField55(ctx, iprot); err != nil {
					return err
				}
				issetIsExecutor = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 56:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField56(ctx, iprot); err != nil {
					return err
				}
				issetIsCoordinator = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 57:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField57(ctx, iprot); err != nil {
					return err
				}
				issetUseDedicatedCoordinatorEstimates = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 58:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField58(ctx, iprot); err != nil {
					return err
				}
				issetBlacklistedDbs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 59:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField59(ctx, iprot); err != nil {
					return err
				}
				issetBlacklistedTables = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 60:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField60(ctx, iprot); err != nil {
					return err
				}
				issetUnlockZorderSort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 61:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField61(ctx, iprot); err != nil {
					return err
				}
				issetMinPrivilegeSetForShowStmts = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 63:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField63(ctx, iprot); err != nil {
					return err
				}
				issetNumExpectedExecutors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 64:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField64(ctx, iprot); err != nil {
					return err
				}
				issetNumCheckAuthorizationThreads = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 65:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField65(ctx, iprot); err != nil {
					return err
				}
				issetUseCustomizedUserGroupsMapperForRanger = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 66:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField66(ctx, iprot); err != nil {
					return err
				}
				issetEnableColumnMasking = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 67:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField67(ctx, iprot); err != nil {
					return err
				}
				issetEnableInsertEvents = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 68:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField68(ctx, iprot); err != nil {
					return err
				}
				issetCompactCatalogTopic = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 69:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField69(ctx, iprot); err != nil {
					return err
				}
				issetEnableIncrementalMetadataUpdates = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 70:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField70(ctx, iprot); err != nil {
					return err
				}
				issetTopicUpdateTblMaxWaitTimeMs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 71:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField71(ctx, iprot); err != nil {
					return err
				}
				issetCatalogMaxLockSkippedTopicUpdates = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 72:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField72(ctx, iprot); err != nil {
					return err
				}
				issetSaml2KeystorePath = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 73:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField73(ctx, iprot); err != nil {
					return err
				}
				issetSaml2KeystorePassword = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 74:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField74(ctx, iprot); err != nil {
					return err
				}
				issetSaml2PrivateKeyPassword = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 75:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField75(ctx, iprot); err != nil {
					return err
				}
				issetSaml2IdpMetadata = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 76:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField76(ctx, iprot); err != nil {
					return err
				}
				issetSaml2SpEntityID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 77:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField77(ctx, iprot); err != nil {
					return err
				}
				issetSaml2SpCallbackURL = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 78:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField78(ctx, iprot); err != nil {
					return err
				}
				issetSaml2WantAssertationsSigned = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 79:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField79(ctx, iprot); err != nil {
					return err
				}
				issetSaml2SignRequests = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 80:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField80(ctx, iprot); err != nil {
					return err
				}
				issetSaml2CallbackTokenTTL = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 81:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField81(ctx, iprot); err != nil {
					return err
				}
				issetSaml2GroupAttributeName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 82:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField82(ctx, iprot); err != nil {
					return err
				}
				issetSaml2GroupFilter = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 83:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField83(ctx, iprot); err != nil {
					return err
				}
				issetSaml2EeTestMode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 84:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField84(ctx, iprot); err != nil {
					return err
				}
				issetScratchDirs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 85:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField85(ctx, iprot); err != nil {
					return err
				}
				issetEnableRowFiltering = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 86:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField86(ctx, iprot); err != nil {
					return err
				}
				issetMaxWaitTimeForSyncDdlS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 87:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField87(ctx, iprot); err != nil {
					return err
				}
				issetAllowOrdinalsInHaving = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 88:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField88(ctx, iprot); err != nil {
					return err
				}
				issetStartHmsServer = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 89:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField89(ctx, iprot); err != nil {
					return err
				}
				issetHmsPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 90:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField90(ctx, iprot); err != nil {
					return err
				}
				issetFallbackToHmsOnErrors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 91:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField91(ctx, iprot); err != nil {
					return err
				}
				issetEnableCatalogdHmsCache = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 92:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField92(ctx, iprot); err != nil {
					return err
				}
				issetKuduSaslProtocolName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 93:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField93(ctx, iprot); err != nil {
					return err
				}
				issetWarnCatalogResponseSizeMb = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 94:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField94(ctx, iprot); err != nil {
					return err
				}
				issetWarnCatalogResponseDurationS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 95:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField95(ctx, iprot); err != nil {
					return err
				}
				issetInvalidateHmsCacheOnDdls = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 96:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField96(ctx, iprot); err != nil {
					return err
				}
				issetStartupFilesystemCheckDirectories = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 97:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField97(ctx, iprot); err != nil {
					return err
				}
				issetHmsEventIncrementalRefreshTransactionalTable = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 98:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField98(ctx, iprot); err != nil {
					return err
				}
				issetEnableShellBasedGroupsMappingSupport = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 99:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField99(ctx, iprot); err != nil {
					return err
				}
				issetAutoCheckCompaction = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField100(ctx, iprot); err != nil {
					return err
				}
				issetEnableSyncToLatestEventOnDdls = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 101:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField101(ctx, iprot); err != nil {
					return err
				}
				issetPullTableTypesAndComments = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 102:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField102(ctx, iprot); err != nil {
					return err
				}
				issetUseHmsColumnOrderForHbaseTables = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 103:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField103(ctx, iprot); err != nil {
					return err
				}
				issetIgnoredDirPrefixList = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetLoadAuthToLocalRules {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LoadAuthToLocalRules is not set"))
	}
	if !issetNonImpalaJavaVlog {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NonImpalaJavaVlog is not set"))
	}
	if !issetImpalaLogLvl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImpalaLogLvl is not set"))
	}
	if !issetIncStatsSizeLimitBytes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IncStatsSizeLimitBytes is not set"))
	}
	if !issetLineageEventLogDir {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LineageEventLogDir is not set"))
	}
	if !issetLoadCatalogInBackground {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LoadCatalogInBackground is not set"))
	}
	if !issetNumMetadataLoadingThreads {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumMetadataLoadingThreads is not set"))
	}
	if !issetPrincipal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Principal is not set"))
	}
	if !issetServerName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerName is not set"))
	}
	if !issetKuduMasterHosts {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KuduMasterHosts is not set"))
	}
	if !issetLocalLibraryPath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalLibraryPath is not set"))
	}
	if !issetReadSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReadSize is not set"))
	}
	if !issetKuduOperationTimeoutMs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KuduOperationTimeoutMs is not set"))
	}
	if !issetInitialHmsCnxnTimeoutS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InitialHmsCnxnTimeoutS is not set"))
	}
	if !issetEnableStatsExtrapolation {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableStatsExtrapolation is not set"))
	}
	if !issetMaxHdfsPartitionsParallelLoad {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxHdfsPartitionsParallelLoad is not set"))
	}
	if !issetMaxNonhdfsPartitionsParallelLoad {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxNonhdfsPartitionsParallelLoad is not set"))
	}
	if !issetReservedWordsVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReservedWordsVersion is not set"))
	}
	if !issetMaxFilterErrorRate {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxFilterErrorRate is not set"))
	}
	if !issetMinBufferSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinBufferSize is not set"))
	}
	if !issetAuthorizedProxyGroupConfig {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorizedProxyGroupConfig is not set"))
	}
	if !issetUseLocalCatalog {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UseLocalCatalog is not set"))
	}
	if !issetDisableCatalogDataOpsDebugOnly {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DisableCatalogDataOpsDebugOnly is not set"))
	}
	if !issetLocalCatalogCacheMb {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalCatalogCacheMb is not set"))
	}
	if !issetLocalCatalogCacheExpirationS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalCatalogCacheExpirationS is not set"))
	}
	if !issetCatalogTopicMode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CatalogTopicMode is not set"))
	}
	if !issetInvalidateTablesTimeoutS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InvalidateTablesTimeoutS is not set"))
	}
	if !issetInvalidateTablesOnMemoryPressure {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InvalidateTablesOnMemoryPressure is not set"))
	}
	if !issetInvalidateTablesGcOldGenFullThreshold {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InvalidateTablesGcOldGenFullThreshold is not set"))
	}
	if !issetInvalidateTablesFractionOnMemoryPressure {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InvalidateTablesFractionOnMemoryPressure is not set"))
	}
	if !issetLocalCatalogMaxFetchRetries {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalCatalogMaxFetchRetries is not set"))
	}
	if !issetKuduScannerThreadEstimatedBytesPerColumn {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KuduScannerThreadEstimatedBytesPerColumn is not set"))
	}
	if !issetKuduScannerThreadMaxEstimatedBytes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KuduScannerThreadMaxEstimatedBytes is not set"))
	}
	if !issetCatalogMaxParallelPartialFetchRPC {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CatalogMaxParallelPartialFetchRPC is not set"))
	}
	if !issetCatalogPartialFetchRPCQueueTimeoutS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CatalogPartialFetchRPCQueueTimeoutS is not set"))
	}
	if !issetExchgNodeBufferSizeBytes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExchgNodeBufferSizeBytes is not set"))
	}
	if !issetKuduMutationBufferSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KuduMutationBufferSize is not set"))
	}
	if !issetKuduErrorBufferSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KuduErrorBufferSize is not set"))
	}
	if !issetHmsEventPollingIntervalS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HmsEventPollingIntervalS is not set"))
	}
	if !issetImpalaBuildVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ImpalaBuildVersion is not set"))
	}
	if !issetAuthorizationFactoryClass {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorizationFactoryClass is not set"))
	}
	if !issetRangerServiceType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RangerServiceType is not set"))
	}
	if !issetRangerAppID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RangerAppID is not set"))
	}
	if !issetAuthorizationProvider {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorizationProvider is not set"))
	}
	if !issetRecursivelyListPartitions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RecursivelyListPartitions is not set"))
	}
	if !issetQueryEventHookClasses {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryEventHookClasses is not set"))
	}
	if !issetQueryEventHookNthreads {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryEventHookNthreads is not set"))
	}
	if !issetIsExecutor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsExecutor is not set"))
	}
	if !issetIsCoordinator {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsCoordinator is not set"))
	}
	if !issetUseDedicatedCoordinatorEstimates {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UseDedicatedCoordinatorEstimates is not set"))
	}
	if !issetBlacklistedDbs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlacklistedDbs is not set"))
	}
	if !issetBlacklistedTables {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlacklistedTables is not set"))
	}
	if !issetUnlockZorderSort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnlockZorderSort is not set"))
	}
	if !issetMinPrivilegeSetForShowStmts {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinPrivilegeSetForShowStmts is not set"))
	}
	if !issetNumExpectedExecutors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumExpectedExecutors is not set"))
	}
	if !issetNumCheckAuthorizationThreads {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumCheckAuthorizationThreads is not set"))
	}
	if !issetUseCustomizedUserGroupsMapperForRanger {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UseCustomizedUserGroupsMapperForRanger is not set"))
	}
	if !issetEnableColumnMasking {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableColumnMasking is not set"))
	}
	if !issetEnableInsertEvents {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableInsertEvents is not set"))
	}
	if !issetCompactCatalogTopic {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CompactCatalogTopic is not set"))
	}
	if !issetEnableIncrementalMetadataUpdates {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableIncrementalMetadataUpdates is not set"))
	}
	if !issetTopicUpdateTblMaxWaitTimeMs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicUpdateTblMaxWaitTimeMs is not set"))
	}
	if !issetCatalogMaxLockSkippedTopicUpdates {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CatalogMaxLockSkippedTopicUpdates is not set"))
	}
	if !issetSaml2KeystorePath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2KeystorePath is not set"))
	}
	if !issetSaml2KeystorePassword {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2KeystorePassword is not set"))
	}
	if !issetSaml2PrivateKeyPassword {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2PrivateKeyPassword is not set"))
	}
	if !issetSaml2IdpMetadata {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2IdpMetadata is not set"))
	}
	if !issetSaml2SpEntityID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2SpEntityID is not set"))
	}
	if !issetSaml2SpCallbackURL {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2SpCallbackURL is not set"))
	}
	if !issetSaml2WantAssertationsSigned {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2WantAssertationsSigned is not set"))
	}
	if !issetSaml2SignRequests {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2SignRequests is not set"))
	}
	if !issetSaml2CallbackTokenTTL {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2CallbackTokenTTL is not set"))
	}
	if !issetSaml2GroupAttributeName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2GroupAttributeName is not set"))
	}
	if !issetSaml2GroupFilter {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2GroupFilter is not set"))
	}
	if !issetSaml2EeTestMode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saml2EeTestMode is not set"))
	}
	if !issetScratchDirs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ScratchDirs is not set"))
	}
	if !issetEnableRowFiltering {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableRowFiltering is not set"))
	}
	if !issetMaxWaitTimeForSyncDdlS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxWaitTimeForSyncDdlS is not set"))
	}
	if !issetAllowOrdinalsInHaving {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AllowOrdinalsInHaving is not set"))
	}
	if !issetStartHmsServer {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartHmsServer is not set"))
	}
	if !issetHmsPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HmsPort is not set"))
	}
	if !issetFallbackToHmsOnErrors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FallbackToHmsOnErrors is not set"))
	}
	if !issetEnableCatalogdHmsCache {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableCatalogdHmsCache is not set"))
	}
	if !issetKuduSaslProtocolName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KuduSaslProtocolName is not set"))
	}
	if !issetWarnCatalogResponseSizeMb {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WarnCatalogResponseSizeMb is not set"))
	}
	if !issetWarnCatalogResponseDurationS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WarnCatalogResponseDurationS is not set"))
	}
	if !issetInvalidateHmsCacheOnDdls {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InvalidateHmsCacheOnDdls is not set"))
	}
	if !issetStartupFilesystemCheckDirectories {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartupFilesystemCheckDirectories is not set"))
	}
	if !issetHmsEventIncrementalRefreshTransactionalTable {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HmsEventIncrementalRefreshTransactionalTable is not set"))
	}
	if !issetEnableShellBasedGroupsMappingSupport {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableShellBasedGroupsMappingSupport is not set"))
	}
	if !issetAutoCheckCompaction {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AutoCheckCompaction is not set"))
	}
	if !issetEnableSyncToLatestEventOnDdls {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableSyncToLatestEventOnDdls is not set"))
	}
	if !issetPullTableTypesAndComments {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PullTableTypesAndComments is not set"))
	}
	if !issetUseHmsColumnOrderForHbaseTables {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UseHmsColumnOrderForHbaseTables is not set"))
	}
	if !issetIgnoredDirPrefixList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IgnoredDirPrefixList is not set"))
	}
	return nil
}

func (p *TBackendGflags) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LoadAuthToLocalRules = v
	}
	return nil
}

func (p *TBackendGflags) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NonImpalaJavaVlog = v
	}
	return nil
}

func (p *TBackendGflags) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ImpalaLogLvl = v
	}
	return nil
}

func (p *TBackendGflags) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IncStatsSizeLimitBytes = v
	}
	return nil
}

func (p *TBackendGflags) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LineageEventLogDir = v
	}
	return nil
}

func (p *TBackendGflags) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LoadCatalogInBackground = v
	}
	return nil
}

func (p *TBackendGflags) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.NumMetadataLoadingThreads = v
	}
	return nil
}

func (p *TBackendGflags) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Principal = v
	}
	return nil
}

func (p *TBackendGflags) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ServerName = v
	}
	return nil
}

func (p *TBackendGflags) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.KuduMasterHosts = v
	}
	return nil
}

func (p *TBackendGflags) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.LocalLibraryPath = v
	}
	return nil
}

func (p *TBackendGflags) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ReadSize = v
	}
	return nil
}

func (p *TBackendGflags) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.KuduOperationTimeoutMs = v
	}
	return nil
}

func (p *TBackendGflags) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.InitialHmsCnxnTimeoutS = v
	}
	return nil
}

func (p *TBackendGflags) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.EnableStatsExtrapolation = v
	}
	return nil
}

func (p *TBackendGflags) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.MaxHdfsPartitionsParallelLoad = v
	}
	return nil
}

func (p *TBackendGflags) ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.MaxNonhdfsPartitionsParallelLoad = v
	}
	return nil
}

func (p *TBackendGflags) ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := TReservedWordsVersion(v)
		p.ReservedWordsVersion = temp
	}
	return nil
}

func (p *TBackendGflags) ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.MaxFilterErrorRate = v
	}
	return nil
}

func (p *TBackendGflags) ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.MinBufferSize = v
	}
	return nil
}

func (p *TBackendGflags) ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.AuthorizedProxyGroupConfig = v
	}
	return nil
}

func (p *TBackendGflags) ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.UseLocalCatalog = v
	}
	return nil
}

func (p *TBackendGflags) ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.DisableCatalogDataOpsDebugOnly = v
	}
	return nil
}

func (p *TBackendGflags) ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.LocalCatalogCacheMb = v
	}
	return nil
}

func (p *TBackendGflags) ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.LocalCatalogCacheExpirationS = v
	}
	return nil
}

func (p *TBackendGflags) ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.CatalogTopicMode = v
	}
	return nil
}

func (p *TBackendGflags) ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.InvalidateTablesTimeoutS = v
	}
	return nil
}

func (p *TBackendGflags) ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.InvalidateTablesOnMemoryPressure = v
	}
	return nil
}

func (p *TBackendGflags) ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.InvalidateTablesGcOldGenFullThreshold = v
	}
	return nil
}

func (p *TBackendGflags) ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.InvalidateTablesFractionOnMemoryPressure = v
	}
	return nil
}

func (p *TBackendGflags) ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.LocalCatalogMaxFetchRetries = v
	}
	return nil
}

func (p *TBackendGflags) ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.KuduScannerThreadEstimatedBytesPerColumn = v
	}
	return nil
}

func (p *TBackendGflags) ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		p.KuduScannerThreadMaxEstimatedBytes = v
	}
	return nil
}

func (p *TBackendGflags) ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.CatalogMaxParallelPartialFetchRPC = v
	}
	return nil
}

func (p *TBackendGflags) ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 41: ", err)
	} else {
		p.CatalogPartialFetchRPCQueueTimeoutS = v
	}
	return nil
}

func (p *TBackendGflags) ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 42: ", err)
	} else {
		p.ExchgNodeBufferSizeBytes = v
	}
	return nil
}

func (p *TBackendGflags) ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 43: ", err)
	} else {
		p.KuduMutationBufferSize = v
	}
	return nil
}

func (p *TBackendGflags) ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 44: ", err)
	} else {
		p.KuduErrorBufferSize = v
	}
	return nil
}

func (p *TBackendGflags) ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 45: ", err)
	} else {
		p.HmsEventPollingIntervalS = v
	}
	return nil
}

func (p *TBackendGflags) ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 46: ", err)
	} else {
		p.ImpalaBuildVersion = v
	}
	return nil
}

func (p *TBackendGflags) ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 47: ", err)
	} else {
		p.AuthorizationFactoryClass = v
	}
	return nil
}

func (p *TBackendGflags) ReadField49(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 49: ", err)
	} else {
		p.RangerServiceType = v
	}
	return nil
}

func (p *TBackendGflags) ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.RangerAppID = v
	}
	return nil
}

func (p *TBackendGflags) ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 51: ", err)
	} else {
		p.AuthorizationProvider = v
	}
	return nil
}

func (p *TBackendGflags) ReadField52(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 52: ", err)
	} else {
		p.RecursivelyListPartitions = v
	}
	return nil
}

func (p *TBackendGflags) ReadField53(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 53: ", err)
	} else {
		p.QueryEventHookClasses = v
	}
	return nil
}

func (p *TBackendGflags) ReadField54(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 54: ", err)
	} else {
		p.QueryEventHookNthreads = v
	}
	return nil
}

func (p *TBackendGflags) ReadField55(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 55: ", err)
	} else {
		p.IsExecutor = v
	}
	return nil
}

func (p *TBackendGflags) ReadField56(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 56: ", err)
	} else {
		p.IsCoordinator = v
	}
	return nil
}

func (p *TBackendGflags) ReadField57(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 57: ", err)
	} else {
		p.UseDedicatedCoordinatorEstimates = v
	}
	return nil
}

func (p *TBackendGflags) ReadField58(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 58: ", err)
	} else {
		p.BlacklistedDbs = v
	}
	return nil
}

func (p *TBackendGflags) ReadField59(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 59: ", err)
	} else {
		p.BlacklistedTables = v
	}
	return nil
}

func (p *TBackendGflags) ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 60: ", err)
	} else {
		p.UnlockZorderSort = v
	}
	return nil
}

func (p *TBackendGflags) ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 61: ", err)
	} else {
		p.MinPrivilegeSetForShowStmts = v
	}
	return nil
}

func (p *TBackendGflags) ReadField63(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 63: ", err)
	} else {
		p.NumExpectedExecutors = v
	}
	return nil
}

func (p *TBackendGflags) ReadField64(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 64: ", err)
	} else {
		p.NumCheckAuthorizationThreads = v
	}
	return nil
}

func (p *TBackendGflags) ReadField65(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 65: ", err)
	} else {
		p.UseCustomizedUserGroupsMapperForRanger = v
	}
	return nil
}

func (p *TBackendGflags) ReadField66(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 66: ", err)
	} else {
		p.EnableColumnMasking = v
	}
	return nil
}

func (p *TBackendGflags) ReadField67(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 67: ", err)
	} else {
		p.EnableInsertEvents = v
	}
	return nil
}

func (p *TBackendGflags) ReadField68(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 68: ", err)
	} else {
		p.CompactCatalogTopic = v
	}
	return nil
}

func (p *TBackendGflags) ReadField69(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 69: ", err)
	} else {
		p.EnableIncrementalMetadataUpdates = v
	}
	return nil
}

func (p *TBackendGflags) ReadField70(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 70: ", err)
	} else {
		p.TopicUpdateTblMaxWaitTimeMs = v
	}
	return nil
}

func (p *TBackendGflags) ReadField71(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 71: ", err)
	} else {
		p.CatalogMaxLockSkippedTopicUpdates = v
	}
	return nil
}

func (p *TBackendGflags) ReadField72(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 72: ", err)
	} else {
		p.Saml2KeystorePath = v
	}
	return nil
}

func (p *TBackendGflags) ReadField73(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 73: ", err)
	} else {
		p.Saml2KeystorePassword = v
	}
	return nil
}

func (p *TBackendGflags) ReadField74(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 74: ", err)
	} else {
		p.Saml2PrivateKeyPassword = v
	}
	return nil
}

func (p *TBackendGflags) ReadField75(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 75: ", err)
	} else {
		p.Saml2IdpMetadata = v
	}
	return nil
}

func (p *TBackendGflags) ReadField76(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 76: ", err)
	} else {
		p.Saml2SpEntityID = v
	}
	return nil
}

func (p *TBackendGflags) ReadField77(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 77: ", err)
	} else {
		p.Saml2SpCallbackURL = v
	}
	return nil
}

func (p *TBackendGflags) ReadField78(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 78: ", err)
	} else {
		p.Saml2WantAssertationsSigned = v
	}
	return nil
}

func (p *TBackendGflags) ReadField79(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 79: ", err)
	} else {
		p.Saml2SignRequests = v
	}
	return nil
}

func (p *TBackendGflags) ReadField80(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 80: ", err)
	} else {
		p.Saml2CallbackTokenTTL = v
	}
	return nil
}

func (p *TBackendGflags) ReadField81(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 81: ", err)
	} else {
		p.Saml2GroupAttributeName = v
	}
	return nil
}

func (p *TBackendGflags) ReadField82(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 82: ", err)
	} else {
		p.Saml2GroupFilter = v
	}
	return nil
}

func (p *TBackendGflags) ReadField83(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 83: ", err)
	} else {
		p.Saml2EeTestMode = v
	}
	return nil
}

func (p *TBackendGflags) ReadField84(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 84: ", err)
	} else {
		p.ScratchDirs = v
	}
	return nil
}

func (p *TBackendGflags) ReadField85(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 85: ", err)
	} else {
		p.EnableRowFiltering = v
	}
	return nil
}

func (p *TBackendGflags) ReadField86(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 86: ", err)
	} else {
		p.MaxWaitTimeForSyncDdlS = v
	}
	return nil
}

func (p *TBackendGflags) ReadField87(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 87: ", err)
	} else {
		p.AllowOrdinalsInHaving = v
	}
	return nil
}

func (p *TBackendGflags) ReadField88(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 88: ", err)
	} else {
		p.StartHmsServer = v
	}
	return nil
}

func (p *TBackendGflags) ReadField89(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 89: ", err)
	} else {
		p.HmsPort = v
	}
	return nil
}

func (p *TBackendGflags) ReadField90(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 90: ", err)
	} else {
		p.FallbackToHmsOnErrors = v
	}
	return nil
}

func (p *TBackendGflags) ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 91: ", err)
	} else {
		p.EnableCatalogdHmsCache = v
	}
	return nil
}

func (p *TBackendGflags) ReadField92(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 92: ", err)
	} else {
		p.KuduSaslProtocolName = v
	}
	return nil
}

func (p *TBackendGflags) ReadField93(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 93: ", err)
	} else {
		p.WarnCatalogResponseSizeMb = v
	}
	return nil
}

func (p *TBackendGflags) ReadField94(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 94: ", err)
	} else {
		p.WarnCatalogResponseDurationS = v
	}
	return nil
}

func (p *TBackendGflags) ReadField95(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 95: ", err)
	} else {
		p.InvalidateHmsCacheOnDdls = v
	}
	return nil
}

func (p *TBackendGflags) ReadField96(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 96: ", err)
	} else {
		p.StartupFilesystemCheckDirectories = v
	}
	return nil
}

func (p *TBackendGflags) ReadField97(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 97: ", err)
	} else {
		p.HmsEventIncrementalRefreshTransactionalTable = v
	}
	return nil
}

func (p *TBackendGflags) ReadField98(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 98: ", err)
	} else {
		p.EnableShellBasedGroupsMappingSupport = v
	}
	return nil
}

func (p *TBackendGflags) ReadField99(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 99: ", err)
	} else {
		p.AutoCheckCompaction = v
	}
	return nil
}

func (p *TBackendGflags) ReadField100(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 100: ", err)
	} else {
		p.EnableSyncToLatestEventOnDdls = v
	}
	return nil
}

func (p *TBackendGflags) ReadField101(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 101: ", err)
	} else {
		p.PullTableTypesAndComments = v
	}
	return nil
}

func (p *TBackendGflags) ReadField102(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 102: ", err)
	} else {
		p.UseHmsColumnOrderForHbaseTables = v
	}
	return nil
}

func (p *TBackendGflags) ReadField103(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 103: ", err)
	} else {
		p.IgnoredDirPrefixList = v
	}
	return nil
}

func (p *TBackendGflags) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TBackendGflags"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField17(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField18(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField21(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField22(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField23(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField24(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField26(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField27(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField28(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField29(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField30(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField32(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField33(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField34(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField35(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField36(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField37(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField38(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField39(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField40(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField41(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField42(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField43(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField44(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField45(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField46(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField47(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField49(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField50(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField51(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField52(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField53(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField54(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField55(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField56(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField57(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField58(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField59(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField60(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField61(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField63(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField64(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField65(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField66(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField67(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField68(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField69(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField70(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField71(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField72(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField73(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField74(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField75(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField76(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField77(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField78(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField79(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField80(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField81(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField82(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField83(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField84(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField85(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField86(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField87(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField88(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField89(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField90(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField91(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField92(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField93(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField94(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField95(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField96(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField97(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField98(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField99(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField100(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField101(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField102(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField103(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBackendGflags) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "load_auth_to_local_rules", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:load_auth_to_local_rules: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.LoadAuthToLocalRules)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.load_auth_to_local_rules (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:load_auth_to_local_rules: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "non_impala_java_vlog", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:non_impala_java_vlog: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NonImpalaJavaVlog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.non_impala_java_vlog (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:non_impala_java_vlog: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "impala_log_lvl", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:impala_log_lvl: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ImpalaLogLvl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.impala_log_lvl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:impala_log_lvl: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "inc_stats_size_limit_bytes", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inc_stats_size_limit_bytes: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.IncStatsSizeLimitBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inc_stats_size_limit_bytes (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inc_stats_size_limit_bytes: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lineage_event_log_dir", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lineage_event_log_dir: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.LineageEventLogDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lineage_event_log_dir (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lineage_event_log_dir: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "load_catalog_in_background", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:load_catalog_in_background: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.LoadCatalogInBackground)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.load_catalog_in_background (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:load_catalog_in_background: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_metadata_loading_threads", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:num_metadata_loading_threads: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumMetadataLoadingThreads)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_metadata_loading_threads (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:num_metadata_loading_threads: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "principal", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:principal: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Principal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:principal: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "server_name", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:server_name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ServerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server_name (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:server_name: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kudu_master_hosts", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:kudu_master_hosts: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.KuduMasterHosts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kudu_master_hosts (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:kudu_master_hosts: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "local_library_path", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:local_library_path: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.LocalLibraryPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local_library_path (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:local_library_path: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "read_size", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:read_size: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReadSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.read_size (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:read_size: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kudu_operation_timeout_ms", thrift.I32, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:kudu_operation_timeout_ms: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.KuduOperationTimeoutMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kudu_operation_timeout_ms (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:kudu_operation_timeout_ms: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "initial_hms_cnxn_timeout_s", thrift.I32, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:initial_hms_cnxn_timeout_s: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.InitialHmsCnxnTimeoutS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.initial_hms_cnxn_timeout_s (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:initial_hms_cnxn_timeout_s: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_stats_extrapolation", thrift.BOOL, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:enable_stats_extrapolation: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableStatsExtrapolation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_stats_extrapolation (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:enable_stats_extrapolation: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "max_hdfs_partitions_parallel_load", thrift.I32, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:max_hdfs_partitions_parallel_load: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MaxHdfsPartitionsParallelLoad)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_hdfs_partitions_parallel_load (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:max_hdfs_partitions_parallel_load: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "max_nonhdfs_partitions_parallel_load", thrift.I32, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:max_nonhdfs_partitions_parallel_load: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MaxNonhdfsPartitionsParallelLoad)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_nonhdfs_partitions_parallel_load (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:max_nonhdfs_partitions_parallel_load: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reserved_words_version", thrift.I32, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:reserved_words_version: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReservedWordsVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reserved_words_version (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:reserved_words_version: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "max_filter_error_rate", thrift.DOUBLE, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:max_filter_error_rate: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.MaxFilterErrorRate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_filter_error_rate (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:max_filter_error_rate: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "min_buffer_size", thrift.I64, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:min_buffer_size: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.MinBufferSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min_buffer_size (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:min_buffer_size: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authorized_proxy_group_config", thrift.STRING, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:authorized_proxy_group_config: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthorizedProxyGroupConfig)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorized_proxy_group_config (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:authorized_proxy_group_config: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "use_local_catalog", thrift.BOOL, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:use_local_catalog: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.UseLocalCatalog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_local_catalog (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:use_local_catalog: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "disable_catalog_data_ops_debug_only", thrift.BOOL, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:disable_catalog_data_ops_debug_only: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.DisableCatalogDataOpsDebugOnly)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.disable_catalog_data_ops_debug_only (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:disable_catalog_data_ops_debug_only: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "local_catalog_cache_mb", thrift.I32, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:local_catalog_cache_mb: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.LocalCatalogCacheMb)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local_catalog_cache_mb (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:local_catalog_cache_mb: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "local_catalog_cache_expiration_s", thrift.I32, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:local_catalog_cache_expiration_s: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.LocalCatalogCacheExpirationS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local_catalog_cache_expiration_s (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:local_catalog_cache_expiration_s: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "catalog_topic_mode", thrift.STRING, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:catalog_topic_mode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.CatalogTopicMode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.catalog_topic_mode (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:catalog_topic_mode: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invalidate_tables_timeout_s", thrift.I32, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:invalidate_tables_timeout_s: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.InvalidateTablesTimeoutS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invalidate_tables_timeout_s (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:invalidate_tables_timeout_s: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invalidate_tables_on_memory_pressure", thrift.BOOL, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:invalidate_tables_on_memory_pressure: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.InvalidateTablesOnMemoryPressure)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invalidate_tables_on_memory_pressure (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:invalidate_tables_on_memory_pressure: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invalidate_tables_gc_old_gen_full_threshold", thrift.DOUBLE, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:invalidate_tables_gc_old_gen_full_threshold: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.InvalidateTablesGcOldGenFullThreshold)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invalidate_tables_gc_old_gen_full_threshold (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:invalidate_tables_gc_old_gen_full_threshold: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invalidate_tables_fraction_on_memory_pressure", thrift.DOUBLE, 36); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:invalidate_tables_fraction_on_memory_pressure: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.InvalidateTablesFractionOnMemoryPressure)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invalidate_tables_fraction_on_memory_pressure (36) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 36:invalidate_tables_fraction_on_memory_pressure: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "local_catalog_max_fetch_retries", thrift.I32, 37); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:local_catalog_max_fetch_retries: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.LocalCatalogMaxFetchRetries)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local_catalog_max_fetch_retries (37) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 37:local_catalog_max_fetch_retries: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kudu_scanner_thread_estimated_bytes_per_column", thrift.I64, 38); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:kudu_scanner_thread_estimated_bytes_per_column: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.KuduScannerThreadEstimatedBytesPerColumn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kudu_scanner_thread_estimated_bytes_per_column (38) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 38:kudu_scanner_thread_estimated_bytes_per_column: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kudu_scanner_thread_max_estimated_bytes", thrift.I64, 39); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:kudu_scanner_thread_max_estimated_bytes: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.KuduScannerThreadMaxEstimatedBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kudu_scanner_thread_max_estimated_bytes (39) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 39:kudu_scanner_thread_max_estimated_bytes: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "catalog_max_parallel_partial_fetch_rpc", thrift.I32, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:catalog_max_parallel_partial_fetch_rpc: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.CatalogMaxParallelPartialFetchRPC)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.catalog_max_parallel_partial_fetch_rpc (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:catalog_max_parallel_partial_fetch_rpc: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "catalog_partial_fetch_rpc_queue_timeout_s", thrift.I64, 41); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:catalog_partial_fetch_rpc_queue_timeout_s: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.CatalogPartialFetchRPCQueueTimeoutS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.catalog_partial_fetch_rpc_queue_timeout_s (41) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 41:catalog_partial_fetch_rpc_queue_timeout_s: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "exchg_node_buffer_size_bytes", thrift.I64, 42); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:exchg_node_buffer_size_bytes: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ExchgNodeBufferSizeBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exchg_node_buffer_size_bytes (42) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 42:exchg_node_buffer_size_bytes: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kudu_mutation_buffer_size", thrift.I32, 43); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:kudu_mutation_buffer_size: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.KuduMutationBufferSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kudu_mutation_buffer_size (43) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 43:kudu_mutation_buffer_size: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kudu_error_buffer_size", thrift.I32, 44); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:kudu_error_buffer_size: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.KuduErrorBufferSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kudu_error_buffer_size (44) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 44:kudu_error_buffer_size: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hms_event_polling_interval_s", thrift.I32, 45); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:hms_event_polling_interval_s: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HmsEventPollingIntervalS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hms_event_polling_interval_s (45) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 45:hms_event_polling_interval_s: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "impala_build_version", thrift.STRING, 46); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:impala_build_version: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ImpalaBuildVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.impala_build_version (46) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 46:impala_build_version: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authorization_factory_class", thrift.STRING, 47); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:authorization_factory_class: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthorizationFactoryClass)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorization_factory_class (47) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 47:authorization_factory_class: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField49(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ranger_service_type", thrift.STRING, 49); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 49:ranger_service_type: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RangerServiceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ranger_service_type (49) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 49:ranger_service_type: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ranger_app_id", thrift.STRING, 50); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:ranger_app_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RangerAppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ranger_app_id (50) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 50:ranger_app_id: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authorization_provider", thrift.STRING, 51); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:authorization_provider: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthorizationProvider)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorization_provider (51) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 51:authorization_provider: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField52(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "recursively_list_partitions", thrift.BOOL, 52); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:recursively_list_partitions: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.RecursivelyListPartitions)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recursively_list_partitions (52) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 52:recursively_list_partitions: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField53(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "query_event_hook_classes", thrift.STRING, 53); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:query_event_hook_classes: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.QueryEventHookClasses)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_event_hook_classes (53) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 53:query_event_hook_classes: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField54(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "query_event_hook_nthreads", thrift.I32, 54); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:query_event_hook_nthreads: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.QueryEventHookNthreads)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_event_hook_nthreads (54) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 54:query_event_hook_nthreads: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField55(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_executor", thrift.BOOL, 55); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:is_executor: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsExecutor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_executor (55) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 55:is_executor: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField56(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_coordinator", thrift.BOOL, 56); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 56:is_coordinator: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsCoordinator)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_coordinator (56) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 56:is_coordinator: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField57(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "use_dedicated_coordinator_estimates", thrift.BOOL, 57); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 57:use_dedicated_coordinator_estimates: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.UseDedicatedCoordinatorEstimates)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_dedicated_coordinator_estimates (57) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 57:use_dedicated_coordinator_estimates: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField58(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "blacklisted_dbs", thrift.STRING, 58); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 58:blacklisted_dbs: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.BlacklistedDbs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blacklisted_dbs (58) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 58:blacklisted_dbs: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField59(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "blacklisted_tables", thrift.STRING, 59); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 59:blacklisted_tables: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.BlacklistedTables)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blacklisted_tables (59) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 59:blacklisted_tables: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "unlock_zorder_sort", thrift.BOOL, 60); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:unlock_zorder_sort: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.UnlockZorderSort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unlock_zorder_sort (60) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 60:unlock_zorder_sort: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "min_privilege_set_for_show_stmts", thrift.STRING, 61); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:min_privilege_set_for_show_stmts: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MinPrivilegeSetForShowStmts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min_privilege_set_for_show_stmts (61) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 61:min_privilege_set_for_show_stmts: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField63(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_expected_executors", thrift.I32, 63); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:num_expected_executors: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumExpectedExecutors)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_expected_executors (63) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 63:num_expected_executors: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField64(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_check_authorization_threads", thrift.I32, 64); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 64:num_check_authorization_threads: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumCheckAuthorizationThreads)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_check_authorization_threads (64) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 64:num_check_authorization_threads: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField65(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "use_customized_user_groups_mapper_for_ranger", thrift.BOOL, 65); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:use_customized_user_groups_mapper_for_ranger: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.UseCustomizedUserGroupsMapperForRanger)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_customized_user_groups_mapper_for_ranger (65) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 65:use_customized_user_groups_mapper_for_ranger: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField66(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_column_masking", thrift.BOOL, 66); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:enable_column_masking: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableColumnMasking)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_column_masking (66) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 66:enable_column_masking: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField67(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_insert_events", thrift.BOOL, 67); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:enable_insert_events: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableInsertEvents)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_insert_events (67) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 67:enable_insert_events: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField68(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "compact_catalog_topic", thrift.BOOL, 68); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:compact_catalog_topic: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.CompactCatalogTopic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compact_catalog_topic (68) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 68:compact_catalog_topic: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField69(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_incremental_metadata_updates", thrift.BOOL, 69); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:enable_incremental_metadata_updates: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableIncrementalMetadataUpdates)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_incremental_metadata_updates (69) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 69:enable_incremental_metadata_updates: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField70(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topic_update_tbl_max_wait_time_ms", thrift.I64, 70); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:topic_update_tbl_max_wait_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TopicUpdateTblMaxWaitTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic_update_tbl_max_wait_time_ms (70) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 70:topic_update_tbl_max_wait_time_ms: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField71(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "catalog_max_lock_skipped_topic_updates", thrift.I32, 71); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:catalog_max_lock_skipped_topic_updates: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.CatalogMaxLockSkippedTopicUpdates)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.catalog_max_lock_skipped_topic_updates (71) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 71:catalog_max_lock_skipped_topic_updates: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField72(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_keystore_path", thrift.STRING, 72); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:saml2_keystore_path: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2KeystorePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_keystore_path (72) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 72:saml2_keystore_path: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField73(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_keystore_password", thrift.STRING, 73); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 73:saml2_keystore_password: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2KeystorePassword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_keystore_password (73) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 73:saml2_keystore_password: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField74(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_private_key_password", thrift.STRING, 74); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 74:saml2_private_key_password: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2PrivateKeyPassword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_private_key_password (74) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 74:saml2_private_key_password: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField75(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_idp_metadata", thrift.STRING, 75); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:saml2_idp_metadata: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2IdpMetadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_idp_metadata (75) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 75:saml2_idp_metadata: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField76(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_sp_entity_id", thrift.STRING, 76); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 76:saml2_sp_entity_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2SpEntityID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_sp_entity_id (76) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 76:saml2_sp_entity_id: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField77(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_sp_callback_url", thrift.STRING, 77); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:saml2_sp_callback_url: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2SpCallbackURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_sp_callback_url (77) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 77:saml2_sp_callback_url: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField78(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_want_assertations_signed", thrift.BOOL, 78); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:saml2_want_assertations_signed: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Saml2WantAssertationsSigned)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_want_assertations_signed (78) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 78:saml2_want_assertations_signed: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField79(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_sign_requests", thrift.BOOL, 79); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:saml2_sign_requests: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Saml2SignRequests)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_sign_requests (79) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 79:saml2_sign_requests: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField80(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_callback_token_ttl", thrift.I32, 80); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:saml2_callback_token_ttl: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Saml2CallbackTokenTTL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_callback_token_ttl (80) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 80:saml2_callback_token_ttl: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField81(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_group_attribute_name", thrift.STRING, 81); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:saml2_group_attribute_name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2GroupAttributeName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_group_attribute_name (81) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 81:saml2_group_attribute_name: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField82(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_group_filter", thrift.STRING, 82); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:saml2_group_filter: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Saml2GroupFilter)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_group_filter (82) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 82:saml2_group_filter: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField83(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "saml2_ee_test_mode", thrift.BOOL, 83); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:saml2_ee_test_mode: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Saml2EeTestMode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saml2_ee_test_mode (83) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 83:saml2_ee_test_mode: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField84(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "scratch_dirs", thrift.STRING, 84); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 84:scratch_dirs: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ScratchDirs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scratch_dirs (84) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 84:scratch_dirs: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField85(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_row_filtering", thrift.BOOL, 85); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:enable_row_filtering: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableRowFiltering)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_row_filtering (85) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 85:enable_row_filtering: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField86(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "max_wait_time_for_sync_ddl_s", thrift.I32, 86); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:max_wait_time_for_sync_ddl_s: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MaxWaitTimeForSyncDdlS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_wait_time_for_sync_ddl_s (86) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 86:max_wait_time_for_sync_ddl_s: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField87(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "allow_ordinals_in_having", thrift.BOOL, 87); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:allow_ordinals_in_having: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.AllowOrdinalsInHaving)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.allow_ordinals_in_having (87) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 87:allow_ordinals_in_having: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField88(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "start_hms_server", thrift.BOOL, 88); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:start_hms_server: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.StartHmsServer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_hms_server (88) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 88:start_hms_server: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField89(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hms_port", thrift.I32, 89); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:hms_port: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HmsPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hms_port (89) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 89:hms_port: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField90(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fallback_to_hms_on_errors", thrift.BOOL, 90); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:fallback_to_hms_on_errors: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.FallbackToHmsOnErrors)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fallback_to_hms_on_errors (90) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 90:fallback_to_hms_on_errors: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_catalogd_hms_cache", thrift.BOOL, 91); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:enable_catalogd_hms_cache: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableCatalogdHmsCache)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_catalogd_hms_cache (91) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 91:enable_catalogd_hms_cache: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField92(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kudu_sasl_protocol_name", thrift.STRING, 92); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:kudu_sasl_protocol_name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.KuduSaslProtocolName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kudu_sasl_protocol_name (92) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 92:kudu_sasl_protocol_name: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField93(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "warn_catalog_response_size_mb", thrift.I32, 93); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 93:warn_catalog_response_size_mb: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.WarnCatalogResponseSizeMb)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.warn_catalog_response_size_mb (93) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 93:warn_catalog_response_size_mb: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField94(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "warn_catalog_response_duration_s", thrift.I32, 94); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 94:warn_catalog_response_duration_s: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.WarnCatalogResponseDurationS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.warn_catalog_response_duration_s (94) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 94:warn_catalog_response_duration_s: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField95(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invalidate_hms_cache_on_ddls", thrift.BOOL, 95); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 95:invalidate_hms_cache_on_ddls: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.InvalidateHmsCacheOnDdls)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invalidate_hms_cache_on_ddls (95) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 95:invalidate_hms_cache_on_ddls: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField96(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "startup_filesystem_check_directories", thrift.STRING, 96); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 96:startup_filesystem_check_directories: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.StartupFilesystemCheckDirectories)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startup_filesystem_check_directories (96) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 96:startup_filesystem_check_directories: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField97(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hms_event_incremental_refresh_transactional_table", thrift.BOOL, 97); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 97:hms_event_incremental_refresh_transactional_table: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.HmsEventIncrementalRefreshTransactionalTable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hms_event_incremental_refresh_transactional_table (97) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 97:hms_event_incremental_refresh_transactional_table: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField98(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_shell_based_groups_mapping_support", thrift.BOOL, 98); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 98:enable_shell_based_groups_mapping_support: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableShellBasedGroupsMappingSupport)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_shell_based_groups_mapping_support (98) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 98:enable_shell_based_groups_mapping_support: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField99(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "auto_check_compaction", thrift.BOOL, 99); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 99:auto_check_compaction: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.AutoCheckCompaction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.auto_check_compaction (99) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 99:auto_check_compaction: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField100(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable_sync_to_latest_event_on_ddls", thrift.BOOL, 100); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:enable_sync_to_latest_event_on_ddls: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.EnableSyncToLatestEventOnDdls)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable_sync_to_latest_event_on_ddls (100) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 100:enable_sync_to_latest_event_on_ddls: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField101(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "pull_table_types_and_comments", thrift.BOOL, 101); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 101:pull_table_types_and_comments: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.PullTableTypesAndComments)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pull_table_types_and_comments (101) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 101:pull_table_types_and_comments: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField102(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "use_hms_column_order_for_hbase_tables", thrift.BOOL, 102); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 102:use_hms_column_order_for_hbase_tables: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.UseHmsColumnOrderForHbaseTables)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_hms_column_order_for_hbase_tables (102) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 102:use_hms_column_order_for_hbase_tables: ", p), err)
	}
	return err
}

func (p *TBackendGflags) writeField103(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ignored_dir_prefix_list", thrift.STRING, 103); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 103:ignored_dir_prefix_list: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.IgnoredDirPrefixList)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ignored_dir_prefix_list (103) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 103:ignored_dir_prefix_list: ", p), err)
	}
	return err
}

func (p *TBackendGflags) Equals(other *TBackendGflags) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.LoadAuthToLocalRules != other.LoadAuthToLocalRules {
		return false
	}
	if p.NonImpalaJavaVlog != other.NonImpalaJavaVlog {
		return false
	}
	if p.ImpalaLogLvl != other.ImpalaLogLvl {
		return false
	}
	if p.IncStatsSizeLimitBytes != other.IncStatsSizeLimitBytes {
		return false
	}
	if p.LineageEventLogDir != other.LineageEventLogDir {
		return false
	}
	if p.LoadCatalogInBackground != other.LoadCatalogInBackground {
		return false
	}
	if p.NumMetadataLoadingThreads != other.NumMetadataLoadingThreads {
		return false
	}
	if p.Principal != other.Principal {
		return false
	}
	if p.ServerName != other.ServerName {
		return false
	}
	if p.KuduMasterHosts != other.KuduMasterHosts {
		return false
	}
	if p.LocalLibraryPath != other.LocalLibraryPath {
		return false
	}
	if p.ReadSize != other.ReadSize {
		return false
	}
	if p.KuduOperationTimeoutMs != other.KuduOperationTimeoutMs {
		return false
	}
	if p.InitialHmsCnxnTimeoutS != other.InitialHmsCnxnTimeoutS {
		return false
	}
	if p.EnableStatsExtrapolation != other.EnableStatsExtrapolation {
		return false
	}
	if p.MaxHdfsPartitionsParallelLoad != other.MaxHdfsPartitionsParallelLoad {
		return false
	}
	if p.MaxNonhdfsPartitionsParallelLoad != other.MaxNonhdfsPartitionsParallelLoad {
		return false
	}
	if p.ReservedWordsVersion != other.ReservedWordsVersion {
		return false
	}
	if p.MaxFilterErrorRate != other.MaxFilterErrorRate {
		return false
	}
	if p.MinBufferSize != other.MinBufferSize {
		return false
	}
	if p.AuthorizedProxyGroupConfig != other.AuthorizedProxyGroupConfig {
		return false
	}
	if p.UseLocalCatalog != other.UseLocalCatalog {
		return false
	}
	if p.DisableCatalogDataOpsDebugOnly != other.DisableCatalogDataOpsDebugOnly {
		return false
	}
	if p.LocalCatalogCacheMb != other.LocalCatalogCacheMb {
		return false
	}
	if p.LocalCatalogCacheExpirationS != other.LocalCatalogCacheExpirationS {
		return false
	}
	if p.CatalogTopicMode != other.CatalogTopicMode {
		return false
	}
	if p.InvalidateTablesTimeoutS != other.InvalidateTablesTimeoutS {
		return false
	}
	if p.InvalidateTablesOnMemoryPressure != other.InvalidateTablesOnMemoryPressure {
		return false
	}
	if p.InvalidateTablesGcOldGenFullThreshold != other.InvalidateTablesGcOldGenFullThreshold {
		return false
	}
	if p.InvalidateTablesFractionOnMemoryPressure != other.InvalidateTablesFractionOnMemoryPressure {
		return false
	}
	if p.LocalCatalogMaxFetchRetries != other.LocalCatalogMaxFetchRetries {
		return false
	}
	if p.KuduScannerThreadEstimatedBytesPerColumn != other.KuduScannerThreadEstimatedBytesPerColumn {
		return false
	}
	if p.KuduScannerThreadMaxEstimatedBytes != other.KuduScannerThreadMaxEstimatedBytes {
		return false
	}
	if p.CatalogMaxParallelPartialFetchRPC != other.CatalogMaxParallelPartialFetchRPC {
		return false
	}
	if p.CatalogPartialFetchRPCQueueTimeoutS != other.CatalogPartialFetchRPCQueueTimeoutS {
		return false
	}
	if p.ExchgNodeBufferSizeBytes != other.ExchgNodeBufferSizeBytes {
		return false
	}
	if p.KuduMutationBufferSize != other.KuduMutationBufferSize {
		return false
	}
	if p.KuduErrorBufferSize != other.KuduErrorBufferSize {
		return false
	}
	if p.HmsEventPollingIntervalS != other.HmsEventPollingIntervalS {
		return false
	}
	if p.ImpalaBuildVersion != other.ImpalaBuildVersion {
		return false
	}
	if p.AuthorizationFactoryClass != other.AuthorizationFactoryClass {
		return false
	}
	if p.RangerServiceType != other.RangerServiceType {
		return false
	}
	if p.RangerAppID != other.RangerAppID {
		return false
	}
	if p.AuthorizationProvider != other.AuthorizationProvider {
		return false
	}
	if p.RecursivelyListPartitions != other.RecursivelyListPartitions {
		return false
	}
	if p.QueryEventHookClasses != other.QueryEventHookClasses {
		return false
	}
	if p.QueryEventHookNthreads != other.QueryEventHookNthreads {
		return false
	}
	if p.IsExecutor != other.IsExecutor {
		return false
	}
	if p.IsCoordinator != other.IsCoordinator {
		return false
	}
	if p.UseDedicatedCoordinatorEstimates != other.UseDedicatedCoordinatorEstimates {
		return false
	}
	if p.BlacklistedDbs != other.BlacklistedDbs {
		return false
	}
	if p.BlacklistedTables != other.BlacklistedTables {
		return false
	}
	if p.UnlockZorderSort != other.UnlockZorderSort {
		return false
	}
	if p.MinPrivilegeSetForShowStmts != other.MinPrivilegeSetForShowStmts {
		return false
	}
	if p.NumExpectedExecutors != other.NumExpectedExecutors {
		return false
	}
	if p.NumCheckAuthorizationThreads != other.NumCheckAuthorizationThreads {
		return false
	}
	if p.UseCustomizedUserGroupsMapperForRanger != other.UseCustomizedUserGroupsMapperForRanger {
		return false
	}
	if p.EnableColumnMasking != other.EnableColumnMasking {
		return false
	}
	if p.EnableInsertEvents != other.EnableInsertEvents {
		return false
	}
	if p.CompactCatalogTopic != other.CompactCatalogTopic {
		return false
	}
	if p.EnableIncrementalMetadataUpdates != other.EnableIncrementalMetadataUpdates {
		return false
	}
	if p.TopicUpdateTblMaxWaitTimeMs != other.TopicUpdateTblMaxWaitTimeMs {
		return false
	}
	if p.CatalogMaxLockSkippedTopicUpdates != other.CatalogMaxLockSkippedTopicUpdates {
		return false
	}
	if p.Saml2KeystorePath != other.Saml2KeystorePath {
		return false
	}
	if p.Saml2KeystorePassword != other.Saml2KeystorePassword {
		return false
	}
	if p.Saml2PrivateKeyPassword != other.Saml2PrivateKeyPassword {
		return false
	}
	if p.Saml2IdpMetadata != other.Saml2IdpMetadata {
		return false
	}
	if p.Saml2SpEntityID != other.Saml2SpEntityID {
		return false
	}
	if p.Saml2SpCallbackURL != other.Saml2SpCallbackURL {
		return false
	}
	if p.Saml2WantAssertationsSigned != other.Saml2WantAssertationsSigned {
		return false
	}
	if p.Saml2SignRequests != other.Saml2SignRequests {
		return false
	}
	if p.Saml2CallbackTokenTTL != other.Saml2CallbackTokenTTL {
		return false
	}
	if p.Saml2GroupAttributeName != other.Saml2GroupAttributeName {
		return false
	}
	if p.Saml2GroupFilter != other.Saml2GroupFilter {
		return false
	}
	if p.Saml2EeTestMode != other.Saml2EeTestMode {
		return false
	}
	if p.ScratchDirs != other.ScratchDirs {
		return false
	}
	if p.EnableRowFiltering != other.EnableRowFiltering {
		return false
	}
	if p.MaxWaitTimeForSyncDdlS != other.MaxWaitTimeForSyncDdlS {
		return false
	}
	if p.AllowOrdinalsInHaving != other.AllowOrdinalsInHaving {
		return false
	}
	if p.StartHmsServer != other.StartHmsServer {
		return false
	}
	if p.HmsPort != other.HmsPort {
		return false
	}
	if p.FallbackToHmsOnErrors != other.FallbackToHmsOnErrors {
		return false
	}
	if p.EnableCatalogdHmsCache != other.EnableCatalogdHmsCache {
		return false
	}
	if p.KuduSaslProtocolName != other.KuduSaslProtocolName {
		return false
	}
	if p.WarnCatalogResponseSizeMb != other.WarnCatalogResponseSizeMb {
		return false
	}
	if p.WarnCatalogResponseDurationS != other.WarnCatalogResponseDurationS {
		return false
	}
	if p.InvalidateHmsCacheOnDdls != other.InvalidateHmsCacheOnDdls {
		return false
	}
	if p.StartupFilesystemCheckDirectories != other.StartupFilesystemCheckDirectories {
		return false
	}
	if p.HmsEventIncrementalRefreshTransactionalTable != other.HmsEventIncrementalRefreshTransactionalTable {
		return false
	}
	if p.EnableShellBasedGroupsMappingSupport != other.EnableShellBasedGroupsMappingSupport {
		return false
	}
	if p.AutoCheckCompaction != other.AutoCheckCompaction {
		return false
	}
	if p.EnableSyncToLatestEventOnDdls != other.EnableSyncToLatestEventOnDdls {
		return false
	}
	if p.PullTableTypesAndComments != other.PullTableTypesAndComments {
		return false
	}
	if p.UseHmsColumnOrderForHbaseTables != other.UseHmsColumnOrderForHbaseTables {
		return false
	}
	if p.IgnoredDirPrefixList != other.IgnoredDirPrefixList {
		return false
	}
	return true
}

func (p *TBackendGflags) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBackendGflags(%+v)", *p)
}
