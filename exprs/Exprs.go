// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package exprs

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/believems/impala-thrift/types"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = types.GoUnusedProtection__

type TExprNodeType int64

const (
	TExprNodeType_NULL_LITERAL        TExprNodeType = 0
	TExprNodeType_BOOL_LITERAL        TExprNodeType = 1
	TExprNodeType_INT_LITERAL         TExprNodeType = 2
	TExprNodeType_FLOAT_LITERAL       TExprNodeType = 3
	TExprNodeType_STRING_LITERAL      TExprNodeType = 4
	TExprNodeType_DECIMAL_LITERAL     TExprNodeType = 5
	TExprNodeType_TIMESTAMP_LITERAL   TExprNodeType = 6
	TExprNodeType_CASE_EXPR           TExprNodeType = 7
	TExprNodeType_COMPOUND_PRED       TExprNodeType = 8
	TExprNodeType_IN_PRED             TExprNodeType = 9
	TExprNodeType_IS_NULL_PRED        TExprNodeType = 10
	TExprNodeType_LIKE_PRED           TExprNodeType = 11
	TExprNodeType_SLOT_REF            TExprNodeType = 12
	TExprNodeType_TUPLE_IS_NULL_PRED  TExprNodeType = 13
	TExprNodeType_FUNCTION_CALL       TExprNodeType = 14
	TExprNodeType_AGGREGATE_EXPR      TExprNodeType = 15
	TExprNodeType_IS_NOT_EMPTY_PRED   TExprNodeType = 16
	TExprNodeType_KUDU_PARTITION_EXPR TExprNodeType = 17
	TExprNodeType_VALID_TUPLE_ID_EXPR TExprNodeType = 18
	TExprNodeType_DATE_LITERAL        TExprNodeType = 19
)

func (p TExprNodeType) String() string {
	switch p {
	case TExprNodeType_NULL_LITERAL:
		return "NULL_LITERAL"
	case TExprNodeType_BOOL_LITERAL:
		return "BOOL_LITERAL"
	case TExprNodeType_INT_LITERAL:
		return "INT_LITERAL"
	case TExprNodeType_FLOAT_LITERAL:
		return "FLOAT_LITERAL"
	case TExprNodeType_STRING_LITERAL:
		return "STRING_LITERAL"
	case TExprNodeType_DECIMAL_LITERAL:
		return "DECIMAL_LITERAL"
	case TExprNodeType_TIMESTAMP_LITERAL:
		return "TIMESTAMP_LITERAL"
	case TExprNodeType_CASE_EXPR:
		return "CASE_EXPR"
	case TExprNodeType_COMPOUND_PRED:
		return "COMPOUND_PRED"
	case TExprNodeType_IN_PRED:
		return "IN_PRED"
	case TExprNodeType_IS_NULL_PRED:
		return "IS_NULL_PRED"
	case TExprNodeType_LIKE_PRED:
		return "LIKE_PRED"
	case TExprNodeType_SLOT_REF:
		return "SLOT_REF"
	case TExprNodeType_TUPLE_IS_NULL_PRED:
		return "TUPLE_IS_NULL_PRED"
	case TExprNodeType_FUNCTION_CALL:
		return "FUNCTION_CALL"
	case TExprNodeType_AGGREGATE_EXPR:
		return "AGGREGATE_EXPR"
	case TExprNodeType_IS_NOT_EMPTY_PRED:
		return "IS_NOT_EMPTY_PRED"
	case TExprNodeType_KUDU_PARTITION_EXPR:
		return "KUDU_PARTITION_EXPR"
	case TExprNodeType_VALID_TUPLE_ID_EXPR:
		return "VALID_TUPLE_ID_EXPR"
	case TExprNodeType_DATE_LITERAL:
		return "DATE_LITERAL"
	}
	return "<UNSET>"
}

func TExprNodeTypeFromString(s string) (TExprNodeType, error) {
	switch s {
	case "NULL_LITERAL":
		return TExprNodeType_NULL_LITERAL, nil
	case "BOOL_LITERAL":
		return TExprNodeType_BOOL_LITERAL, nil
	case "INT_LITERAL":
		return TExprNodeType_INT_LITERAL, nil
	case "FLOAT_LITERAL":
		return TExprNodeType_FLOAT_LITERAL, nil
	case "STRING_LITERAL":
		return TExprNodeType_STRING_LITERAL, nil
	case "DECIMAL_LITERAL":
		return TExprNodeType_DECIMAL_LITERAL, nil
	case "TIMESTAMP_LITERAL":
		return TExprNodeType_TIMESTAMP_LITERAL, nil
	case "CASE_EXPR":
		return TExprNodeType_CASE_EXPR, nil
	case "COMPOUND_PRED":
		return TExprNodeType_COMPOUND_PRED, nil
	case "IN_PRED":
		return TExprNodeType_IN_PRED, nil
	case "IS_NULL_PRED":
		return TExprNodeType_IS_NULL_PRED, nil
	case "LIKE_PRED":
		return TExprNodeType_LIKE_PRED, nil
	case "SLOT_REF":
		return TExprNodeType_SLOT_REF, nil
	case "TUPLE_IS_NULL_PRED":
		return TExprNodeType_TUPLE_IS_NULL_PRED, nil
	case "FUNCTION_CALL":
		return TExprNodeType_FUNCTION_CALL, nil
	case "AGGREGATE_EXPR":
		return TExprNodeType_AGGREGATE_EXPR, nil
	case "IS_NOT_EMPTY_PRED":
		return TExprNodeType_IS_NOT_EMPTY_PRED, nil
	case "KUDU_PARTITION_EXPR":
		return TExprNodeType_KUDU_PARTITION_EXPR, nil
	case "VALID_TUPLE_ID_EXPR":
		return TExprNodeType_VALID_TUPLE_ID_EXPR, nil
	case "DATE_LITERAL":
		return TExprNodeType_DATE_LITERAL, nil
	}
	return TExprNodeType(0), fmt.Errorf("not a valid TExprNodeType string")
}

func TExprNodeTypePtr(v TExprNodeType) *TExprNodeType { return &v }

func (p TExprNodeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TExprNodeType) UnmarshalText(text []byte) error {
	q, err := TExprNodeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TExprNodeType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TExprNodeType(v)
	return nil
}

func (p *TExprNodeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TExtractField int64

const (
	TExtractField_INVALID_FIELD TExtractField = 0
	TExtractField_YEAR          TExtractField = 1
	TExtractField_QUARTER       TExtractField = 2
	TExtractField_MONTH         TExtractField = 3
	TExtractField_DAY           TExtractField = 4
	TExtractField_HOUR          TExtractField = 5
	TExtractField_MINUTE        TExtractField = 6
	TExtractField_SECOND        TExtractField = 7
	TExtractField_MILLISECOND   TExtractField = 8
	TExtractField_EPOCH         TExtractField = 9
)

func (p TExtractField) String() string {
	switch p {
	case TExtractField_INVALID_FIELD:
		return "INVALID_FIELD"
	case TExtractField_YEAR:
		return "YEAR"
	case TExtractField_QUARTER:
		return "QUARTER"
	case TExtractField_MONTH:
		return "MONTH"
	case TExtractField_DAY:
		return "DAY"
	case TExtractField_HOUR:
		return "HOUR"
	case TExtractField_MINUTE:
		return "MINUTE"
	case TExtractField_SECOND:
		return "SECOND"
	case TExtractField_MILLISECOND:
		return "MILLISECOND"
	case TExtractField_EPOCH:
		return "EPOCH"
	}
	return "<UNSET>"
}

func TExtractFieldFromString(s string) (TExtractField, error) {
	switch s {
	case "INVALID_FIELD":
		return TExtractField_INVALID_FIELD, nil
	case "YEAR":
		return TExtractField_YEAR, nil
	case "QUARTER":
		return TExtractField_QUARTER, nil
	case "MONTH":
		return TExtractField_MONTH, nil
	case "DAY":
		return TExtractField_DAY, nil
	case "HOUR":
		return TExtractField_HOUR, nil
	case "MINUTE":
		return TExtractField_MINUTE, nil
	case "SECOND":
		return TExtractField_SECOND, nil
	case "MILLISECOND":
		return TExtractField_MILLISECOND, nil
	case "EPOCH":
		return TExtractField_EPOCH, nil
	}
	return TExtractField(0), fmt.Errorf("not a valid TExtractField string")
}

func TExtractFieldPtr(v TExtractField) *TExtractField { return &v }

func (p TExtractField) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TExtractField) UnmarshalText(text []byte) error {
	q, err := TExtractFieldFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TExtractField) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TExtractField(v)
	return nil
}

func (p *TExtractField) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - Value
type TBoolLiteral struct {
	Value bool `thrift:"value,1,required" db:"value" json:"value"`
}

func NewTBoolLiteral() *TBoolLiteral {
	return &TBoolLiteral{}
}

func (p *TBoolLiteral) GetValue() bool {
	return p.Value
}
func (p *TBoolLiteral) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TBoolLiteral) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TBoolLiteral) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TBoolLiteral"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBoolLiteral) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TBoolLiteral) Equals(other *TBoolLiteral) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Value != other.Value {
		return false
	}
	return true
}

func (p *TBoolLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBoolLiteral(%+v)", *p)
}

// Attributes:
//   - HasCaseExpr
//   - HasElseExpr
type TCaseExpr struct {
	HasCaseExpr bool `thrift:"has_case_expr,1,required" db:"has_case_expr" json:"has_case_expr"`
	HasElseExpr bool `thrift:"has_else_expr,2,required" db:"has_else_expr" json:"has_else_expr"`
}

func NewTCaseExpr() *TCaseExpr {
	return &TCaseExpr{}
}

func (p *TCaseExpr) GetHasCaseExpr() bool {
	return p.HasCaseExpr
}

func (p *TCaseExpr) GetHasElseExpr() bool {
	return p.HasElseExpr
}
func (p *TCaseExpr) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetHasCaseExpr bool = false
	var issetHasElseExpr bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetHasCaseExpr = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetHasElseExpr = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetHasCaseExpr {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasCaseExpr is not set"))
	}
	if !issetHasElseExpr {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasElseExpr is not set"))
	}
	return nil
}

func (p *TCaseExpr) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HasCaseExpr = v
	}
	return nil
}

func (p *TCaseExpr) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HasElseExpr = v
	}
	return nil
}

func (p *TCaseExpr) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TCaseExpr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCaseExpr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "has_case_expr", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:has_case_expr: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.HasCaseExpr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.has_case_expr (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:has_case_expr: ", p), err)
	}
	return err
}

func (p *TCaseExpr) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "has_else_expr", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:has_else_expr: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.HasElseExpr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.has_else_expr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:has_else_expr: ", p), err)
	}
	return err
}

func (p *TCaseExpr) Equals(other *TCaseExpr) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.HasCaseExpr != other.HasCaseExpr {
		return false
	}
	if p.HasElseExpr != other.HasElseExpr {
		return false
	}
	return true
}

func (p *TCaseExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCaseExpr(%+v)", *p)
}

// Attributes:
//   - DaysSinceEpoch
//   - DateString
type TDateLiteral struct {
	DaysSinceEpoch int32  `thrift:"days_since_epoch,1,required" db:"days_since_epoch" json:"days_since_epoch"`
	DateString     string `thrift:"date_string,2,required" db:"date_string" json:"date_string"`
}

func NewTDateLiteral() *TDateLiteral {
	return &TDateLiteral{}
}

func (p *TDateLiteral) GetDaysSinceEpoch() int32 {
	return p.DaysSinceEpoch
}

func (p *TDateLiteral) GetDateString() string {
	return p.DateString
}
func (p *TDateLiteral) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetDaysSinceEpoch bool = false
	var issetDateString bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetDaysSinceEpoch = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetDateString = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetDaysSinceEpoch {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DaysSinceEpoch is not set"))
	}
	if !issetDateString {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DateString is not set"))
	}
	return nil
}

func (p *TDateLiteral) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DaysSinceEpoch = v
	}
	return nil
}

func (p *TDateLiteral) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DateString = v
	}
	return nil
}

func (p *TDateLiteral) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TDateLiteral"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDateLiteral) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "days_since_epoch", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:days_since_epoch: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.DaysSinceEpoch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.days_since_epoch (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:days_since_epoch: ", p), err)
	}
	return err
}

func (p *TDateLiteral) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "date_string", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:date_string: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.DateString)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.date_string (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:date_string: ", p), err)
	}
	return err
}

func (p *TDateLiteral) Equals(other *TDateLiteral) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.DaysSinceEpoch != other.DaysSinceEpoch {
		return false
	}
	if p.DateString != other.DateString {
		return false
	}
	return true
}

func (p *TDateLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDateLiteral(%+v)", *p)
}

// Attributes:
//   - Value
type TDecimalLiteral struct {
	Value []byte `thrift:"value,1,required" db:"value" json:"value"`
}

func NewTDecimalLiteral() *TDecimalLiteral {
	return &TDecimalLiteral{}
}

func (p *TDecimalLiteral) GetValue() []byte {
	return p.Value
}
func (p *TDecimalLiteral) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TDecimalLiteral) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TDecimalLiteral) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TDecimalLiteral"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDecimalLiteral) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TDecimalLiteral) Equals(other *TDecimalLiteral) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.Value, other.Value) != 0 {
		return false
	}
	return true
}

func (p *TDecimalLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDecimalLiteral(%+v)", *p)
}

// Attributes:
//   - Value
type TFloatLiteral struct {
	Value float64 `thrift:"value,1,required" db:"value" json:"value"`
}

func NewTFloatLiteral() *TFloatLiteral {
	return &TFloatLiteral{}
}

func (p *TFloatLiteral) GetValue() float64 {
	return p.Value
}
func (p *TFloatLiteral) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TFloatLiteral) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TFloatLiteral) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TFloatLiteral"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TFloatLiteral) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TFloatLiteral) Equals(other *TFloatLiteral) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Value != other.Value {
		return false
	}
	return true
}

func (p *TFloatLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFloatLiteral(%+v)", *p)
}

// Attributes:
//   - Value
type TIntLiteral struct {
	Value int64 `thrift:"value,1,required" db:"value" json:"value"`
}

func NewTIntLiteral() *TIntLiteral {
	return &TIntLiteral{}
}

func (p *TIntLiteral) GetValue() int64 {
	return p.Value
}
func (p *TIntLiteral) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TIntLiteral) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TIntLiteral) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TIntLiteral"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIntLiteral) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TIntLiteral) Equals(other *TIntLiteral) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Value != other.Value {
		return false
	}
	return true
}

func (p *TIntLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIntLiteral(%+v)", *p)
}

// Attributes:
//   - Value
type TTimestampLiteral struct {
	Value []byte `thrift:"value,1,required" db:"value" json:"value"`
}

func NewTTimestampLiteral() *TTimestampLiteral {
	return &TTimestampLiteral{}
}

func (p *TTimestampLiteral) GetValue() []byte {
	return p.Value
}
func (p *TTimestampLiteral) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TTimestampLiteral) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TTimestampLiteral) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TTimestampLiteral"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTimestampLiteral) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TTimestampLiteral) Equals(other *TTimestampLiteral) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.Value, other.Value) != 0 {
		return false
	}
	return true
}

func (p *TTimestampLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTimestampLiteral(%+v)", *p)
}

// Attributes:
//   - IsNotIn
type TInPredicate struct {
	IsNotIn bool `thrift:"is_not_in,1,required" db:"is_not_in" json:"is_not_in"`
}

func NewTInPredicate() *TInPredicate {
	return &TInPredicate{}
}

func (p *TInPredicate) GetIsNotIn() bool {
	return p.IsNotIn
}
func (p *TInPredicate) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIsNotIn bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetIsNotIn = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIsNotIn {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsNotIn is not set"))
	}
	return nil
}

func (p *TInPredicate) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IsNotIn = v
	}
	return nil
}

func (p *TInPredicate) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TInPredicate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TInPredicate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_not_in", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_not_in: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsNotIn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_not_in (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_not_in: ", p), err)
	}
	return err
}

func (p *TInPredicate) Equals(other *TInPredicate) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.IsNotIn != other.IsNotIn {
		return false
	}
	return true
}

func (p *TInPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInPredicate(%+v)", *p)
}

// Attributes:
//   - IsNotNull
type TIsNullPredicate struct {
	IsNotNull bool `thrift:"is_not_null,1,required" db:"is_not_null" json:"is_not_null"`
}

func NewTIsNullPredicate() *TIsNullPredicate {
	return &TIsNullPredicate{}
}

func (p *TIsNullPredicate) GetIsNotNull() bool {
	return p.IsNotNull
}
func (p *TIsNullPredicate) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIsNotNull bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetIsNotNull = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIsNotNull {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsNotNull is not set"))
	}
	return nil
}

func (p *TIsNullPredicate) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IsNotNull = v
	}
	return nil
}

func (p *TIsNullPredicate) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TIsNullPredicate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIsNullPredicate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_not_null", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_not_null: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsNotNull)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_not_null (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_not_null: ", p), err)
	}
	return err
}

func (p *TIsNullPredicate) Equals(other *TIsNullPredicate) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.IsNotNull != other.IsNotNull {
		return false
	}
	return true
}

func (p *TIsNullPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIsNullPredicate(%+v)", *p)
}

// Attributes:
//   - Value
//   - IsNull
type TLiteralPredicate struct {
	Value  bool `thrift:"value,1,required" db:"value" json:"value"`
	IsNull bool `thrift:"is_null,2,required" db:"is_null" json:"is_null"`
}

func NewTLiteralPredicate() *TLiteralPredicate {
	return &TLiteralPredicate{}
}

func (p *TLiteralPredicate) GetValue() bool {
	return p.Value
}

func (p *TLiteralPredicate) GetIsNull() bool {
	return p.IsNull
}
func (p *TLiteralPredicate) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValue bool = false
	var issetIsNull bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetIsNull = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	if !issetIsNull {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsNull is not set"))
	}
	return nil
}

func (p *TLiteralPredicate) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TLiteralPredicate) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsNull = v
	}
	return nil
}

func (p *TLiteralPredicate) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TLiteralPredicate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TLiteralPredicate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TLiteralPredicate) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_null", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsNull)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err)
	}
	return err
}

func (p *TLiteralPredicate) Equals(other *TLiteralPredicate) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Value != other.Value {
		return false
	}
	if p.IsNull != other.IsNull {
		return false
	}
	return true
}

func (p *TLiteralPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLiteralPredicate(%+v)", *p)
}

// Attributes:
//   - TupleIds
type TTupleIsNullPredicate struct {
	TupleIds []types.TTupleId `thrift:"tuple_ids,1,required" db:"tuple_ids" json:"tuple_ids"`
}

func NewTTupleIsNullPredicate() *TTupleIsNullPredicate {
	return &TTupleIsNullPredicate{}
}

func (p *TTupleIsNullPredicate) GetTupleIds() []types.TTupleId {
	return p.TupleIds
}
func (p *TTupleIsNullPredicate) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTupleIds bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTupleIds = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTupleIds {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TupleIds is not set"))
	}
	return nil
}

func (p *TTupleIsNullPredicate) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]types.TTupleId, 0, size)
	p.TupleIds = tSlice
	for i := 0; i < size; i++ {
		var _elem0 types.TTupleId
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := types.TTupleId(v)
			_elem0 = temp
		}
		p.TupleIds = append(p.TupleIds, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TTupleIsNullPredicate) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TTupleIsNullPredicate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTupleIsNullPredicate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tuple_ids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tuple_ids: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TupleIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TupleIds {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tuple_ids: ", p), err)
	}
	return err
}

func (p *TTupleIsNullPredicate) Equals(other *TTupleIsNullPredicate) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.TupleIds) != len(other.TupleIds) {
		return false
	}
	for i, _tgt := range p.TupleIds {
		_src1 := other.TupleIds[i]
		if _tgt != _src1 {
			return false
		}
	}
	return true
}

func (p *TTupleIsNullPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTupleIsNullPredicate(%+v)", *p)
}

// Attributes:
//   - SlotID
type TSlotRef struct {
	SlotID types.TSlotId `thrift:"slot_id,1,required" db:"slot_id" json:"slot_id"`
}

func NewTSlotRef() *TSlotRef {
	return &TSlotRef{}
}

func (p *TSlotRef) GetSlotID() types.TSlotId {
	return p.SlotID
}
func (p *TSlotRef) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSlotID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSlotID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSlotID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SlotID is not set"))
	}
	return nil
}

func (p *TSlotRef) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.TSlotId(v)
		p.SlotID = temp
	}
	return nil
}

func (p *TSlotRef) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TSlotRef"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSlotRef) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "slot_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:slot_id: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.SlotID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.slot_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:slot_id: ", p), err)
	}
	return err
}

func (p *TSlotRef) Equals(other *TSlotRef) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SlotID != other.SlotID {
		return false
	}
	return true
}

func (p *TSlotRef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSlotRef(%+v)", *p)
}

// Attributes:
//   - Value
type TStringLiteral struct {
	Value string `thrift:"value,1,required" db:"value" json:"value"`
}

func NewTStringLiteral() *TStringLiteral {
	return &TStringLiteral{}
}

func (p *TStringLiteral) GetValue() string {
	return p.Value
}
func (p *TStringLiteral) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TStringLiteral) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TStringLiteral) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TStringLiteral"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringLiteral) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TStringLiteral) Equals(other *TStringLiteral) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Value != other.Value {
		return false
	}
	return true
}

func (p *TStringLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringLiteral(%+v)", *p)
}

// Attributes:
//   - IsMergeAgg
//   - ArgTypes
type TAggregateExpr struct {
	IsMergeAgg bool                 `thrift:"is_merge_agg,1,required" db:"is_merge_agg" json:"is_merge_agg"`
	ArgTypes   []*types.TColumnType `thrift:"arg_types,2,required" db:"arg_types" json:"arg_types"`
}

func NewTAggregateExpr() *TAggregateExpr {
	return &TAggregateExpr{}
}

func (p *TAggregateExpr) GetIsMergeAgg() bool {
	return p.IsMergeAgg
}

func (p *TAggregateExpr) GetArgTypes() []*types.TColumnType {
	return p.ArgTypes
}
func (p *TAggregateExpr) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIsMergeAgg bool = false
	var issetArgTypes bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetIsMergeAgg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetArgTypes = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIsMergeAgg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsMergeAgg is not set"))
	}
	if !issetArgTypes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ArgTypes is not set"))
	}
	return nil
}

func (p *TAggregateExpr) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IsMergeAgg = v
	}
	return nil
}

func (p *TAggregateExpr) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.TColumnType, 0, size)
	p.ArgTypes = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &types.TColumnType{}
		if err := _elem2.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.ArgTypes = append(p.ArgTypes, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggregateExpr) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TAggregateExpr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAggregateExpr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_merge_agg", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_merge_agg: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsMergeAgg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_merge_agg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_merge_agg: ", p), err)
	}
	return err
}

func (p *TAggregateExpr) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "arg_types", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arg_types: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ArgTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ArgTypes {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arg_types: ", p), err)
	}
	return err
}

func (p *TAggregateExpr) Equals(other *TAggregateExpr) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.IsMergeAgg != other.IsMergeAgg {
		return false
	}
	if len(p.ArgTypes) != len(other.ArgTypes) {
		return false
	}
	for i, _tgt := range p.ArgTypes {
		_src3 := other.ArgTypes[i]
		if !_tgt.Equals(_src3) {
			return false
		}
	}
	return true
}

func (p *TAggregateExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggregateExpr(%+v)", *p)
}

// Attributes:
//   - TargetTableID
//   - ReferencedColumns
type TKuduPartitionExpr struct {
	TargetTableID     types.TTableId `thrift:"target_table_id,1,required" db:"target_table_id" json:"target_table_id"`
	ReferencedColumns []int32        `thrift:"referenced_columns,2,required" db:"referenced_columns" json:"referenced_columns"`
}

func NewTKuduPartitionExpr() *TKuduPartitionExpr {
	return &TKuduPartitionExpr{}
}

func (p *TKuduPartitionExpr) GetTargetTableID() types.TTableId {
	return p.TargetTableID
}

func (p *TKuduPartitionExpr) GetReferencedColumns() []int32 {
	return p.ReferencedColumns
}
func (p *TKuduPartitionExpr) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTargetTableID bool = false
	var issetReferencedColumns bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTargetTableID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetReferencedColumns = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTargetTableID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TargetTableID is not set"))
	}
	if !issetReferencedColumns {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReferencedColumns is not set"))
	}
	return nil
}

func (p *TKuduPartitionExpr) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.TTableId(v)
		p.TargetTableID = temp
	}
	return nil
}

func (p *TKuduPartitionExpr) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.ReferencedColumns = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.ReferencedColumns = append(p.ReferencedColumns, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TKuduPartitionExpr) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TKuduPartitionExpr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TKuduPartitionExpr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "target_table_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:target_table_id: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.TargetTableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.target_table_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:target_table_id: ", p), err)
	}
	return err
}

func (p *TKuduPartitionExpr) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "referenced_columns", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:referenced_columns: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.ReferencedColumns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ReferencedColumns {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:referenced_columns: ", p), err)
	}
	return err
}

func (p *TKuduPartitionExpr) Equals(other *TKuduPartitionExpr) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TargetTableID != other.TargetTableID {
		return false
	}
	if len(p.ReferencedColumns) != len(other.ReferencedColumns) {
		return false
	}
	for i, _tgt := range p.ReferencedColumns {
		_src5 := other.ReferencedColumns[i]
		if _tgt != _src5 {
			return false
		}
	}
	return true
}

func (p *TKuduPartitionExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKuduPartitionExpr(%+v)", *p)
}

// Attributes:
//   - CastFormat
type TCastExpr struct {
	CastFormat string `thrift:"cast_format,1,required" db:"cast_format" json:"cast_format"`
}

func NewTCastExpr() *TCastExpr {
	return &TCastExpr{}
}

func (p *TCastExpr) GetCastFormat() string {
	return p.CastFormat
}
func (p *TCastExpr) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCastFormat bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetCastFormat = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCastFormat {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CastFormat is not set"))
	}
	return nil
}

func (p *TCastExpr) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CastFormat = v
	}
	return nil
}

func (p *TCastExpr) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TCastExpr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCastExpr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cast_format", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cast_format: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.CastFormat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cast_format (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cast_format: ", p), err)
	}
	return err
}

func (p *TCastExpr) Equals(other *TCastExpr) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.CastFormat != other.CastFormat {
		return false
	}
	return true
}

func (p *TCastExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCastExpr(%+v)", *p)
}

// Attributes:
//   - NodeType
//   - Type
//   - NumChildren
//   - IsConstant
//   - Fn
//   - VarargStartIdx
//   - BoolLiteral
//   - CaseExpr
//   - DateLiteral
//   - FloatLiteral
//   - IntLiteral
//   - InPredicate
//   - IsNullPred
//   - LiteralPred
//   - SlotRef
//   - StringLiteral
//   - TupleIsNullPred
//   - DecimalLiteral
//   - AggExpr
//   - TimestampLiteral
//   - KuduPartitionExpr
//   - CastExpr
//   - IsCodegenDisabled
type TExprNode struct {
	NodeType          TExprNodeType          `thrift:"node_type,1,required" db:"node_type" json:"node_type"`
	Type              *types.TColumnType     `thrift:"type,2,required" db:"type" json:"type"`
	NumChildren       int32                  `thrift:"num_children,3,required" db:"num_children" json:"num_children"`
	IsConstant        bool                   `thrift:"is_constant,4,required" db:"is_constant" json:"is_constant"`
	Fn                *types.TFunction       `thrift:"fn,5" db:"fn" json:"fn,omitempty"`
	VarargStartIdx    *int32                 `thrift:"vararg_start_idx,6" db:"vararg_start_idx" json:"vararg_start_idx,omitempty"`
	BoolLiteral       *TBoolLiteral          `thrift:"bool_literal,7" db:"bool_literal" json:"bool_literal,omitempty"`
	CaseExpr          *TCaseExpr             `thrift:"case_expr,8" db:"case_expr" json:"case_expr,omitempty"`
	DateLiteral       *TDateLiteral          `thrift:"date_literal,9" db:"date_literal" json:"date_literal,omitempty"`
	FloatLiteral      *TFloatLiteral         `thrift:"float_literal,10" db:"float_literal" json:"float_literal,omitempty"`
	IntLiteral        *TIntLiteral           `thrift:"int_literal,11" db:"int_literal" json:"int_literal,omitempty"`
	InPredicate       *TInPredicate          `thrift:"in_predicate,12" db:"in_predicate" json:"in_predicate,omitempty"`
	IsNullPred        *TIsNullPredicate      `thrift:"is_null_pred,13" db:"is_null_pred" json:"is_null_pred,omitempty"`
	LiteralPred       *TLiteralPredicate     `thrift:"literal_pred,14" db:"literal_pred" json:"literal_pred,omitempty"`
	SlotRef           *TSlotRef              `thrift:"slot_ref,15" db:"slot_ref" json:"slot_ref,omitempty"`
	StringLiteral     *TStringLiteral        `thrift:"string_literal,16" db:"string_literal" json:"string_literal,omitempty"`
	TupleIsNullPred   *TTupleIsNullPredicate `thrift:"tuple_is_null_pred,17" db:"tuple_is_null_pred" json:"tuple_is_null_pred,omitempty"`
	DecimalLiteral    *TDecimalLiteral       `thrift:"decimal_literal,18" db:"decimal_literal" json:"decimal_literal,omitempty"`
	AggExpr           *TAggregateExpr        `thrift:"agg_expr,19" db:"agg_expr" json:"agg_expr,omitempty"`
	TimestampLiteral  *TTimestampLiteral     `thrift:"timestamp_literal,20" db:"timestamp_literal" json:"timestamp_literal,omitempty"`
	KuduPartitionExpr *TKuduPartitionExpr    `thrift:"kudu_partition_expr,21" db:"kudu_partition_expr" json:"kudu_partition_expr,omitempty"`
	CastExpr          *TCastExpr             `thrift:"cast_expr,22" db:"cast_expr" json:"cast_expr,omitempty"`
	IsCodegenDisabled *bool                  `thrift:"is_codegen_disabled,23" db:"is_codegen_disabled" json:"is_codegen_disabled,omitempty"`
}

func NewTExprNode() *TExprNode {
	return &TExprNode{}
}

func (p *TExprNode) GetNodeType() TExprNodeType {
	return p.NodeType
}

var TExprNode_Type_DEFAULT *types.TColumnType

func (p *TExprNode) GetType() *types.TColumnType {
	if !p.IsSetType() {
		return TExprNode_Type_DEFAULT
	}
	return p.Type
}

func (p *TExprNode) GetNumChildren() int32 {
	return p.NumChildren
}

func (p *TExprNode) GetIsConstant() bool {
	return p.IsConstant
}

var TExprNode_Fn_DEFAULT *types.TFunction

func (p *TExprNode) GetFn() *types.TFunction {
	if !p.IsSetFn() {
		return TExprNode_Fn_DEFAULT
	}
	return p.Fn
}

var TExprNode_VarargStartIdx_DEFAULT int32

func (p *TExprNode) GetVarargStartIdx() int32 {
	if !p.IsSetVarargStartIdx() {
		return TExprNode_VarargStartIdx_DEFAULT
	}
	return *p.VarargStartIdx
}

var TExprNode_BoolLiteral_DEFAULT *TBoolLiteral

func (p *TExprNode) GetBoolLiteral() *TBoolLiteral {
	if !p.IsSetBoolLiteral() {
		return TExprNode_BoolLiteral_DEFAULT
	}
	return p.BoolLiteral
}

var TExprNode_CaseExpr_DEFAULT *TCaseExpr

func (p *TExprNode) GetCaseExpr() *TCaseExpr {
	if !p.IsSetCaseExpr() {
		return TExprNode_CaseExpr_DEFAULT
	}
	return p.CaseExpr
}

var TExprNode_DateLiteral_DEFAULT *TDateLiteral

func (p *TExprNode) GetDateLiteral() *TDateLiteral {
	if !p.IsSetDateLiteral() {
		return TExprNode_DateLiteral_DEFAULT
	}
	return p.DateLiteral
}

var TExprNode_FloatLiteral_DEFAULT *TFloatLiteral

func (p *TExprNode) GetFloatLiteral() *TFloatLiteral {
	if !p.IsSetFloatLiteral() {
		return TExprNode_FloatLiteral_DEFAULT
	}
	return p.FloatLiteral
}

var TExprNode_IntLiteral_DEFAULT *TIntLiteral

func (p *TExprNode) GetIntLiteral() *TIntLiteral {
	if !p.IsSetIntLiteral() {
		return TExprNode_IntLiteral_DEFAULT
	}
	return p.IntLiteral
}

var TExprNode_InPredicate_DEFAULT *TInPredicate

func (p *TExprNode) GetInPredicate() *TInPredicate {
	if !p.IsSetInPredicate() {
		return TExprNode_InPredicate_DEFAULT
	}
	return p.InPredicate
}

var TExprNode_IsNullPred_DEFAULT *TIsNullPredicate

func (p *TExprNode) GetIsNullPred() *TIsNullPredicate {
	if !p.IsSetIsNullPred() {
		return TExprNode_IsNullPred_DEFAULT
	}
	return p.IsNullPred
}

var TExprNode_LiteralPred_DEFAULT *TLiteralPredicate

func (p *TExprNode) GetLiteralPred() *TLiteralPredicate {
	if !p.IsSetLiteralPred() {
		return TExprNode_LiteralPred_DEFAULT
	}
	return p.LiteralPred
}

var TExprNode_SlotRef_DEFAULT *TSlotRef

func (p *TExprNode) GetSlotRef() *TSlotRef {
	if !p.IsSetSlotRef() {
		return TExprNode_SlotRef_DEFAULT
	}
	return p.SlotRef
}

var TExprNode_StringLiteral_DEFAULT *TStringLiteral

func (p *TExprNode) GetStringLiteral() *TStringLiteral {
	if !p.IsSetStringLiteral() {
		return TExprNode_StringLiteral_DEFAULT
	}
	return p.StringLiteral
}

var TExprNode_TupleIsNullPred_DEFAULT *TTupleIsNullPredicate

func (p *TExprNode) GetTupleIsNullPred() *TTupleIsNullPredicate {
	if !p.IsSetTupleIsNullPred() {
		return TExprNode_TupleIsNullPred_DEFAULT
	}
	return p.TupleIsNullPred
}

var TExprNode_DecimalLiteral_DEFAULT *TDecimalLiteral

func (p *TExprNode) GetDecimalLiteral() *TDecimalLiteral {
	if !p.IsSetDecimalLiteral() {
		return TExprNode_DecimalLiteral_DEFAULT
	}
	return p.DecimalLiteral
}

var TExprNode_AggExpr_DEFAULT *TAggregateExpr

func (p *TExprNode) GetAggExpr() *TAggregateExpr {
	if !p.IsSetAggExpr() {
		return TExprNode_AggExpr_DEFAULT
	}
	return p.AggExpr
}

var TExprNode_TimestampLiteral_DEFAULT *TTimestampLiteral

func (p *TExprNode) GetTimestampLiteral() *TTimestampLiteral {
	if !p.IsSetTimestampLiteral() {
		return TExprNode_TimestampLiteral_DEFAULT
	}
	return p.TimestampLiteral
}

var TExprNode_KuduPartitionExpr_DEFAULT *TKuduPartitionExpr

func (p *TExprNode) GetKuduPartitionExpr() *TKuduPartitionExpr {
	if !p.IsSetKuduPartitionExpr() {
		return TExprNode_KuduPartitionExpr_DEFAULT
	}
	return p.KuduPartitionExpr
}

var TExprNode_CastExpr_DEFAULT *TCastExpr

func (p *TExprNode) GetCastExpr() *TCastExpr {
	if !p.IsSetCastExpr() {
		return TExprNode_CastExpr_DEFAULT
	}
	return p.CastExpr
}

var TExprNode_IsCodegenDisabled_DEFAULT bool

func (p *TExprNode) GetIsCodegenDisabled() bool {
	if !p.IsSetIsCodegenDisabled() {
		return TExprNode_IsCodegenDisabled_DEFAULT
	}
	return *p.IsCodegenDisabled
}
func (p *TExprNode) IsSetType() bool {
	return p.Type != nil
}

func (p *TExprNode) IsSetFn() bool {
	return p.Fn != nil
}

func (p *TExprNode) IsSetVarargStartIdx() bool {
	return p.VarargStartIdx != nil
}

func (p *TExprNode) IsSetBoolLiteral() bool {
	return p.BoolLiteral != nil
}

func (p *TExprNode) IsSetCaseExpr() bool {
	return p.CaseExpr != nil
}

func (p *TExprNode) IsSetDateLiteral() bool {
	return p.DateLiteral != nil
}

func (p *TExprNode) IsSetFloatLiteral() bool {
	return p.FloatLiteral != nil
}

func (p *TExprNode) IsSetIntLiteral() bool {
	return p.IntLiteral != nil
}

func (p *TExprNode) IsSetInPredicate() bool {
	return p.InPredicate != nil
}

func (p *TExprNode) IsSetIsNullPred() bool {
	return p.IsNullPred != nil
}

func (p *TExprNode) IsSetLiteralPred() bool {
	return p.LiteralPred != nil
}

func (p *TExprNode) IsSetSlotRef() bool {
	return p.SlotRef != nil
}

func (p *TExprNode) IsSetStringLiteral() bool {
	return p.StringLiteral != nil
}

func (p *TExprNode) IsSetTupleIsNullPred() bool {
	return p.TupleIsNullPred != nil
}

func (p *TExprNode) IsSetDecimalLiteral() bool {
	return p.DecimalLiteral != nil
}

func (p *TExprNode) IsSetAggExpr() bool {
	return p.AggExpr != nil
}

func (p *TExprNode) IsSetTimestampLiteral() bool {
	return p.TimestampLiteral != nil
}

func (p *TExprNode) IsSetKuduPartitionExpr() bool {
	return p.KuduPartitionExpr != nil
}

func (p *TExprNode) IsSetCastExpr() bool {
	return p.CastExpr != nil
}

func (p *TExprNode) IsSetIsCodegenDisabled() bool {
	return p.IsCodegenDisabled != nil
}

func (p *TExprNode) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNodeType bool = false
	var issetType bool = false
	var issetNumChildren bool = false
	var issetIsConstant bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetNodeType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetNumChildren = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetIsConstant = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField19(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField21(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField22(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField23(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNodeType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeType is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetNumChildren {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumChildren is not set"))
	}
	if !issetIsConstant {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsConstant is not set"))
	}
	return nil
}

func (p *TExprNode) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TExprNodeType(v)
		p.NodeType = temp
	}
	return nil
}

func (p *TExprNode) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Type = &types.TColumnType{}
	if err := p.Type.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
	}
	return nil
}

func (p *TExprNode) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumChildren = v
	}
	return nil
}

func (p *TExprNode) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsConstant = v
	}
	return nil
}

func (p *TExprNode) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.Fn = &types.TFunction{}
	if err := p.Fn.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fn), err)
	}
	return nil
}

func (p *TExprNode) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.VarargStartIdx = &v
	}
	return nil
}

func (p *TExprNode) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p.BoolLiteral = &TBoolLiteral{}
	if err := p.BoolLiteral.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BoolLiteral), err)
	}
	return nil
}

func (p *TExprNode) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p.CaseExpr = &TCaseExpr{}
	if err := p.CaseExpr.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CaseExpr), err)
	}
	return nil
}

func (p *TExprNode) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	p.DateLiteral = &TDateLiteral{}
	if err := p.DateLiteral.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateLiteral), err)
	}
	return nil
}

func (p *TExprNode) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	p.FloatLiteral = &TFloatLiteral{}
	if err := p.FloatLiteral.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FloatLiteral), err)
	}
	return nil
}

func (p *TExprNode) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	p.IntLiteral = &TIntLiteral{}
	if err := p.IntLiteral.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntLiteral), err)
	}
	return nil
}

func (p *TExprNode) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	p.InPredicate = &TInPredicate{}
	if err := p.InPredicate.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InPredicate), err)
	}
	return nil
}

func (p *TExprNode) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	p.IsNullPred = &TIsNullPredicate{}
	if err := p.IsNullPred.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IsNullPred), err)
	}
	return nil
}

func (p *TExprNode) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	p.LiteralPred = &TLiteralPredicate{}
	if err := p.LiteralPred.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LiteralPred), err)
	}
	return nil
}

func (p *TExprNode) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	p.SlotRef = &TSlotRef{}
	if err := p.SlotRef.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SlotRef), err)
	}
	return nil
}

func (p *TExprNode) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	p.StringLiteral = &TStringLiteral{}
	if err := p.StringLiteral.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringLiteral), err)
	}
	return nil
}

func (p *TExprNode) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	p.TupleIsNullPred = &TTupleIsNullPredicate{}
	if err := p.TupleIsNullPred.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TupleIsNullPred), err)
	}
	return nil
}

func (p *TExprNode) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	p.DecimalLiteral = &TDecimalLiteral{}
	if err := p.DecimalLiteral.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DecimalLiteral), err)
	}
	return nil
}

func (p *TExprNode) ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
	p.AggExpr = &TAggregateExpr{}
	if err := p.AggExpr.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AggExpr), err)
	}
	return nil
}

func (p *TExprNode) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	p.TimestampLiteral = &TTimestampLiteral{}
	if err := p.TimestampLiteral.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimestampLiteral), err)
	}
	return nil
}

func (p *TExprNode) ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
	p.KuduPartitionExpr = &TKuduPartitionExpr{}
	if err := p.KuduPartitionExpr.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.KuduPartitionExpr), err)
	}
	return nil
}

func (p *TExprNode) ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
	p.CastExpr = &TCastExpr{}
	if err := p.CastExpr.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CastExpr), err)
	}
	return nil
}

func (p *TExprNode) ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.IsCodegenDisabled = &v
	}
	return nil
}

func (p *TExprNode) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TExprNode"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField17(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField18(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField19(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField21(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField22(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField23(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TExprNode) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "node_type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node_type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NodeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node_type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node_type: ", p), err)
	}
	return err
}

func (p *TExprNode) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := p.Type.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TExprNode) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_children", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_children: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumChildren)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_children (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_children: ", p), err)
	}
	return err
}

func (p *TExprNode) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_constant", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_constant: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsConstant)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_constant (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_constant: ", p), err)
	}
	return err
}

func (p *TExprNode) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFn() {
		if err := oprot.WriteFieldBegin(ctx, "fn", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fn: ", p), err)
		}
		if err := p.Fn.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fn), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fn: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVarargStartIdx() {
		if err := oprot.WriteFieldBegin(ctx, "vararg_start_idx", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vararg_start_idx: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.VarargStartIdx)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vararg_start_idx (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vararg_start_idx: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolLiteral() {
		if err := oprot.WriteFieldBegin(ctx, "bool_literal", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bool_literal: ", p), err)
		}
		if err := p.BoolLiteral.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BoolLiteral), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bool_literal: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCaseExpr() {
		if err := oprot.WriteFieldBegin(ctx, "case_expr", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:case_expr: ", p), err)
		}
		if err := p.CaseExpr.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CaseExpr), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:case_expr: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDateLiteral() {
		if err := oprot.WriteFieldBegin(ctx, "date_literal", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:date_literal: ", p), err)
		}
		if err := p.DateLiteral.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateLiteral), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:date_literal: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFloatLiteral() {
		if err := oprot.WriteFieldBegin(ctx, "float_literal", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:float_literal: ", p), err)
		}
		if err := p.FloatLiteral.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FloatLiteral), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:float_literal: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIntLiteral() {
		if err := oprot.WriteFieldBegin(ctx, "int_literal", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:int_literal: ", p), err)
		}
		if err := p.IntLiteral.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntLiteral), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:int_literal: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetInPredicate() {
		if err := oprot.WriteFieldBegin(ctx, "in_predicate", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:in_predicate: ", p), err)
		}
		if err := p.InPredicate.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InPredicate), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:in_predicate: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNullPred() {
		if err := oprot.WriteFieldBegin(ctx, "is_null_pred", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:is_null_pred: ", p), err)
		}
		if err := p.IsNullPred.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IsNullPred), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:is_null_pred: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLiteralPred() {
		if err := oprot.WriteFieldBegin(ctx, "literal_pred", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:literal_pred: ", p), err)
		}
		if err := p.LiteralPred.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LiteralPred), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:literal_pred: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSlotRef() {
		if err := oprot.WriteFieldBegin(ctx, "slot_ref", thrift.STRUCT, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:slot_ref: ", p), err)
		}
		if err := p.SlotRef.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SlotRef), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:slot_ref: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStringLiteral() {
		if err := oprot.WriteFieldBegin(ctx, "string_literal", thrift.STRUCT, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:string_literal: ", p), err)
		}
		if err := p.StringLiteral.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringLiteral), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:string_literal: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTupleIsNullPred() {
		if err := oprot.WriteFieldBegin(ctx, "tuple_is_null_pred", thrift.STRUCT, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:tuple_is_null_pred: ", p), err)
		}
		if err := p.TupleIsNullPred.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TupleIsNullPred), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:tuple_is_null_pred: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDecimalLiteral() {
		if err := oprot.WriteFieldBegin(ctx, "decimal_literal", thrift.STRUCT, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:decimal_literal: ", p), err)
		}
		if err := p.DecimalLiteral.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DecimalLiteral), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:decimal_literal: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAggExpr() {
		if err := oprot.WriteFieldBegin(ctx, "agg_expr", thrift.STRUCT, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:agg_expr: ", p), err)
		}
		if err := p.AggExpr.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AggExpr), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:agg_expr: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestampLiteral() {
		if err := oprot.WriteFieldBegin(ctx, "timestamp_literal", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:timestamp_literal: ", p), err)
		}
		if err := p.TimestampLiteral.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimestampLiteral), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:timestamp_literal: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKuduPartitionExpr() {
		if err := oprot.WriteFieldBegin(ctx, "kudu_partition_expr", thrift.STRUCT, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:kudu_partition_expr: ", p), err)
		}
		if err := p.KuduPartitionExpr.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.KuduPartitionExpr), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:kudu_partition_expr: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCastExpr() {
		if err := oprot.WriteFieldBegin(ctx, "cast_expr", thrift.STRUCT, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:cast_expr: ", p), err)
		}
		if err := p.CastExpr.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CastExpr), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:cast_expr: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCodegenDisabled() {
		if err := oprot.WriteFieldBegin(ctx, "is_codegen_disabled", thrift.BOOL, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:is_codegen_disabled: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.IsCodegenDisabled)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.is_codegen_disabled (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:is_codegen_disabled: ", p), err)
		}
	}
	return err
}

func (p *TExprNode) Equals(other *TExprNode) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.NodeType != other.NodeType {
		return false
	}
	if !p.Type.Equals(other.Type) {
		return false
	}
	if p.NumChildren != other.NumChildren {
		return false
	}
	if p.IsConstant != other.IsConstant {
		return false
	}
	if !p.Fn.Equals(other.Fn) {
		return false
	}
	if p.VarargStartIdx != other.VarargStartIdx {
		if p.VarargStartIdx == nil || other.VarargStartIdx == nil {
			return false
		}
		if (*p.VarargStartIdx) != (*other.VarargStartIdx) {
			return false
		}
	}
	if !p.BoolLiteral.Equals(other.BoolLiteral) {
		return false
	}
	if !p.CaseExpr.Equals(other.CaseExpr) {
		return false
	}
	if !p.DateLiteral.Equals(other.DateLiteral) {
		return false
	}
	if !p.FloatLiteral.Equals(other.FloatLiteral) {
		return false
	}
	if !p.IntLiteral.Equals(other.IntLiteral) {
		return false
	}
	if !p.InPredicate.Equals(other.InPredicate) {
		return false
	}
	if !p.IsNullPred.Equals(other.IsNullPred) {
		return false
	}
	if !p.LiteralPred.Equals(other.LiteralPred) {
		return false
	}
	if !p.SlotRef.Equals(other.SlotRef) {
		return false
	}
	if !p.StringLiteral.Equals(other.StringLiteral) {
		return false
	}
	if !p.TupleIsNullPred.Equals(other.TupleIsNullPred) {
		return false
	}
	if !p.DecimalLiteral.Equals(other.DecimalLiteral) {
		return false
	}
	if !p.AggExpr.Equals(other.AggExpr) {
		return false
	}
	if !p.TimestampLiteral.Equals(other.TimestampLiteral) {
		return false
	}
	if !p.KuduPartitionExpr.Equals(other.KuduPartitionExpr) {
		return false
	}
	if !p.CastExpr.Equals(other.CastExpr) {
		return false
	}
	if p.IsCodegenDisabled != other.IsCodegenDisabled {
		if p.IsCodegenDisabled == nil || other.IsCodegenDisabled == nil {
			return false
		}
		if (*p.IsCodegenDisabled) != (*other.IsCodegenDisabled) {
			return false
		}
	}
	return true
}

func (p *TExprNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExprNode(%+v)", *p)
}

// Attributes:
//   - Nodes
type TExpr struct {
	Nodes []*TExprNode `thrift:"nodes,1,required" db:"nodes" json:"nodes"`
}

func NewTExpr() *TExpr {
	return &TExpr{}
}

func (p *TExpr) GetNodes() []*TExprNode {
	return p.Nodes
}
func (p *TExpr) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNodes bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetNodes = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNodes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Nodes is not set"))
	}
	return nil
}

func (p *TExpr) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TExprNode, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &TExprNode{}
		if err := _elem6.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Nodes = append(p.Nodes, _elem6)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TExpr) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TExpr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TExpr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodes: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Nodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nodes {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodes: ", p), err)
	}
	return err
}

func (p *TExpr) Equals(other *TExpr) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Nodes) != len(other.Nodes) {
		return false
	}
	for i, _tgt := range p.Nodes {
		_src7 := other.Nodes[i]
		if !_tgt.Equals(_src7) {
			return false
		}
	}
	return true
}

func (p *TExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExpr(%+v)", *p)
}

// Attributes:
//   - Exprs
type TExprBatch struct {
	Exprs []*TExpr `thrift:"exprs,1,required" db:"exprs" json:"exprs"`
}

func NewTExprBatch() *TExprBatch {
	return &TExprBatch{}
}

func (p *TExprBatch) GetExprs() []*TExpr {
	return p.Exprs
}
func (p *TExprBatch) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetExprs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetExprs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetExprs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Exprs is not set"))
	}
	return nil
}

func (p *TExprBatch) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TExpr, 0, size)
	p.Exprs = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &TExpr{}
		if err := _elem8.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Exprs = append(p.Exprs, _elem8)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TExprBatch) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TExprBatch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TExprBatch) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "exprs", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exprs: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Exprs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Exprs {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exprs: ", p), err)
	}
	return err
}

func (p *TExprBatch) Equals(other *TExprBatch) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Exprs) != len(other.Exprs) {
		return false
	}
	for i, _tgt := range p.Exprs {
		_src9 := other.Exprs[i]
		if !_tgt.Equals(_src9) {
			return false
		}
	}
	return true
}

func (p *TExprBatch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExprBatch(%+v)", *p)
}
