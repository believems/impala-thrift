// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package statestoreservice

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/believems/impala-thrift/status"
	"github.com/believems/impala-thrift/types"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = status.GoUnusedProtection__
var _ = types.GoUnusedProtection__

type StatestoreServiceVersion int64

const (
	StatestoreServiceVersion_V1 StatestoreServiceVersion = 0
)

func (p StatestoreServiceVersion) String() string {
	switch p {
	case StatestoreServiceVersion_V1:
		return "V1"
	}
	return "<UNSET>"
}

func StatestoreServiceVersionFromString(s string) (StatestoreServiceVersion, error) {
	switch s {
	case "V1":
		return StatestoreServiceVersion_V1, nil
	}
	return StatestoreServiceVersion(0), fmt.Errorf("not a valid StatestoreServiceVersion string")
}

func StatestoreServiceVersionPtr(v StatestoreServiceVersion) *StatestoreServiceVersion { return &v }

func (p StatestoreServiceVersion) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *StatestoreServiceVersion) UnmarshalText(text []byte) error {
	q, err := StatestoreServiceVersionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *StatestoreServiceVersion) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = StatestoreServiceVersion(v)
	return nil
}

func (p *StatestoreServiceVersion) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - MemoryConsumed
//   - QueryId
type THeavyMemoryQuery struct {
	MemoryConsumed int64            `thrift:"memory_consumed,1,required" db:"memory_consumed" json:"memory_consumed"`
	QueryId        *types.TUniqueId `thrift:"queryId,2,required" db:"queryId" json:"queryId"`
}

func NewTHeavyMemoryQuery() *THeavyMemoryQuery {
	return &THeavyMemoryQuery{}
}

func (p *THeavyMemoryQuery) GetMemoryConsumed() int64 {
	return p.MemoryConsumed
}

var THeavyMemoryQuery_QueryId_DEFAULT *types.TUniqueId

func (p *THeavyMemoryQuery) GetQueryId() *types.TUniqueId {
	if !p.IsSetQueryId() {
		return THeavyMemoryQuery_QueryId_DEFAULT
	}
	return p.QueryId
}
func (p *THeavyMemoryQuery) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *THeavyMemoryQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMemoryConsumed bool = false
	var issetQueryId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetMemoryConsumed = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetQueryId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMemoryConsumed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MemoryConsumed is not set"))
	}
	if !issetQueryId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"))
	}
	return nil
}

func (p *THeavyMemoryQuery) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemoryConsumed = v
	}
	return nil
}

func (p *THeavyMemoryQuery) ReadField2(iprot thrift.TProtocol) error {
	p.QueryId = &types.TUniqueId{}
	if err := p.QueryId.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryId), err)
	}
	return nil
}

func (p *THeavyMemoryQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THeavyMemoryQuery"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *THeavyMemoryQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memory_consumed", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memory_consumed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemoryConsumed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memory_consumed (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memory_consumed: ", p), err)
	}
	return err
}

func (p *THeavyMemoryQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queryId", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queryId: ", p), err)
	}
	if err := p.QueryId.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryId), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queryId: ", p), err)
	}
	return err
}

func (p *THeavyMemoryQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THeavyMemoryQuery(%+v)", *p)
}

// Attributes:
//   - NumAdmittedRunning
//   - NumQueued
//   - BackendMemReserved
//   - HeavyMemoryQueries
//   - MinMemoryConsumed
//   - MaxMemoryConsumed
//   - TotalMemoryConsumed
//   - NumRunning
type TPoolStats struct {
	NumAdmittedRunning  int64                `thrift:"num_admitted_running,1,required" db:"num_admitted_running" json:"num_admitted_running"`
	NumQueued           int64                `thrift:"num_queued,2,required" db:"num_queued" json:"num_queued"`
	BackendMemReserved  int64                `thrift:"backend_mem_reserved,3,required" db:"backend_mem_reserved" json:"backend_mem_reserved"`
	HeavyMemoryQueries  []*THeavyMemoryQuery `thrift:"heavy_memory_queries,4,required" db:"heavy_memory_queries" json:"heavy_memory_queries"`
	MinMemoryConsumed   int64                `thrift:"min_memory_consumed,5,required" db:"min_memory_consumed" json:"min_memory_consumed"`
	MaxMemoryConsumed   int64                `thrift:"max_memory_consumed,6,required" db:"max_memory_consumed" json:"max_memory_consumed"`
	TotalMemoryConsumed int64                `thrift:"total_memory_consumed,7,required" db:"total_memory_consumed" json:"total_memory_consumed"`
	NumRunning          int64                `thrift:"num_running,8,required" db:"num_running" json:"num_running"`
}

func NewTPoolStats() *TPoolStats {
	return &TPoolStats{}
}

func (p *TPoolStats) GetNumAdmittedRunning() int64 {
	return p.NumAdmittedRunning
}

func (p *TPoolStats) GetNumQueued() int64 {
	return p.NumQueued
}

func (p *TPoolStats) GetBackendMemReserved() int64 {
	return p.BackendMemReserved
}

func (p *TPoolStats) GetHeavyMemoryQueries() []*THeavyMemoryQuery {
	return p.HeavyMemoryQueries
}

func (p *TPoolStats) GetMinMemoryConsumed() int64 {
	return p.MinMemoryConsumed
}

func (p *TPoolStats) GetMaxMemoryConsumed() int64 {
	return p.MaxMemoryConsumed
}

func (p *TPoolStats) GetTotalMemoryConsumed() int64 {
	return p.TotalMemoryConsumed
}

func (p *TPoolStats) GetNumRunning() int64 {
	return p.NumRunning
}
func (p *TPoolStats) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNumAdmittedRunning bool = false
	var issetNumQueued bool = false
	var issetBackendMemReserved bool = false
	var issetHeavyMemoryQueries bool = false
	var issetMinMemoryConsumed bool = false
	var issetMaxMemoryConsumed bool = false
	var issetTotalMemoryConsumed bool = false
	var issetNumRunning bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetNumAdmittedRunning = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetNumQueued = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetBackendMemReserved = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetHeavyMemoryQueries = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetMinMemoryConsumed = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetMaxMemoryConsumed = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
				issetTotalMemoryConsumed = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
				issetNumRunning = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNumAdmittedRunning {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumAdmittedRunning is not set"))
	}
	if !issetNumQueued {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumQueued is not set"))
	}
	if !issetBackendMemReserved {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BackendMemReserved is not set"))
	}
	if !issetHeavyMemoryQueries {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HeavyMemoryQueries is not set"))
	}
	if !issetMinMemoryConsumed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinMemoryConsumed is not set"))
	}
	if !issetMaxMemoryConsumed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxMemoryConsumed is not set"))
	}
	if !issetTotalMemoryConsumed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalMemoryConsumed is not set"))
	}
	if !issetNumRunning {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumRunning is not set"))
	}
	return nil
}

func (p *TPoolStats) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumAdmittedRunning = v
	}
	return nil
}

func (p *TPoolStats) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumQueued = v
	}
	return nil
}

func (p *TPoolStats) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BackendMemReserved = v
	}
	return nil
}

func (p *TPoolStats) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*THeavyMemoryQuery, 0, size)
	p.HeavyMemoryQueries = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &THeavyMemoryQuery{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.HeavyMemoryQueries = append(p.HeavyMemoryQueries, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPoolStats) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MinMemoryConsumed = v
	}
	return nil
}

func (p *TPoolStats) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MaxMemoryConsumed = v
	}
	return nil
}

func (p *TPoolStats) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TotalMemoryConsumed = v
	}
	return nil
}

func (p *TPoolStats) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.NumRunning = v
	}
	return nil
}

func (p *TPoolStats) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPoolStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPoolStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_admitted_running", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_admitted_running: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumAdmittedRunning)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_admitted_running (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_admitted_running: ", p), err)
	}
	return err
}

func (p *TPoolStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_queued", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_queued: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumQueued)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_queued (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_queued: ", p), err)
	}
	return err
}

func (p *TPoolStats) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("backend_mem_reserved", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:backend_mem_reserved: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BackendMemReserved)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.backend_mem_reserved (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:backend_mem_reserved: ", p), err)
	}
	return err
}

func (p *TPoolStats) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("heavy_memory_queries", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:heavy_memory_queries: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HeavyMemoryQueries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HeavyMemoryQueries {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:heavy_memory_queries: ", p), err)
	}
	return err
}

func (p *TPoolStats) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min_memory_consumed", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:min_memory_consumed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MinMemoryConsumed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min_memory_consumed (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:min_memory_consumed: ", p), err)
	}
	return err
}

func (p *TPoolStats) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_memory_consumed", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_memory_consumed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxMemoryConsumed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_memory_consumed (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_memory_consumed: ", p), err)
	}
	return err
}

func (p *TPoolStats) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_memory_consumed", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:total_memory_consumed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalMemoryConsumed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_memory_consumed (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:total_memory_consumed: ", p), err)
	}
	return err
}

func (p *TPoolStats) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_running", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:num_running: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumRunning)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_running (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:num_running: ", p), err)
	}
	return err
}

func (p *TPoolStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPoolStats(%+v)", *p)
}

// Attributes:
//   - MemReserved
//   - MemAdmitted
//   - NumAdmitted
//   - SlotsInUse
type THostStats struct {
	MemReserved int64 `thrift:"mem_reserved,1,required" db:"mem_reserved" json:"mem_reserved"`
	MemAdmitted int64 `thrift:"mem_admitted,2,required" db:"mem_admitted" json:"mem_admitted"`
	NumAdmitted int64 `thrift:"num_admitted,3,required" db:"num_admitted" json:"num_admitted"`
	SlotsInUse  int64 `thrift:"slots_in_use,4,required" db:"slots_in_use" json:"slots_in_use"`
}

func NewTHostStats() *THostStats {
	return &THostStats{}
}

func (p *THostStats) GetMemReserved() int64 {
	return p.MemReserved
}

func (p *THostStats) GetMemAdmitted() int64 {
	return p.MemAdmitted
}

func (p *THostStats) GetNumAdmitted() int64 {
	return p.NumAdmitted
}

func (p *THostStats) GetSlotsInUse() int64 {
	return p.SlotsInUse
}
func (p *THostStats) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMemReserved bool = false
	var issetMemAdmitted bool = false
	var issetNumAdmitted bool = false
	var issetSlotsInUse bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetMemReserved = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetMemAdmitted = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetNumAdmitted = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetSlotsInUse = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMemReserved {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MemReserved is not set"))
	}
	if !issetMemAdmitted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MemAdmitted is not set"))
	}
	if !issetNumAdmitted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumAdmitted is not set"))
	}
	if !issetSlotsInUse {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SlotsInUse is not set"))
	}
	return nil
}

func (p *THostStats) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemReserved = v
	}
	return nil
}

func (p *THostStats) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemAdmitted = v
	}
	return nil
}

func (p *THostStats) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumAdmitted = v
	}
	return nil
}

func (p *THostStats) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SlotsInUse = v
	}
	return nil
}

func (p *THostStats) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THostStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *THostStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mem_reserved", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mem_reserved: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemReserved)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mem_reserved (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mem_reserved: ", p), err)
	}
	return err
}

func (p *THostStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mem_admitted", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mem_admitted: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MemAdmitted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mem_admitted (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mem_admitted: ", p), err)
	}
	return err
}

func (p *THostStats) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_admitted", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_admitted: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumAdmitted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_admitted (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_admitted: ", p), err)
	}
	return err
}

func (p *THostStats) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("slots_in_use", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:slots_in_use: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SlotsInUse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.slots_in_use (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:slots_in_use: ", p), err)
	}
	return err
}

func (p *THostStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THostStats(%+v)", *p)
}

// Attributes:
//   - HostAddr
//   - Stats
type TPerHostStatsUpdateElement struct {
	HostAddr string      `thrift:"host_addr,1,required" db:"host_addr" json:"host_addr"`
	Stats    *THostStats `thrift:"stats,2,required" db:"stats" json:"stats"`
}

func NewTPerHostStatsUpdateElement() *TPerHostStatsUpdateElement {
	return &TPerHostStatsUpdateElement{}
}

func (p *TPerHostStatsUpdateElement) GetHostAddr() string {
	return p.HostAddr
}

var TPerHostStatsUpdateElement_Stats_DEFAULT *THostStats

func (p *TPerHostStatsUpdateElement) GetStats() *THostStats {
	if !p.IsSetStats() {
		return TPerHostStatsUpdateElement_Stats_DEFAULT
	}
	return p.Stats
}
func (p *TPerHostStatsUpdateElement) IsSetStats() bool {
	return p.Stats != nil
}

func (p *TPerHostStatsUpdateElement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetHostAddr bool = false
	var issetStats bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetHostAddr = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetStats = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetHostAddr {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostAddr is not set"))
	}
	if !issetStats {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Stats is not set"))
	}
	return nil
}

func (p *TPerHostStatsUpdateElement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostAddr = v
	}
	return nil
}

func (p *TPerHostStatsUpdateElement) ReadField2(iprot thrift.TProtocol) error {
	p.Stats = &THostStats{}
	if err := p.Stats.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
	}
	return nil
}

func (p *TPerHostStatsUpdateElement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPerHostStatsUpdateElement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPerHostStatsUpdateElement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host_addr", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host_addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostAddr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host_addr (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host_addr: ", p), err)
	}
	return err
}

func (p *TPerHostStatsUpdateElement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stats", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stats: ", p), err)
	}
	if err := p.Stats.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stats: ", p), err)
	}
	return err
}

func (p *TPerHostStatsUpdateElement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPerHostStatsUpdateElement(%+v)", *p)
}

// Attributes:
//   - PerHostStats
type TPerHostStatsUpdate struct {
	PerHostStats []*TPerHostStatsUpdateElement `thrift:"per_host_stats,1,required" db:"per_host_stats" json:"per_host_stats"`
}

func NewTPerHostStatsUpdate() *TPerHostStatsUpdate {
	return &TPerHostStatsUpdate{}
}

func (p *TPerHostStatsUpdate) GetPerHostStats() []*TPerHostStatsUpdateElement {
	return p.PerHostStats
}
func (p *TPerHostStatsUpdate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPerHostStats bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetPerHostStats = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPerHostStats {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PerHostStats is not set"))
	}
	return nil
}

func (p *TPerHostStatsUpdate) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TPerHostStatsUpdateElement, 0, size)
	p.PerHostStats = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TPerHostStatsUpdateElement{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.PerHostStats = append(p.PerHostStats, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPerHostStatsUpdate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPerHostStatsUpdate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPerHostStatsUpdate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("per_host_stats", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:per_host_stats: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PerHostStats)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PerHostStats {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:per_host_stats: ", p), err)
	}
	return err
}

func (p *TPerHostStatsUpdate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPerHostStatsUpdate(%+v)", *p)
}

// Attributes:
//   - Key
//   - Value
//   - Deleted
type TTopicItem struct {
	Key     string `thrift:"key,1,required" db:"key" json:"key"`
	Value   string `thrift:"value,2,required" db:"value" json:"value"`
	Deleted bool   `thrift:"deleted,3,required" db:"deleted" json:"deleted"`
}

func NewTTopicItem() *TTopicItem {
	return &TTopicItem{}
}

func (p *TTopicItem) GetKey() string {
	return p.Key
}

func (p *TTopicItem) GetValue() string {
	return p.Value
}

func (p *TTopicItem) GetDeleted() bool {
	return p.Deleted
}
func (p *TTopicItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKey bool = false
	var issetValue bool = false
	var issetDeleted bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetKey = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetDeleted = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKey {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"))
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	if !issetDeleted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Deleted is not set"))
	}
	return nil
}

func (p *TTopicItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *TTopicItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TTopicItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Deleted = v
	}
	return nil
}

func (p *TTopicItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTopicItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTopicItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TTopicItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *TTopicItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleted", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deleted: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Deleted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deleted (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deleted: ", p), err)
	}
	return err
}

func (p *TTopicItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTopicItem(%+v)", *p)
}

// Attributes:
//   - TopicName
//   - TopicEntries
//   - IsDelta
//   - FromVersion
//   - ToVersion
//   - MinSubscriberTopicVersion
//   - ClearTopicEntries
type TTopicDelta struct {
	TopicName                 string        `thrift:"topic_name,1,required" db:"topic_name" json:"topic_name"`
	TopicEntries              []*TTopicItem `thrift:"topic_entries,2,required" db:"topic_entries" json:"topic_entries"`
	IsDelta                   bool          `thrift:"is_delta,3,required" db:"is_delta" json:"is_delta"`
	FromVersion               *int64        `thrift:"from_version,4" db:"from_version" json:"from_version,omitempty"`
	ToVersion                 *int64        `thrift:"to_version,5" db:"to_version" json:"to_version,omitempty"`
	MinSubscriberTopicVersion *int64        `thrift:"min_subscriber_topic_version,6" db:"min_subscriber_topic_version" json:"min_subscriber_topic_version,omitempty"`
	ClearTopicEntries         *bool         `thrift:"clear_topic_entries,7" db:"clear_topic_entries" json:"clear_topic_entries,omitempty"`
}

func NewTTopicDelta() *TTopicDelta {
	return &TTopicDelta{}
}

func (p *TTopicDelta) GetTopicName() string {
	return p.TopicName
}

func (p *TTopicDelta) GetTopicEntries() []*TTopicItem {
	return p.TopicEntries
}

func (p *TTopicDelta) GetIsDelta() bool {
	return p.IsDelta
}

var TTopicDelta_FromVersion_DEFAULT int64

func (p *TTopicDelta) GetFromVersion() int64 {
	if !p.IsSetFromVersion() {
		return TTopicDelta_FromVersion_DEFAULT
	}
	return *p.FromVersion
}

var TTopicDelta_ToVersion_DEFAULT int64

func (p *TTopicDelta) GetToVersion() int64 {
	if !p.IsSetToVersion() {
		return TTopicDelta_ToVersion_DEFAULT
	}
	return *p.ToVersion
}

var TTopicDelta_MinSubscriberTopicVersion_DEFAULT int64

func (p *TTopicDelta) GetMinSubscriberTopicVersion() int64 {
	if !p.IsSetMinSubscriberTopicVersion() {
		return TTopicDelta_MinSubscriberTopicVersion_DEFAULT
	}
	return *p.MinSubscriberTopicVersion
}

var TTopicDelta_ClearTopicEntries_DEFAULT bool

func (p *TTopicDelta) GetClearTopicEntries() bool {
	if !p.IsSetClearTopicEntries() {
		return TTopicDelta_ClearTopicEntries_DEFAULT
	}
	return *p.ClearTopicEntries
}
func (p *TTopicDelta) IsSetFromVersion() bool {
	return p.FromVersion != nil
}

func (p *TTopicDelta) IsSetToVersion() bool {
	return p.ToVersion != nil
}

func (p *TTopicDelta) IsSetMinSubscriberTopicVersion() bool {
	return p.MinSubscriberTopicVersion != nil
}

func (p *TTopicDelta) IsSetClearTopicEntries() bool {
	return p.ClearTopicEntries != nil
}

func (p *TTopicDelta) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTopicName bool = false
	var issetTopicEntries bool = false
	var issetIsDelta bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetTopicName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetTopicEntries = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetIsDelta = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTopicName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicName is not set"))
	}
	if !issetTopicEntries {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicEntries is not set"))
	}
	if !issetIsDelta {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsDelta is not set"))
	}
	return nil
}

func (p *TTopicDelta) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *TTopicDelta) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTopicItem, 0, size)
	p.TopicEntries = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &TTopicItem{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.TopicEntries = append(p.TopicEntries, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TTopicDelta) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsDelta = v
	}
	return nil
}

func (p *TTopicDelta) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FromVersion = &v
	}
	return nil
}

func (p *TTopicDelta) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ToVersion = &v
	}
	return nil
}

func (p *TTopicDelta) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MinSubscriberTopicVersion = &v
	}
	return nil
}

func (p *TTopicDelta) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ClearTopicEntries = &v
	}
	return nil
}

func (p *TTopicDelta) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTopicDelta"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTopicDelta) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic_name: ", p), err)
	}
	return err
}

func (p *TTopicDelta) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic_entries", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topic_entries: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicEntries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TopicEntries {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topic_entries: ", p), err)
	}
	return err
}

func (p *TTopicDelta) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_delta", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_delta: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsDelta)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_delta (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_delta: ", p), err)
	}
	return err
}

func (p *TTopicDelta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromVersion() {
		if err := oprot.WriteFieldBegin("from_version", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:from_version: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FromVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.from_version (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:from_version: ", p), err)
		}
	}
	return err
}

func (p *TTopicDelta) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetToVersion() {
		if err := oprot.WriteFieldBegin("to_version", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:to_version: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ToVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.to_version (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:to_version: ", p), err)
		}
	}
	return err
}

func (p *TTopicDelta) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinSubscriberTopicVersion() {
		if err := oprot.WriteFieldBegin("min_subscriber_topic_version", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:min_subscriber_topic_version: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.MinSubscriberTopicVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.min_subscriber_topic_version (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:min_subscriber_topic_version: ", p), err)
		}
	}
	return err
}

func (p *TTopicDelta) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetClearTopicEntries() {
		if err := oprot.WriteFieldBegin("clear_topic_entries", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:clear_topic_entries: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ClearTopicEntries)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clear_topic_entries (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:clear_topic_entries: ", p), err)
		}
	}
	return err
}

func (p *TTopicDelta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTopicDelta(%+v)", *p)
}

// Attributes:
//   - TopicName
//   - IsTransient
//   - PopulateMinSubscriberTopicVersion
//   - FilterPrefix
type TTopicRegistration struct {
	TopicName                         string  `thrift:"topic_name,1,required" db:"topic_name" json:"topic_name"`
	IsTransient                       bool    `thrift:"is_transient,2,required" db:"is_transient" json:"is_transient"`
	PopulateMinSubscriberTopicVersion bool    `thrift:"populate_min_subscriber_topic_version,3,required" db:"populate_min_subscriber_topic_version" json:"populate_min_subscriber_topic_version"`
	FilterPrefix                      *string `thrift:"filter_prefix,4" db:"filter_prefix" json:"filter_prefix,omitempty"`
}

func NewTTopicRegistration() *TTopicRegistration {
	return &TTopicRegistration{}
}

func (p *TTopicRegistration) GetTopicName() string {
	return p.TopicName
}

func (p *TTopicRegistration) GetIsTransient() bool {
	return p.IsTransient
}

func (p *TTopicRegistration) GetPopulateMinSubscriberTopicVersion() bool {
	return p.PopulateMinSubscriberTopicVersion
}

var TTopicRegistration_FilterPrefix_DEFAULT string

func (p *TTopicRegistration) GetFilterPrefix() string {
	if !p.IsSetFilterPrefix() {
		return TTopicRegistration_FilterPrefix_DEFAULT
	}
	return *p.FilterPrefix
}
func (p *TTopicRegistration) IsSetFilterPrefix() bool {
	return p.FilterPrefix != nil
}

func (p *TTopicRegistration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTopicName bool = false
	var issetIsTransient bool = false
	var issetPopulateMinSubscriberTopicVersion bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetTopicName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetIsTransient = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetPopulateMinSubscriberTopicVersion = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTopicName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicName is not set"))
	}
	if !issetIsTransient {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsTransient is not set"))
	}
	if !issetPopulateMinSubscriberTopicVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PopulateMinSubscriberTopicVersion is not set"))
	}
	return nil
}

func (p *TTopicRegistration) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *TTopicRegistration) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsTransient = v
	}
	return nil
}

func (p *TTopicRegistration) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PopulateMinSubscriberTopicVersion = v
	}
	return nil
}

func (p *TTopicRegistration) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FilterPrefix = &v
	}
	return nil
}

func (p *TTopicRegistration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTopicRegistration"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTopicRegistration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic_name: ", p), err)
	}
	return err
}

func (p *TTopicRegistration) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_transient", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_transient: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsTransient)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_transient (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_transient: ", p), err)
	}
	return err
}

func (p *TTopicRegistration) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("populate_min_subscriber_topic_version", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:populate_min_subscriber_topic_version: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PopulateMinSubscriberTopicVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.populate_min_subscriber_topic_version (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:populate_min_subscriber_topic_version: ", p), err)
	}
	return err
}

func (p *TTopicRegistration) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterPrefix() {
		if err := oprot.WriteFieldBegin("filter_prefix", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter_prefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FilterPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.filter_prefix (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter_prefix: ", p), err)
		}
	}
	return err
}

func (p *TTopicRegistration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTopicRegistration(%+v)", *p)
}

// Attributes:
//   - ProtocolVersion
//   - SubscriberID
//   - SubscriberLocation
//   - TopicRegistrations
type TRegisterSubscriberRequest struct {
	ProtocolVersion    StatestoreServiceVersion `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
	SubscriberID       string                   `thrift:"subscriber_id,2,required" db:"subscriber_id" json:"subscriber_id"`
	SubscriberLocation *types.TNetworkAddress   `thrift:"subscriber_location,3,required" db:"subscriber_location" json:"subscriber_location"`
	TopicRegistrations []*TTopicRegistration    `thrift:"topic_registrations,4,required" db:"topic_registrations" json:"topic_registrations"`
}

func NewTRegisterSubscriberRequest() *TRegisterSubscriberRequest {
	return &TRegisterSubscriberRequest{
		ProtocolVersion: 0,
	}
}

func (p *TRegisterSubscriberRequest) GetProtocolVersion() StatestoreServiceVersion {
	return p.ProtocolVersion
}

func (p *TRegisterSubscriberRequest) GetSubscriberID() string {
	return p.SubscriberID
}

var TRegisterSubscriberRequest_SubscriberLocation_DEFAULT *types.TNetworkAddress

func (p *TRegisterSubscriberRequest) GetSubscriberLocation() *types.TNetworkAddress {
	if !p.IsSetSubscriberLocation() {
		return TRegisterSubscriberRequest_SubscriberLocation_DEFAULT
	}
	return p.SubscriberLocation
}

func (p *TRegisterSubscriberRequest) GetTopicRegistrations() []*TTopicRegistration {
	return p.TopicRegistrations
}
func (p *TRegisterSubscriberRequest) IsSetSubscriberLocation() bool {
	return p.SubscriberLocation != nil
}

func (p *TRegisterSubscriberRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetSubscriberID bool = false
	var issetSubscriberLocation bool = false
	var issetTopicRegistrations bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetProtocolVersion = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetSubscriberID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetSubscriberLocation = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetTopicRegistrations = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetSubscriberID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SubscriberID is not set"))
	}
	if !issetSubscriberLocation {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SubscriberLocation is not set"))
	}
	if !issetTopicRegistrations {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicRegistrations is not set"))
	}
	return nil
}

func (p *TRegisterSubscriberRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := StatestoreServiceVersion(v)
		p.ProtocolVersion = temp
	}
	return nil
}

func (p *TRegisterSubscriberRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubscriberID = v
	}
	return nil
}

func (p *TRegisterSubscriberRequest) ReadField3(iprot thrift.TProtocol) error {
	p.SubscriberLocation = &types.TNetworkAddress{}
	if err := p.SubscriberLocation.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SubscriberLocation), err)
	}
	return nil
}

func (p *TRegisterSubscriberRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTopicRegistration, 0, size)
	p.TopicRegistrations = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TTopicRegistration{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.TopicRegistrations = append(p.TopicRegistrations, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRegisterSubscriberRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRegisterSubscriberRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRegisterSubscriberRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TRegisterSubscriberRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subscriber_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:subscriber_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SubscriberID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subscriber_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:subscriber_id: ", p), err)
	}
	return err
}

func (p *TRegisterSubscriberRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subscriber_location", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subscriber_location: ", p), err)
	}
	if err := p.SubscriberLocation.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SubscriberLocation), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subscriber_location: ", p), err)
	}
	return err
}

func (p *TRegisterSubscriberRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic_registrations", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topic_registrations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicRegistrations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TopicRegistrations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topic_registrations: ", p), err)
	}
	return err
}

func (p *TRegisterSubscriberRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRegisterSubscriberRequest(%+v)", *p)
}

// Attributes:
//   - Status
//   - RegistrationID
type TRegisterSubscriberResponse struct {
	Status         *status.TStatus  `thrift:"status,1,required" db:"status" json:"status"`
	RegistrationID *types.TUniqueId `thrift:"registration_id,2" db:"registration_id" json:"registration_id,omitempty"`
}

func NewTRegisterSubscriberResponse() *TRegisterSubscriberResponse {
	return &TRegisterSubscriberResponse{}
}

var TRegisterSubscriberResponse_Status_DEFAULT *status.TStatus

func (p *TRegisterSubscriberResponse) GetStatus() *status.TStatus {
	if !p.IsSetStatus() {
		return TRegisterSubscriberResponse_Status_DEFAULT
	}
	return p.Status
}

var TRegisterSubscriberResponse_RegistrationID_DEFAULT *types.TUniqueId

func (p *TRegisterSubscriberResponse) GetRegistrationID() *types.TUniqueId {
	if !p.IsSetRegistrationID() {
		return TRegisterSubscriberResponse_RegistrationID_DEFAULT
	}
	return p.RegistrationID
}
func (p *TRegisterSubscriberResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TRegisterSubscriberResponse) IsSetRegistrationID() bool {
	return p.RegistrationID != nil
}

func (p *TRegisterSubscriberResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TRegisterSubscriberResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &status.TStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TRegisterSubscriberResponse) ReadField2(iprot thrift.TProtocol) error {
	p.RegistrationID = &types.TUniqueId{}
	if err := p.RegistrationID.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RegistrationID), err)
	}
	return nil
}

func (p *TRegisterSubscriberResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRegisterSubscriberResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRegisterSubscriberResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TRegisterSubscriberResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegistrationID() {
		if err := oprot.WriteFieldBegin("registration_id", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registration_id: ", p), err)
		}
		if err := p.RegistrationID.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RegistrationID), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registration_id: ", p), err)
		}
	}
	return err
}

func (p *TRegisterSubscriberResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRegisterSubscriberResponse(%+v)", *p)
}

// Attributes:
//   - ProtocolVersion
//   - TopicDeltas
//   - RegistrationID
type TUpdateStateRequest struct {
	ProtocolVersion StatestoreServiceVersion `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
	TopicDeltas     map[string]*TTopicDelta  `thrift:"topic_deltas,2,required" db:"topic_deltas" json:"topic_deltas"`
	RegistrationID  *types.TUniqueId         `thrift:"registration_id,3" db:"registration_id" json:"registration_id,omitempty"`
}

func NewTUpdateStateRequest() *TUpdateStateRequest {
	return &TUpdateStateRequest{
		ProtocolVersion: 0,
	}
}

func (p *TUpdateStateRequest) GetProtocolVersion() StatestoreServiceVersion {
	return p.ProtocolVersion
}

func (p *TUpdateStateRequest) GetTopicDeltas() map[string]*TTopicDelta {
	return p.TopicDeltas
}

var TUpdateStateRequest_RegistrationID_DEFAULT *types.TUniqueId

func (p *TUpdateStateRequest) GetRegistrationID() *types.TUniqueId {
	if !p.IsSetRegistrationID() {
		return TUpdateStateRequest_RegistrationID_DEFAULT
	}
	return p.RegistrationID
}
func (p *TUpdateStateRequest) IsSetRegistrationID() bool {
	return p.RegistrationID != nil
}

func (p *TUpdateStateRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetTopicDeltas bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetProtocolVersion = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetTopicDeltas = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetTopicDeltas {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicDeltas is not set"))
	}
	return nil
}

func (p *TUpdateStateRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := StatestoreServiceVersion(v)
		p.ProtocolVersion = temp
	}
	return nil
}

func (p *TUpdateStateRequest) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*TTopicDelta, size)
	p.TopicDeltas = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		_val5 := &TTopicDelta{}
		if err := _val5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val5), err)
		}
		p.TopicDeltas[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TUpdateStateRequest) ReadField3(iprot thrift.TProtocol) error {
	p.RegistrationID = &types.TUniqueId{}
	if err := p.RegistrationID.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RegistrationID), err)
	}
	return nil
}

func (p *TUpdateStateRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TUpdateStateRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TUpdateStateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TUpdateStateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic_deltas", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topic_deltas: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.TopicDeltas)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.TopicDeltas {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topic_deltas: ", p), err)
	}
	return err
}

func (p *TUpdateStateRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegistrationID() {
		if err := oprot.WriteFieldBegin("registration_id", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:registration_id: ", p), err)
		}
		if err := p.RegistrationID.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RegistrationID), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:registration_id: ", p), err)
		}
	}
	return err
}

func (p *TUpdateStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUpdateStateRequest(%+v)", *p)
}

// Attributes:
//   - Status
//   - TopicUpdates
//   - Skipped
type TUpdateStateResponse struct {
	Status       *status.TStatus `thrift:"status,1,required" db:"status" json:"status"`
	TopicUpdates []*TTopicDelta  `thrift:"topic_updates,2,required" db:"topic_updates" json:"topic_updates"`
	Skipped      *bool           `thrift:"skipped,3" db:"skipped" json:"skipped,omitempty"`
}

func NewTUpdateStateResponse() *TUpdateStateResponse {
	return &TUpdateStateResponse{}
}

var TUpdateStateResponse_Status_DEFAULT *status.TStatus

func (p *TUpdateStateResponse) GetStatus() *status.TStatus {
	if !p.IsSetStatus() {
		return TUpdateStateResponse_Status_DEFAULT
	}
	return p.Status
}

func (p *TUpdateStateResponse) GetTopicUpdates() []*TTopicDelta {
	return p.TopicUpdates
}

var TUpdateStateResponse_Skipped_DEFAULT bool

func (p *TUpdateStateResponse) GetSkipped() bool {
	if !p.IsSetSkipped() {
		return TUpdateStateResponse_Skipped_DEFAULT
	}
	return *p.Skipped
}
func (p *TUpdateStateResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TUpdateStateResponse) IsSetSkipped() bool {
	return p.Skipped != nil
}

func (p *TUpdateStateResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetTopicUpdates bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetTopicUpdates = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetTopicUpdates {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicUpdates is not set"))
	}
	return nil
}

func (p *TUpdateStateResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &status.TStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TUpdateStateResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTopicDelta, 0, size)
	p.TopicUpdates = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &TTopicDelta{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.TopicUpdates = append(p.TopicUpdates, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TUpdateStateResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Skipped = &v
	}
	return nil
}

func (p *TUpdateStateResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TUpdateStateResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TUpdateStateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TUpdateStateResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic_updates", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topic_updates: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicUpdates)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TopicUpdates {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topic_updates: ", p), err)
	}
	return err
}

func (p *TUpdateStateResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipped() {
		if err := oprot.WriteFieldBegin("skipped", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:skipped: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Skipped)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.skipped (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:skipped: ", p), err)
		}
	}
	return err
}

func (p *TUpdateStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUpdateStateResponse(%+v)", *p)
}

// Attributes:
//   - RegistrationID
type THeartbeatRequest struct {
	RegistrationID *types.TUniqueId `thrift:"registration_id,1" db:"registration_id" json:"registration_id,omitempty"`
}

func NewTHeartbeatRequest() *THeartbeatRequest {
	return &THeartbeatRequest{}
}

var THeartbeatRequest_RegistrationID_DEFAULT *types.TUniqueId

func (p *THeartbeatRequest) GetRegistrationID() *types.TUniqueId {
	if !p.IsSetRegistrationID() {
		return THeartbeatRequest_RegistrationID_DEFAULT
	}
	return p.RegistrationID
}
func (p *THeartbeatRequest) IsSetRegistrationID() bool {
	return p.RegistrationID != nil
}

func (p *THeartbeatRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *THeartbeatRequest) ReadField1(iprot thrift.TProtocol) error {
	p.RegistrationID = &types.TUniqueId{}
	if err := p.RegistrationID.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RegistrationID), err)
	}
	return nil
}

func (p *THeartbeatRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THeartbeatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *THeartbeatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegistrationID() {
		if err := oprot.WriteFieldBegin("registration_id", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:registration_id: ", p), err)
		}
		if err := p.RegistrationID.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RegistrationID), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:registration_id: ", p), err)
		}
	}
	return err
}

func (p *THeartbeatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THeartbeatRequest(%+v)", *p)
}

type THeartbeatResponse struct {
}

func NewTHeartbeatResponse() *THeartbeatResponse {
	return &THeartbeatResponse{}
}

func (p *THeartbeatResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *THeartbeatResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THeartbeatResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *THeartbeatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THeartbeatResponse(%+v)", *p)
}

type StatestoreService interface {
	// Parameters:
	//  - Params
	RegisterSubscriber(ctx context.Context, params *TRegisterSubscriberRequest) (r *TRegisterSubscriberResponse, err error)
}

type StatestoreServiceClient struct {
	c thrift.TClient
}

func NewStatestoreServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StatestoreServiceClient {
	return &StatestoreServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewStatestoreServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StatestoreServiceClient {
	return &StatestoreServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewStatestoreServiceClient(c thrift.TClient) *StatestoreServiceClient {
	return &StatestoreServiceClient{
		c: c,
	}
}

func (p *StatestoreServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//   - Params
func (p *StatestoreServiceClient) RegisterSubscriber(ctx context.Context, params *TRegisterSubscriberRequest) (r *TRegisterSubscriberResponse, err error) {
	var _args7 StatestoreServiceRegisterSubscriberArgs
	_args7.Params = params
	var _result8 StatestoreServiceRegisterSubscriberResult
	if err = p.Client_().Call(ctx, "RegisterSubscriber", &_args7, &_result8); err != nil {
		return
	}
	return _result8.GetSuccess(), nil
}

type StatestoreServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      StatestoreService
}

func (p *StatestoreServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *StatestoreServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *StatestoreServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewStatestoreServiceProcessor(handler StatestoreService) *StatestoreServiceProcessor {

	self9 := &StatestoreServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self9.processorMap["RegisterSubscriber"] = &statestoreServiceProcessorRegisterSubscriber{handler: handler}
	return self9
}

func (p *StatestoreServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x10.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x10

}

type statestoreServiceProcessorRegisterSubscriber struct {
	handler StatestoreService
}

func (p *statestoreServiceProcessorRegisterSubscriber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StatestoreServiceRegisterSubscriberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RegisterSubscriber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StatestoreServiceRegisterSubscriberResult{}
	var retval *TRegisterSubscriberResponse
	var err2 error
	if retval, err2 = p.handler.RegisterSubscriber(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterSubscriber: "+err2.Error())
		oprot.WriteMessageBegin("RegisterSubscriber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RegisterSubscriber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Params
type StatestoreServiceRegisterSubscriberArgs struct {
	Params *TRegisterSubscriberRequest `thrift:"params,1" db:"params" json:"params"`
}

func NewStatestoreServiceRegisterSubscriberArgs() *StatestoreServiceRegisterSubscriberArgs {
	return &StatestoreServiceRegisterSubscriberArgs{}
}

var StatestoreServiceRegisterSubscriberArgs_Params_DEFAULT *TRegisterSubscriberRequest

func (p *StatestoreServiceRegisterSubscriberArgs) GetParams() *TRegisterSubscriberRequest {
	if !p.IsSetParams() {
		return StatestoreServiceRegisterSubscriberArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *StatestoreServiceRegisterSubscriberArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *StatestoreServiceRegisterSubscriberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatestoreServiceRegisterSubscriberArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = &TRegisterSubscriberRequest{
		ProtocolVersion: 0,
	}
	if err := p.Params.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
	}
	return nil
}

func (p *StatestoreServiceRegisterSubscriberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterSubscriber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatestoreServiceRegisterSubscriberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err)
	}
	if err := p.Params.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err)
	}
	return err
}

func (p *StatestoreServiceRegisterSubscriberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatestoreServiceRegisterSubscriberArgs(%+v)", *p)
}

// Attributes:
//   - Success
type StatestoreServiceRegisterSubscriberResult struct {
	Success *TRegisterSubscriberResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStatestoreServiceRegisterSubscriberResult() *StatestoreServiceRegisterSubscriberResult {
	return &StatestoreServiceRegisterSubscriberResult{}
}

var StatestoreServiceRegisterSubscriberResult_Success_DEFAULT *TRegisterSubscriberResponse

func (p *StatestoreServiceRegisterSubscriberResult) GetSuccess() *TRegisterSubscriberResponse {
	if !p.IsSetSuccess() {
		return StatestoreServiceRegisterSubscriberResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StatestoreServiceRegisterSubscriberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StatestoreServiceRegisterSubscriberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatestoreServiceRegisterSubscriberResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TRegisterSubscriberResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StatestoreServiceRegisterSubscriberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterSubscriber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatestoreServiceRegisterSubscriberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StatestoreServiceRegisterSubscriberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatestoreServiceRegisterSubscriberResult(%+v)", *p)
}

type StatestoreSubscriber interface {
	// Parameters:
	//  - Params
	UpdateState(ctx context.Context, params *TUpdateStateRequest) (r *TUpdateStateResponse, err error)
	// Parameters:
	//  - Params
	Heartbeat(ctx context.Context, params *THeartbeatRequest) (r *THeartbeatResponse, err error)
}

type StatestoreSubscriberClient struct {
	c thrift.TClient
}

func NewStatestoreSubscriberClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StatestoreSubscriberClient {
	return &StatestoreSubscriberClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewStatestoreSubscriberClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StatestoreSubscriberClient {
	return &StatestoreSubscriberClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewStatestoreSubscriberClient(c thrift.TClient) *StatestoreSubscriberClient {
	return &StatestoreSubscriberClient{
		c: c,
	}
}

func (p *StatestoreSubscriberClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//   - Params
func (p *StatestoreSubscriberClient) UpdateState(ctx context.Context, params *TUpdateStateRequest) (r *TUpdateStateResponse, err error) {
	var _args17 StatestoreSubscriberUpdateStateArgs
	_args17.Params = params
	var _result18 StatestoreSubscriberUpdateStateResult
	if err = p.Client_().Call(ctx, "UpdateState", &_args17, &_result18); err != nil {
		return
	}
	return _result18.GetSuccess(), nil
}

// Parameters:
//   - Params
func (p *StatestoreSubscriberClient) Heartbeat(ctx context.Context, params *THeartbeatRequest) (r *THeartbeatResponse, err error) {
	var _args19 StatestoreSubscriberHeartbeatArgs
	_args19.Params = params
	var _result20 StatestoreSubscriberHeartbeatResult
	if err = p.Client_().Call(ctx, "Heartbeat", &_args19, &_result20); err != nil {
		return
	}
	return _result20.GetSuccess(), nil
}

type StatestoreSubscriberProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      StatestoreSubscriber
}

func (p *StatestoreSubscriberProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *StatestoreSubscriberProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *StatestoreSubscriberProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewStatestoreSubscriberProcessor(handler StatestoreSubscriber) *StatestoreSubscriberProcessor {

	self21 := &StatestoreSubscriberProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self21.processorMap["UpdateState"] = &statestoreSubscriberProcessorUpdateState{handler: handler}
	self21.processorMap["Heartbeat"] = &statestoreSubscriberProcessorHeartbeat{handler: handler}
	return self21
}

func (p *StatestoreSubscriberProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x22 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x22.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x22

}

type statestoreSubscriberProcessorUpdateState struct {
	handler StatestoreSubscriber
}

func (p *statestoreSubscriberProcessorUpdateState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StatestoreSubscriberUpdateStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StatestoreSubscriberUpdateStateResult{}
	var retval *TUpdateStateResponse
	var err2 error
	if retval, err2 = p.handler.UpdateState(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateState: "+err2.Error())
		oprot.WriteMessageBegin("UpdateState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statestoreSubscriberProcessorHeartbeat struct {
	handler StatestoreSubscriber
}

func (p *statestoreSubscriberProcessorHeartbeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StatestoreSubscriberHeartbeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Heartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StatestoreSubscriberHeartbeatResult{}
	var retval *THeartbeatResponse
	var err2 error
	if retval, err2 = p.handler.Heartbeat(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Heartbeat: "+err2.Error())
		oprot.WriteMessageBegin("Heartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Heartbeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Params
type StatestoreSubscriberUpdateStateArgs struct {
	Params *TUpdateStateRequest `thrift:"params,1" db:"params" json:"params"`
}

func NewStatestoreSubscriberUpdateStateArgs() *StatestoreSubscriberUpdateStateArgs {
	return &StatestoreSubscriberUpdateStateArgs{}
}

var StatestoreSubscriberUpdateStateArgs_Params_DEFAULT *TUpdateStateRequest

func (p *StatestoreSubscriberUpdateStateArgs) GetParams() *TUpdateStateRequest {
	if !p.IsSetParams() {
		return StatestoreSubscriberUpdateStateArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *StatestoreSubscriberUpdateStateArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *StatestoreSubscriberUpdateStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatestoreSubscriberUpdateStateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = &TUpdateStateRequest{
		ProtocolVersion: 0,
	}
	if err := p.Params.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
	}
	return nil
}

func (p *StatestoreSubscriberUpdateStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateState_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatestoreSubscriberUpdateStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err)
	}
	if err := p.Params.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err)
	}
	return err
}

func (p *StatestoreSubscriberUpdateStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatestoreSubscriberUpdateStateArgs(%+v)", *p)
}

// Attributes:
//   - Success
type StatestoreSubscriberUpdateStateResult struct {
	Success *TUpdateStateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStatestoreSubscriberUpdateStateResult() *StatestoreSubscriberUpdateStateResult {
	return &StatestoreSubscriberUpdateStateResult{}
}

var StatestoreSubscriberUpdateStateResult_Success_DEFAULT *TUpdateStateResponse

func (p *StatestoreSubscriberUpdateStateResult) GetSuccess() *TUpdateStateResponse {
	if !p.IsSetSuccess() {
		return StatestoreSubscriberUpdateStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StatestoreSubscriberUpdateStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StatestoreSubscriberUpdateStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatestoreSubscriberUpdateStateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TUpdateStateResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StatestoreSubscriberUpdateStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateState_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatestoreSubscriberUpdateStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StatestoreSubscriberUpdateStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatestoreSubscriberUpdateStateResult(%+v)", *p)
}

// Attributes:
//   - Params
type StatestoreSubscriberHeartbeatArgs struct {
	Params *THeartbeatRequest `thrift:"params,1" db:"params" json:"params"`
}

func NewStatestoreSubscriberHeartbeatArgs() *StatestoreSubscriberHeartbeatArgs {
	return &StatestoreSubscriberHeartbeatArgs{}
}

var StatestoreSubscriberHeartbeatArgs_Params_DEFAULT *THeartbeatRequest

func (p *StatestoreSubscriberHeartbeatArgs) GetParams() *THeartbeatRequest {
	if !p.IsSetParams() {
		return StatestoreSubscriberHeartbeatArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *StatestoreSubscriberHeartbeatArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *StatestoreSubscriberHeartbeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatestoreSubscriberHeartbeatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = &THeartbeatRequest{}
	if err := p.Params.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
	}
	return nil
}

func (p *StatestoreSubscriberHeartbeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Heartbeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatestoreSubscriberHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err)
	}
	if err := p.Params.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err)
	}
	return err
}

func (p *StatestoreSubscriberHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatestoreSubscriberHeartbeatArgs(%+v)", *p)
}

// Attributes:
//   - Success
type StatestoreSubscriberHeartbeatResult struct {
	Success *THeartbeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStatestoreSubscriberHeartbeatResult() *StatestoreSubscriberHeartbeatResult {
	return &StatestoreSubscriberHeartbeatResult{}
}

var StatestoreSubscriberHeartbeatResult_Success_DEFAULT *THeartbeatResponse

func (p *StatestoreSubscriberHeartbeatResult) GetSuccess() *THeartbeatResponse {
	if !p.IsSetSuccess() {
		return StatestoreSubscriberHeartbeatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StatestoreSubscriberHeartbeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StatestoreSubscriberHeartbeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatestoreSubscriberHeartbeatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &THeartbeatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *StatestoreSubscriberHeartbeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Heartbeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatestoreSubscriberHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *StatestoreSubscriberHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatestoreSubscriberHeartbeatResult(%+v)", *p)
}
