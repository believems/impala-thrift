// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package logging

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type TLogLevel int64

const (
	TLogLevel_VLOG_3 TLogLevel = 0
	TLogLevel_VLOG_2 TLogLevel = 1
	TLogLevel_VLOG   TLogLevel = 2
	TLogLevel_INFO   TLogLevel = 3
	TLogLevel_WARN   TLogLevel = 4
	TLogLevel_ERROR  TLogLevel = 5
	TLogLevel_FATAL  TLogLevel = 6
)

func (p TLogLevel) String() string {
	switch p {
	case TLogLevel_VLOG_3:
		return "VLOG_3"
	case TLogLevel_VLOG_2:
		return "VLOG_2"
	case TLogLevel_VLOG:
		return "VLOG"
	case TLogLevel_INFO:
		return "INFO"
	case TLogLevel_WARN:
		return "WARN"
	case TLogLevel_ERROR:
		return "ERROR"
	case TLogLevel_FATAL:
		return "FATAL"
	}
	return "<UNSET>"
}

func TLogLevelFromString(s string) (TLogLevel, error) {
	switch s {
	case "VLOG_3":
		return TLogLevel_VLOG_3, nil
	case "VLOG_2":
		return TLogLevel_VLOG_2, nil
	case "VLOG":
		return TLogLevel_VLOG, nil
	case "INFO":
		return TLogLevel_INFO, nil
	case "WARN":
		return TLogLevel_WARN, nil
	case "ERROR":
		return TLogLevel_ERROR, nil
	case "FATAL":
		return TLogLevel_FATAL, nil
	}
	return TLogLevel(0), fmt.Errorf("not a valid TLogLevel string")
}

func TLogLevelPtr(v TLogLevel) *TLogLevel { return &v }

func (p TLogLevel) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TLogLevel) UnmarshalText(text []byte) error {
	q, err := TLogLevelFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TLogLevel) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TLogLevel(v)
	return nil
}

func (p *TLogLevel) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - ClassName
//   - LogLevel
type TSetJavaLogLevelParams struct {
	ClassName string `thrift:"class_name,1,required" db:"class_name" json:"class_name"`
	LogLevel  string `thrift:"log_level,2,required" db:"log_level" json:"log_level"`
}

func NewTSetJavaLogLevelParams() *TSetJavaLogLevelParams {
	return &TSetJavaLogLevelParams{}
}

func (p *TSetJavaLogLevelParams) GetClassName() string {
	return p.ClassName
}

func (p *TSetJavaLogLevelParams) GetLogLevel() string {
	return p.LogLevel
}
func (p *TSetJavaLogLevelParams) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetClassName bool = false
	var issetLogLevel bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetClassName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetLogLevel = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetClassName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClassName is not set"))
	}
	if !issetLogLevel {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LogLevel is not set"))
	}
	return nil
}

func (p *TSetJavaLogLevelParams) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *TSetJavaLogLevelParams) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LogLevel = v
	}
	return nil
}

func (p *TSetJavaLogLevelParams) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TSetJavaLogLevelParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSetJavaLogLevelParams) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "class_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:class_name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.class_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:class_name: ", p), err)
	}
	return err
}

func (p *TSetJavaLogLevelParams) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "log_level", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:log_level: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.LogLevel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_level (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:log_level: ", p), err)
	}
	return err
}

func (p *TSetJavaLogLevelParams) Equals(other *TSetJavaLogLevelParams) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ClassName != other.ClassName {
		return false
	}
	if p.LogLevel != other.LogLevel {
		return false
	}
	return true
}

func (p *TSetJavaLogLevelParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSetJavaLogLevelParams(%+v)", *p)
}

// Attributes:
//   - LogLevels
type TGetJavaLogLevelsResult_ struct {
	LogLevels []string `thrift:"log_levels,1,required" db:"log_levels" json:"log_levels"`
}

func NewTGetJavaLogLevelsResult_() *TGetJavaLogLevelsResult_ {
	return &TGetJavaLogLevelsResult_{}
}

func (p *TGetJavaLogLevelsResult_) GetLogLevels() []string {
	return p.LogLevels
}
func (p *TGetJavaLogLevelsResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetLogLevels bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetLogLevels = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetLogLevels {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LogLevels is not set"))
	}
	return nil
}

func (p *TGetJavaLogLevelsResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.LogLevels = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.LogLevels = append(p.LogLevels, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TGetJavaLogLevelsResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TGetJavaLogLevelsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGetJavaLogLevelsResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "log_levels", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:log_levels: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.LogLevels)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LogLevels {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:log_levels: ", p), err)
	}
	return err
}

func (p *TGetJavaLogLevelsResult_) Equals(other *TGetJavaLogLevelsResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.LogLevels) != len(other.LogLevels) {
		return false
	}
	for i, _tgt := range p.LogLevels {
		_src1 := other.LogLevels[i]
		if _tgt != _src1 {
			return false
		}
	}
	return true
}

func (p *TGetJavaLogLevelsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetJavaLogLevelsResult_(%+v)", *p)
}
