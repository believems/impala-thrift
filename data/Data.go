// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package data

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - BoolVal
//  - ByteVal
//  - ShortVal
//  - IntVal
//  - LongVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
//  - TimestampVal
//  - DecimalVal
//  - DateVal
type TColumnValue struct {
  BoolVal *bool `thrift:"bool_val,1" db:"bool_val" json:"bool_val,omitempty"`
  IntVal *int32 `thrift:"int_val,2" db:"int_val" json:"int_val,omitempty"`
  LongVal *int64 `thrift:"long_val,3" db:"long_val" json:"long_val,omitempty"`
  DoubleVal *float64 `thrift:"double_val,4" db:"double_val" json:"double_val,omitempty"`
  StringVal *string `thrift:"string_val,5" db:"string_val" json:"string_val,omitempty"`
  ByteVal *int8 `thrift:"byte_val,6" db:"byte_val" json:"byte_val,omitempty"`
  ShortVal *int16 `thrift:"short_val,7" db:"short_val" json:"short_val,omitempty"`
  BinaryVal []byte `thrift:"binary_val,8" db:"binary_val" json:"binary_val,omitempty"`
  TimestampVal []byte `thrift:"timestamp_val,9" db:"timestamp_val" json:"timestamp_val,omitempty"`
  DecimalVal []byte `thrift:"decimal_val,10" db:"decimal_val" json:"decimal_val,omitempty"`
  DateVal *int32 `thrift:"date_val,11" db:"date_val" json:"date_val,omitempty"`
}

func NewTColumnValue() *TColumnValue {
  return &TColumnValue{}
}

var TColumnValue_BoolVal_DEFAULT bool
func (p *TColumnValue) GetBoolVal() bool {
  if !p.IsSetBoolVal() {
    return TColumnValue_BoolVal_DEFAULT
  }
return *p.BoolVal
}
var TColumnValue_ByteVal_DEFAULT int8
func (p *TColumnValue) GetByteVal() int8 {
  if !p.IsSetByteVal() {
    return TColumnValue_ByteVal_DEFAULT
  }
return *p.ByteVal
}
var TColumnValue_ShortVal_DEFAULT int16
func (p *TColumnValue) GetShortVal() int16 {
  if !p.IsSetShortVal() {
    return TColumnValue_ShortVal_DEFAULT
  }
return *p.ShortVal
}
var TColumnValue_IntVal_DEFAULT int32
func (p *TColumnValue) GetIntVal() int32 {
  if !p.IsSetIntVal() {
    return TColumnValue_IntVal_DEFAULT
  }
return *p.IntVal
}
var TColumnValue_LongVal_DEFAULT int64
func (p *TColumnValue) GetLongVal() int64 {
  if !p.IsSetLongVal() {
    return TColumnValue_LongVal_DEFAULT
  }
return *p.LongVal
}
var TColumnValue_DoubleVal_DEFAULT float64
func (p *TColumnValue) GetDoubleVal() float64 {
  if !p.IsSetDoubleVal() {
    return TColumnValue_DoubleVal_DEFAULT
  }
return *p.DoubleVal
}
var TColumnValue_StringVal_DEFAULT string
func (p *TColumnValue) GetStringVal() string {
  if !p.IsSetStringVal() {
    return TColumnValue_StringVal_DEFAULT
  }
return *p.StringVal
}
var TColumnValue_BinaryVal_DEFAULT []byte

func (p *TColumnValue) GetBinaryVal() []byte {
  return p.BinaryVal
}
var TColumnValue_TimestampVal_DEFAULT []byte

func (p *TColumnValue) GetTimestampVal() []byte {
  return p.TimestampVal
}
var TColumnValue_DecimalVal_DEFAULT []byte

func (p *TColumnValue) GetDecimalVal() []byte {
  return p.DecimalVal
}
var TColumnValue_DateVal_DEFAULT int32
func (p *TColumnValue) GetDateVal() int32 {
  if !p.IsSetDateVal() {
    return TColumnValue_DateVal_DEFAULT
  }
return *p.DateVal
}
func (p *TColumnValue) IsSetBoolVal() bool {
  return p.BoolVal != nil
}

func (p *TColumnValue) IsSetByteVal() bool {
  return p.ByteVal != nil
}

func (p *TColumnValue) IsSetShortVal() bool {
  return p.ShortVal != nil
}

func (p *TColumnValue) IsSetIntVal() bool {
  return p.IntVal != nil
}

func (p *TColumnValue) IsSetLongVal() bool {
  return p.LongVal != nil
}

func (p *TColumnValue) IsSetDoubleVal() bool {
  return p.DoubleVal != nil
}

func (p *TColumnValue) IsSetStringVal() bool {
  return p.StringVal != nil
}

func (p *TColumnValue) IsSetBinaryVal() bool {
  return p.BinaryVal != nil
}

func (p *TColumnValue) IsSetTimestampVal() bool {
  return p.TimestampVal != nil
}

func (p *TColumnValue) IsSetDecimalVal() bool {
  return p.DecimalVal != nil
}

func (p *TColumnValue) IsSetDateVal() bool {
  return p.DateVal != nil
}

func (p *TColumnValue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumnValue)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BoolVal = &v
}
  return nil
}

func (p *TColumnValue)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := int8(v)
  p.ByteVal = &temp
}
  return nil
}

func (p *TColumnValue)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ShortVal = &v
}
  return nil
}

func (p *TColumnValue)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IntVal = &v
}
  return nil
}

func (p *TColumnValue)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LongVal = &v
}
  return nil
}

func (p *TColumnValue)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DoubleVal = &v
}
  return nil
}

func (p *TColumnValue)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StringVal = &v
}
  return nil
}

func (p *TColumnValue)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.BinaryVal = v
}
  return nil
}

func (p *TColumnValue)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TimestampVal = v
}
  return nil
}

func (p *TColumnValue)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DecimalVal = v
}
  return nil
}

func (p *TColumnValue)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DateVal = &v
}
  return nil
}

func (p *TColumnValue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnValue) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBoolVal() {
    if err := oprot.WriteFieldBegin("bool_val", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bool_val: ", p), err) }
    if err := oprot.WriteBool(bool(*p.BoolVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bool_val (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bool_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntVal() {
    if err := oprot.WriteFieldBegin("int_val", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int_val: ", p), err) }
    if err := oprot.WriteI32(int32(*p.IntVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.int_val (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongVal() {
    if err := oprot.WriteFieldBegin("long_val", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:long_val: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LongVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.long_val (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:long_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleVal() {
    if err := oprot.WriteFieldBegin("double_val", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:double_val: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DoubleVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.double_val (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:double_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringVal() {
    if err := oprot.WriteFieldBegin("string_val", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:string_val: ", p), err) }
    if err := oprot.WriteString(string(*p.StringVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.string_val (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:string_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetByteVal() {
    if err := oprot.WriteFieldBegin("byte_val", thrift.BYTE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:byte_val: ", p), err) }
    if err := oprot.WriteByte(int8(*p.ByteVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.byte_val (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:byte_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetShortVal() {
    if err := oprot.WriteFieldBegin("short_val", thrift.I16, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:short_val: ", p), err) }
    if err := oprot.WriteI16(int16(*p.ShortVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.short_val (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:short_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetBinaryVal() {
    if err := oprot.WriteFieldBegin("binary_val", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:binary_val: ", p), err) }
    if err := oprot.WriteBinary(p.BinaryVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.binary_val (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:binary_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestampVal() {
    if err := oprot.WriteFieldBegin("timestamp_val", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:timestamp_val: ", p), err) }
    if err := oprot.WriteBinary(p.TimestampVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp_val (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:timestamp_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecimalVal() {
    if err := oprot.WriteFieldBegin("decimal_val", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:decimal_val: ", p), err) }
    if err := oprot.WriteBinary(p.DecimalVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decimal_val (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:decimal_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateVal() {
    if err := oprot.WriteFieldBegin("date_val", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:date_val: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DateVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.date_val (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:date_val: ", p), err) }
  }
  return err
}

func (p *TColumnValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnValue(%+v)", *p)
}

// Attributes:
//  - ColVals
type TResultRow struct {
  ColVals []*TColumnValue `thrift:"colVals,1" db:"colVals" json:"colVals"`
}

func NewTResultRow() *TResultRow {
  return &TResultRow{}
}


func (p *TResultRow) GetColVals() []*TColumnValue {
  return p.ColVals
}
func (p *TResultRow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TResultRow)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumnValue, 0, size)
  p.ColVals =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TColumnValue{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ColVals = append(p.ColVals, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TResultRow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TResultRow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TResultRow) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("colVals", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colVals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColVals {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colVals: ", p), err) }
  return err
}

func (p *TResultRow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TResultRow(%+v)", *p)
}

// Attributes:
//  - IsNull
//  - BoolVals
//  - ByteVals
//  - ShortVals
//  - IntVals
//  - LongVals
//  - DoubleVals
//  - StringVals
//  - BinaryVals
type TColumnData struct {
  IsNull []bool `thrift:"is_null,1,required" db:"is_null" json:"is_null"`
  BoolVals []bool `thrift:"bool_vals,2" db:"bool_vals" json:"bool_vals,omitempty"`
  ByteVals []int8 `thrift:"byte_vals,3" db:"byte_vals" json:"byte_vals,omitempty"`
  ShortVals []int16 `thrift:"short_vals,4" db:"short_vals" json:"short_vals,omitempty"`
  IntVals []int32 `thrift:"int_vals,5" db:"int_vals" json:"int_vals,omitempty"`
  LongVals []int64 `thrift:"long_vals,6" db:"long_vals" json:"long_vals,omitempty"`
  DoubleVals []float64 `thrift:"double_vals,7" db:"double_vals" json:"double_vals,omitempty"`
  StringVals []string `thrift:"string_vals,8" db:"string_vals" json:"string_vals,omitempty"`
  BinaryVals [][]byte `thrift:"binary_vals,9" db:"binary_vals" json:"binary_vals,omitempty"`
}

func NewTColumnData() *TColumnData {
  return &TColumnData{}
}


func (p *TColumnData) GetIsNull() []bool {
  return p.IsNull
}
var TColumnData_BoolVals_DEFAULT []bool

func (p *TColumnData) GetBoolVals() []bool {
  return p.BoolVals
}
var TColumnData_ByteVals_DEFAULT []int8

func (p *TColumnData) GetByteVals() []int8 {
  return p.ByteVals
}
var TColumnData_ShortVals_DEFAULT []int16

func (p *TColumnData) GetShortVals() []int16 {
  return p.ShortVals
}
var TColumnData_IntVals_DEFAULT []int32

func (p *TColumnData) GetIntVals() []int32 {
  return p.IntVals
}
var TColumnData_LongVals_DEFAULT []int64

func (p *TColumnData) GetLongVals() []int64 {
  return p.LongVals
}
var TColumnData_DoubleVals_DEFAULT []float64

func (p *TColumnData) GetDoubleVals() []float64 {
  return p.DoubleVals
}
var TColumnData_StringVals_DEFAULT []string

func (p *TColumnData) GetStringVals() []string {
  return p.StringVals
}
var TColumnData_BinaryVals_DEFAULT [][]byte

func (p *TColumnData) GetBinaryVals() [][]byte {
  return p.BinaryVals
}
func (p *TColumnData) IsSetBoolVals() bool {
  return p.BoolVals != nil
}

func (p *TColumnData) IsSetByteVals() bool {
  return p.ByteVals != nil
}

func (p *TColumnData) IsSetShortVals() bool {
  return p.ShortVals != nil
}

func (p *TColumnData) IsSetIntVals() bool {
  return p.IntVals != nil
}

func (p *TColumnData) IsSetLongVals() bool {
  return p.LongVals != nil
}

func (p *TColumnData) IsSetDoubleVals() bool {
  return p.DoubleVals != nil
}

func (p *TColumnData) IsSetStringVals() bool {
  return p.StringVals != nil
}

func (p *TColumnData) IsSetBinaryVals() bool {
  return p.BinaryVals != nil
}

func (p *TColumnData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsNull bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetIsNull = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsNull{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsNull is not set"));
  }
  return nil
}

func (p *TColumnData)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.IsNull =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.IsNull = append(p.IsNull, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.BoolVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.BoolVals = append(p.BoolVals, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.ByteVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int8
    if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem3 = temp
}
    p.ByteVals = append(p.ByteVals, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.ShortVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int16
    if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.ShortVals = append(p.ShortVals, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.IntVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.IntVals = append(p.IntVals, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.LongVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.LongVals = append(p.LongVals, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.DoubleVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.DoubleVals = append(p.DoubleVals, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StringVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.StringVals = append(p.StringVals, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.BinaryVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.BinaryVals = append(p.BinaryVals, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_null", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_null: ", p), err) }
  if err := oprot.WriteListBegin(thrift.BOOL, len(p.IsNull)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.IsNull {
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_null: ", p), err) }
  return err
}

func (p *TColumnData) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBoolVals() {
    if err := oprot.WriteFieldBegin("bool_vals", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bool_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.BoolVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BoolVals {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bool_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetByteVals() {
    if err := oprot.WriteFieldBegin("byte_vals", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:byte_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BYTE, len(p.ByteVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ByteVals {
      if err := oprot.WriteByte(int8(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:byte_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShortVals() {
    if err := oprot.WriteFieldBegin("short_vals", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:short_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.ShortVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ShortVals {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:short_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntVals() {
    if err := oprot.WriteFieldBegin("int_vals", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:int_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.IntVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.IntVals {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:int_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongVals() {
    if err := oprot.WriteFieldBegin("long_vals", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:long_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.LongVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LongVals {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:long_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleVals() {
    if err := oprot.WriteFieldBegin("double_vals", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:double_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.DoubleVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DoubleVals {
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:double_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringVals() {
    if err := oprot.WriteFieldBegin("string_vals", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:string_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.StringVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StringVals {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:string_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetBinaryVals() {
    if err := oprot.WriteFieldBegin("binary_vals", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binary_vals: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.BinaryVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BinaryVals {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binary_vals: ", p), err) }
  }
  return err
}

func (p *TColumnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnData(%+v)", *p)
}

