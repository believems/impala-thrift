// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package externaldatasource

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/believems/impala-thrift/data"
	"github.com/believems/impala-thrift/status"
	"github.com/believems/impala-thrift/types"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = status.GoUnusedProtection__
var _ = data.GoUnusedProtection__
var _ = types.GoUnusedProtection__

type TComparisonOp int64

const (
	TComparisonOp_LT            TComparisonOp = 0
	TComparisonOp_LE            TComparisonOp = 1
	TComparisonOp_EQ            TComparisonOp = 2
	TComparisonOp_NE            TComparisonOp = 3
	TComparisonOp_GE            TComparisonOp = 4
	TComparisonOp_GT            TComparisonOp = 5
	TComparisonOp_DISTINCT_FROM TComparisonOp = 6
	TComparisonOp_NOT_DISTINCT  TComparisonOp = 7
)

func (p TComparisonOp) String() string {
	switch p {
	case TComparisonOp_LT:
		return "LT"
	case TComparisonOp_LE:
		return "LE"
	case TComparisonOp_EQ:
		return "EQ"
	case TComparisonOp_NE:
		return "NE"
	case TComparisonOp_GE:
		return "GE"
	case TComparisonOp_GT:
		return "GT"
	case TComparisonOp_DISTINCT_FROM:
		return "DISTINCT_FROM"
	case TComparisonOp_NOT_DISTINCT:
		return "NOT_DISTINCT"
	}
	return "<UNSET>"
}

func TComparisonOpFromString(s string) (TComparisonOp, error) {
	switch s {
	case "LT":
		return TComparisonOp_LT, nil
	case "LE":
		return TComparisonOp_LE, nil
	case "EQ":
		return TComparisonOp_EQ, nil
	case "NE":
		return TComparisonOp_NE, nil
	case "GE":
		return TComparisonOp_GE, nil
	case "GT":
		return TComparisonOp_GT, nil
	case "DISTINCT_FROM":
		return TComparisonOp_DISTINCT_FROM, nil
	case "NOT_DISTINCT":
		return TComparisonOp_NOT_DISTINCT, nil
	}
	return TComparisonOp(0), fmt.Errorf("not a valid TComparisonOp string")
}

func TComparisonOpPtr(v TComparisonOp) *TComparisonOp { return &v }

func (p TComparisonOp) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TComparisonOp) UnmarshalText(text []byte) error {
	q, err := TComparisonOpFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TComparisonOp) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TComparisonOp(v)
	return nil
}

func (p *TComparisonOp) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - Name
//   - Type
type TColumnDesc struct {
	Name *string            `thrift:"name,1" db:"name" json:"name,omitempty"`
	Type *types.TColumnType `thrift:"type,2" db:"type" json:"type,omitempty"`
}

func NewTColumnDesc() *TColumnDesc {
	return &TColumnDesc{}
}

var TColumnDesc_Name_DEFAULT string

func (p *TColumnDesc) GetName() string {
	if !p.IsSetName() {
		return TColumnDesc_Name_DEFAULT
	}
	return *p.Name
}

var TColumnDesc_Type_DEFAULT *types.TColumnType

func (p *TColumnDesc) GetType() *types.TColumnType {
	if !p.IsSetType() {
		return TColumnDesc_Type_DEFAULT
	}
	return p.Type
}
func (p *TColumnDesc) IsSetName() bool {
	return p.Name != nil
}

func (p *TColumnDesc) IsSetType() bool {
	return p.Type != nil
}

func (p *TColumnDesc) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TColumnDesc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TColumnDesc) ReadField2(iprot thrift.TProtocol) error {
	p.Type = &types.TColumnType{}
	if err := p.Type.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
	}
	return nil
}

func (p *TColumnDesc) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnDesc"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TColumnDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
		}
	}
	return err
}

func (p *TColumnDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := p.Type.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *TColumnDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnDesc(%+v)", *p)
}

// Attributes:
//   - Cols
type TTableSchema struct {
	Cols []*TColumnDesc `thrift:"cols,1" db:"cols" json:"cols,omitempty"`
}

func NewTTableSchema() *TTableSchema {
	return &TTableSchema{}
}

var TTableSchema_Cols_DEFAULT []*TColumnDesc

func (p *TTableSchema) GetCols() []*TColumnDesc {
	return p.Cols
}
func (p *TTableSchema) IsSetCols() bool {
	return p.Cols != nil
}

func (p *TTableSchema) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTableSchema) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TColumnDesc, 0, size)
	p.Cols = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TColumnDesc{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Cols = append(p.Cols, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TTableSchema) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTableSchema"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTableSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCols() {
		if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Cols {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err)
		}
	}
	return err
}

func (p *TTableSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableSchema(%+v)", *p)
}

// Attributes:
//   - Cols
//   - NumRows
type TRowBatch struct {
	Cols    []*data.TColumnData `thrift:"cols,1" db:"cols" json:"cols,omitempty"`
	NumRows *int64              `thrift:"num_rows,2" db:"num_rows" json:"num_rows,omitempty"`
}

func NewTRowBatch() *TRowBatch {
	return &TRowBatch{}
}

var TRowBatch_Cols_DEFAULT []*data.TColumnData

func (p *TRowBatch) GetCols() []*data.TColumnData {
	return p.Cols
}

var TRowBatch_NumRows_DEFAULT int64

func (p *TRowBatch) GetNumRows() int64 {
	if !p.IsSetNumRows() {
		return TRowBatch_NumRows_DEFAULT
	}
	return *p.NumRows
}
func (p *TRowBatch) IsSetCols() bool {
	return p.Cols != nil
}

func (p *TRowBatch) IsSetNumRows() bool {
	return p.NumRows != nil
}

func (p *TRowBatch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRowBatch) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*data.TColumnData, 0, size)
	p.Cols = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &data.TColumnData{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Cols = append(p.Cols, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRowBatch) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumRows = &v
	}
	return nil
}

func (p *TRowBatch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowBatch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRowBatch) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCols() {
		if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Cols {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err)
		}
	}
	return err
}

func (p *TRowBatch) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumRows() {
		if err := oprot.WriteFieldBegin("num_rows", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_rows: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumRows)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_rows (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_rows: ", p), err)
		}
	}
	return err
}

func (p *TRowBatch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowBatch(%+v)", *p)
}

// Attributes:
//   - Col
//   - Op
//   - Value
type TBinaryPredicate struct {
	Col   *TColumnDesc       `thrift:"col,1" db:"col" json:"col,omitempty"`
	Op    *TComparisonOp     `thrift:"op,2" db:"op" json:"op,omitempty"`
	Value *data.TColumnValue `thrift:"value,3" db:"value" json:"value,omitempty"`
}

func NewTBinaryPredicate() *TBinaryPredicate {
	return &TBinaryPredicate{}
}

var TBinaryPredicate_Col_DEFAULT *TColumnDesc

func (p *TBinaryPredicate) GetCol() *TColumnDesc {
	if !p.IsSetCol() {
		return TBinaryPredicate_Col_DEFAULT
	}
	return p.Col
}

var TBinaryPredicate_Op_DEFAULT TComparisonOp

func (p *TBinaryPredicate) GetOp() TComparisonOp {
	if !p.IsSetOp() {
		return TBinaryPredicate_Op_DEFAULT
	}
	return *p.Op
}

var TBinaryPredicate_Value_DEFAULT *data.TColumnValue

func (p *TBinaryPredicate) GetValue() *data.TColumnValue {
	if !p.IsSetValue() {
		return TBinaryPredicate_Value_DEFAULT
	}
	return p.Value
}
func (p *TBinaryPredicate) IsSetCol() bool {
	return p.Col != nil
}

func (p *TBinaryPredicate) IsSetOp() bool {
	return p.Op != nil
}

func (p *TBinaryPredicate) IsSetValue() bool {
	return p.Value != nil
}

func (p *TBinaryPredicate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBinaryPredicate) ReadField1(iprot thrift.TProtocol) error {
	p.Col = &TColumnDesc{}
	if err := p.Col.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Col), err)
	}
	return nil
}

func (p *TBinaryPredicate) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TComparisonOp(v)
		p.Op = &temp
	}
	return nil
}

func (p *TBinaryPredicate) ReadField3(iprot thrift.TProtocol) error {
	p.Value = &data.TColumnValue{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *TBinaryPredicate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBinaryPredicate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBinaryPredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCol() {
		if err := oprot.WriteFieldBegin("col", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:col: ", p), err)
		}
		if err := p.Col.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Col), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:col: ", p), err)
		}
	}
	return err
}

func (p *TBinaryPredicate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOp() {
		if err := oprot.WriteFieldBegin("op", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Op)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
		}
	}
	return err
}

func (p *TBinaryPredicate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
		}
		if err := p.Value.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
		}
	}
	return err
}

func (p *TBinaryPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBinaryPredicate(%+v)", *p)
}

// Attributes:
//   - TableName
//   - InitString
//   - Predicates
type TPrepareParams struct {
	TableName  *string               `thrift:"table_name,1" db:"table_name" json:"table_name,omitempty"`
	InitString *string               `thrift:"init_string,2" db:"init_string" json:"init_string,omitempty"`
	Predicates [][]*TBinaryPredicate `thrift:"predicates,3" db:"predicates" json:"predicates,omitempty"`
}

func NewTPrepareParams() *TPrepareParams {
	return &TPrepareParams{}
}

var TPrepareParams_TableName_DEFAULT string

func (p *TPrepareParams) GetTableName() string {
	if !p.IsSetTableName() {
		return TPrepareParams_TableName_DEFAULT
	}
	return *p.TableName
}

var TPrepareParams_InitString_DEFAULT string

func (p *TPrepareParams) GetInitString() string {
	if !p.IsSetInitString() {
		return TPrepareParams_InitString_DEFAULT
	}
	return *p.InitString
}

var TPrepareParams_Predicates_DEFAULT [][]*TBinaryPredicate

func (p *TPrepareParams) GetPredicates() [][]*TBinaryPredicate {
	return p.Predicates
}
func (p *TPrepareParams) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TPrepareParams) IsSetInitString() bool {
	return p.InitString != nil
}

func (p *TPrepareParams) IsSetPredicates() bool {
	return p.Predicates != nil
}

func (p *TPrepareParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TPrepareParams) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *TPrepareParams) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.InitString = &v
	}
	return nil
}

func (p *TPrepareParams) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]*TBinaryPredicate, 0, size)
	p.Predicates = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*TBinaryPredicate, 0, size)
		_elem2 := tSlice
		for i := 0; i < size; i++ {
			_elem3 := &TBinaryPredicate{}
			if err := _elem3.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
			}
			_elem2 = append(_elem2, _elem3)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Predicates = append(p.Predicates, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPrepareParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPrepareParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPrepareParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.table_name (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_name: ", p), err)
		}
	}
	return err
}

func (p *TPrepareParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInitString() {
		if err := oprot.WriteFieldBegin("init_string", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:init_string: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InitString)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.init_string (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:init_string: ", p), err)
		}
	}
	return err
}

func (p *TPrepareParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPredicates() {
		if err := oprot.WriteFieldBegin("predicates", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:predicates: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.Predicates)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Predicates {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:predicates: ", p), err)
		}
	}
	return err
}

func (p *TPrepareParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPrepareParams(%+v)", *p)
}

// Attributes:
//   - Status
//   - NumRowsEstimate
//   - AcceptedConjuncts
type TPrepareResult_ struct {
	Status            *status.TStatus `thrift:"status,1,required" db:"status" json:"status"`
	NumRowsEstimate   *int64          `thrift:"num_rows_estimate,2" db:"num_rows_estimate" json:"num_rows_estimate,omitempty"`
	AcceptedConjuncts []int32         `thrift:"accepted_conjuncts,3" db:"accepted_conjuncts" json:"accepted_conjuncts,omitempty"`
}

func NewTPrepareResult_() *TPrepareResult_ {
	return &TPrepareResult_{}
}

var TPrepareResult__Status_DEFAULT *status.TStatus

func (p *TPrepareResult_) GetStatus() *status.TStatus {
	if !p.IsSetStatus() {
		return TPrepareResult__Status_DEFAULT
	}
	return p.Status
}

var TPrepareResult__NumRowsEstimate_DEFAULT int64

func (p *TPrepareResult_) GetNumRowsEstimate() int64 {
	if !p.IsSetNumRowsEstimate() {
		return TPrepareResult__NumRowsEstimate_DEFAULT
	}
	return *p.NumRowsEstimate
}

var TPrepareResult__AcceptedConjuncts_DEFAULT []int32

func (p *TPrepareResult_) GetAcceptedConjuncts() []int32 {
	return p.AcceptedConjuncts
}
func (p *TPrepareResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TPrepareResult_) IsSetNumRowsEstimate() bool {
	return p.NumRowsEstimate != nil
}

func (p *TPrepareResult_) IsSetAcceptedConjuncts() bool {
	return p.AcceptedConjuncts != nil
}

func (p *TPrepareResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TPrepareResult_) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &status.TStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TPrepareResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumRowsEstimate = &v
	}
	return nil
}

func (p *TPrepareResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.AcceptedConjuncts = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.AcceptedConjuncts = append(p.AcceptedConjuncts, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPrepareResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPrepareResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPrepareResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TPrepareResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumRowsEstimate() {
		if err := oprot.WriteFieldBegin("num_rows_estimate", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_rows_estimate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumRowsEstimate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_rows_estimate (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_rows_estimate: ", p), err)
		}
	}
	return err
}

func (p *TPrepareResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAcceptedConjuncts() {
		if err := oprot.WriteFieldBegin("accepted_conjuncts", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accepted_conjuncts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.AcceptedConjuncts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.AcceptedConjuncts {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accepted_conjuncts: ", p), err)
		}
	}
	return err
}

func (p *TPrepareResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPrepareResult_(%+v)", *p)
}

// Attributes:
//   - QueryID
//   - TableName
//   - InitString
//   - AuthenticatedUserName
//   - RowSchema
//   - BatchSize
//   - Predicates
//   - Limit
type TOpenParams struct {
	QueryID               *types.TUniqueId      `thrift:"query_id,1" db:"query_id" json:"query_id,omitempty"`
	TableName             *string               `thrift:"table_name,2" db:"table_name" json:"table_name,omitempty"`
	InitString            *string               `thrift:"init_string,3" db:"init_string" json:"init_string,omitempty"`
	AuthenticatedUserName *string               `thrift:"authenticated_user_name,4" db:"authenticated_user_name" json:"authenticated_user_name,omitempty"`
	RowSchema             *TTableSchema         `thrift:"row_schema,5" db:"row_schema" json:"row_schema,omitempty"`
	BatchSize             *int32                `thrift:"batch_size,6" db:"batch_size" json:"batch_size,omitempty"`
	Predicates            [][]*TBinaryPredicate `thrift:"predicates,7" db:"predicates" json:"predicates,omitempty"`
	Limit                 *int64                `thrift:"limit,8" db:"limit" json:"limit,omitempty"`
}

func NewTOpenParams() *TOpenParams {
	return &TOpenParams{}
}

var TOpenParams_QueryID_DEFAULT *types.TUniqueId

func (p *TOpenParams) GetQueryID() *types.TUniqueId {
	if !p.IsSetQueryID() {
		return TOpenParams_QueryID_DEFAULT
	}
	return p.QueryID
}

var TOpenParams_TableName_DEFAULT string

func (p *TOpenParams) GetTableName() string {
	if !p.IsSetTableName() {
		return TOpenParams_TableName_DEFAULT
	}
	return *p.TableName
}

var TOpenParams_InitString_DEFAULT string

func (p *TOpenParams) GetInitString() string {
	if !p.IsSetInitString() {
		return TOpenParams_InitString_DEFAULT
	}
	return *p.InitString
}

var TOpenParams_AuthenticatedUserName_DEFAULT string

func (p *TOpenParams) GetAuthenticatedUserName() string {
	if !p.IsSetAuthenticatedUserName() {
		return TOpenParams_AuthenticatedUserName_DEFAULT
	}
	return *p.AuthenticatedUserName
}

var TOpenParams_RowSchema_DEFAULT *TTableSchema

func (p *TOpenParams) GetRowSchema() *TTableSchema {
	if !p.IsSetRowSchema() {
		return TOpenParams_RowSchema_DEFAULT
	}
	return p.RowSchema
}

var TOpenParams_BatchSize_DEFAULT int32

func (p *TOpenParams) GetBatchSize() int32 {
	if !p.IsSetBatchSize() {
		return TOpenParams_BatchSize_DEFAULT
	}
	return *p.BatchSize
}

var TOpenParams_Predicates_DEFAULT [][]*TBinaryPredicate

func (p *TOpenParams) GetPredicates() [][]*TBinaryPredicate {
	return p.Predicates
}

var TOpenParams_Limit_DEFAULT int64

func (p *TOpenParams) GetLimit() int64 {
	if !p.IsSetLimit() {
		return TOpenParams_Limit_DEFAULT
	}
	return *p.Limit
}
func (p *TOpenParams) IsSetQueryID() bool {
	return p.QueryID != nil
}

func (p *TOpenParams) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TOpenParams) IsSetInitString() bool {
	return p.InitString != nil
}

func (p *TOpenParams) IsSetAuthenticatedUserName() bool {
	return p.AuthenticatedUserName != nil
}

func (p *TOpenParams) IsSetRowSchema() bool {
	return p.RowSchema != nil
}

func (p *TOpenParams) IsSetBatchSize() bool {
	return p.BatchSize != nil
}

func (p *TOpenParams) IsSetPredicates() bool {
	return p.Predicates != nil
}

func (p *TOpenParams) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *TOpenParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TOpenParams) ReadField1(iprot thrift.TProtocol) error {
	p.QueryID = &types.TUniqueId{}
	if err := p.QueryID.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryID), err)
	}
	return nil
}

func (p *TOpenParams) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *TOpenParams) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InitString = &v
	}
	return nil
}

func (p *TOpenParams) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AuthenticatedUserName = &v
	}
	return nil
}

func (p *TOpenParams) ReadField5(iprot thrift.TProtocol) error {
	p.RowSchema = &TTableSchema{}
	if err := p.RowSchema.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSchema), err)
	}
	return nil
}

func (p *TOpenParams) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BatchSize = &v
	}
	return nil
}

func (p *TOpenParams) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]*TBinaryPredicate, 0, size)
	p.Predicates = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*TBinaryPredicate, 0, size)
		_elem5 := tSlice
		for i := 0; i < size; i++ {
			_elem6 := &TBinaryPredicate{}
			if err := _elem6.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
			}
			_elem5 = append(_elem5, _elem6)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Predicates = append(p.Predicates, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TOpenParams) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *TOpenParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TOpenParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TOpenParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryID() {
		if err := oprot.WriteFieldBegin("query_id", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_id: ", p), err)
		}
		if err := p.QueryID.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryID), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_id: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInitString() {
		if err := oprot.WriteFieldBegin("init_string", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:init_string: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InitString)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.init_string (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:init_string: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthenticatedUserName() {
		if err := oprot.WriteFieldBegin("authenticated_user_name", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:authenticated_user_name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthenticatedUserName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authenticated_user_name (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:authenticated_user_name: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowSchema() {
		if err := oprot.WriteFieldBegin("row_schema", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_schema: ", p), err)
		}
		if err := p.RowSchema.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSchema), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_schema: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err := oprot.WriteFieldBegin("batch_size", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:batch_size: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BatchSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.batch_size (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:batch_size: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPredicates() {
		if err := oprot.WriteFieldBegin("predicates", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:predicates: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.Predicates)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Predicates {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:predicates: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:limit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:limit: ", p), err)
		}
	}
	return err
}

func (p *TOpenParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOpenParams(%+v)", *p)
}

// Attributes:
//   - Status
//   - ScanHandle
type TOpenResult_ struct {
	Status     *status.TStatus `thrift:"status,1,required" db:"status" json:"status"`
	ScanHandle *string         `thrift:"scan_handle,2" db:"scan_handle" json:"scan_handle,omitempty"`
}

func NewTOpenResult_() *TOpenResult_ {
	return &TOpenResult_{}
}

var TOpenResult__Status_DEFAULT *status.TStatus

func (p *TOpenResult_) GetStatus() *status.TStatus {
	if !p.IsSetStatus() {
		return TOpenResult__Status_DEFAULT
	}
	return p.Status
}

var TOpenResult__ScanHandle_DEFAULT string

func (p *TOpenResult_) GetScanHandle() string {
	if !p.IsSetScanHandle() {
		return TOpenResult__ScanHandle_DEFAULT
	}
	return *p.ScanHandle
}
func (p *TOpenResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TOpenResult_) IsSetScanHandle() bool {
	return p.ScanHandle != nil
}

func (p *TOpenResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TOpenResult_) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &status.TStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TOpenResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ScanHandle = &v
	}
	return nil
}

func (p *TOpenResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TOpenResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TOpenResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TOpenResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanHandle() {
		if err := oprot.WriteFieldBegin("scan_handle", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scan_handle: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScanHandle)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scan_handle (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scan_handle: ", p), err)
		}
	}
	return err
}

func (p *TOpenResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOpenResult_(%+v)", *p)
}

// Attributes:
//   - ScanHandle
type TGetNextParams struct {
	ScanHandle *string `thrift:"scan_handle,1" db:"scan_handle" json:"scan_handle,omitempty"`
}

func NewTGetNextParams() *TGetNextParams {
	return &TGetNextParams{}
}

var TGetNextParams_ScanHandle_DEFAULT string

func (p *TGetNextParams) GetScanHandle() string {
	if !p.IsSetScanHandle() {
		return TGetNextParams_ScanHandle_DEFAULT
	}
	return *p.ScanHandle
}
func (p *TGetNextParams) IsSetScanHandle() bool {
	return p.ScanHandle != nil
}

func (p *TGetNextParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TGetNextParams) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ScanHandle = &v
	}
	return nil
}

func (p *TGetNextParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGetNextParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGetNextParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanHandle() {
		if err := oprot.WriteFieldBegin("scan_handle", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scan_handle: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScanHandle)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scan_handle (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scan_handle: ", p), err)
		}
	}
	return err
}

func (p *TGetNextParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetNextParams(%+v)", *p)
}

// Attributes:
//   - Status
//   - Eos
//   - Rows
type TGetNextResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" db:"status" json:"status"`
	Eos    *bool           `thrift:"eos,2" db:"eos" json:"eos,omitempty"`
	Rows   *TRowBatch      `thrift:"rows,3" db:"rows" json:"rows,omitempty"`
}

func NewTGetNextResult_() *TGetNextResult_ {
	return &TGetNextResult_{}
}

var TGetNextResult__Status_DEFAULT *status.TStatus

func (p *TGetNextResult_) GetStatus() *status.TStatus {
	if !p.IsSetStatus() {
		return TGetNextResult__Status_DEFAULT
	}
	return p.Status
}

var TGetNextResult__Eos_DEFAULT bool

func (p *TGetNextResult_) GetEos() bool {
	if !p.IsSetEos() {
		return TGetNextResult__Eos_DEFAULT
	}
	return *p.Eos
}

var TGetNextResult__Rows_DEFAULT *TRowBatch

func (p *TGetNextResult_) GetRows() *TRowBatch {
	if !p.IsSetRows() {
		return TGetNextResult__Rows_DEFAULT
	}
	return p.Rows
}
func (p *TGetNextResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetNextResult_) IsSetEos() bool {
	return p.Eos != nil
}

func (p *TGetNextResult_) IsSetRows() bool {
	return p.Rows != nil
}

func (p *TGetNextResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TGetNextResult_) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &status.TStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TGetNextResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Eos = &v
	}
	return nil
}

func (p *TGetNextResult_) ReadField3(iprot thrift.TProtocol) error {
	p.Rows = &TRowBatch{}
	if err := p.Rows.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rows), err)
	}
	return nil
}

func (p *TGetNextResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGetNextResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGetNextResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TGetNextResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEos() {
		if err := oprot.WriteFieldBegin("eos", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eos: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Eos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.eos (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eos: ", p), err)
		}
	}
	return err
}

func (p *TGetNextResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRows() {
		if err := oprot.WriteFieldBegin("rows", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err)
		}
		if err := p.Rows.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rows), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err)
		}
	}
	return err
}

func (p *TGetNextResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetNextResult_(%+v)", *p)
}

// Attributes:
//   - ScanHandle
type TCloseParams struct {
	ScanHandle *string `thrift:"scan_handle,1" db:"scan_handle" json:"scan_handle,omitempty"`
}

func NewTCloseParams() *TCloseParams {
	return &TCloseParams{}
}

var TCloseParams_ScanHandle_DEFAULT string

func (p *TCloseParams) GetScanHandle() string {
	if !p.IsSetScanHandle() {
		return TCloseParams_ScanHandle_DEFAULT
	}
	return *p.ScanHandle
}
func (p *TCloseParams) IsSetScanHandle() bool {
	return p.ScanHandle != nil
}

func (p *TCloseParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCloseParams) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ScanHandle = &v
	}
	return nil
}

func (p *TCloseParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCloseParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCloseParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanHandle() {
		if err := oprot.WriteFieldBegin("scan_handle", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scan_handle: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScanHandle)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scan_handle (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scan_handle: ", p), err)
		}
	}
	return err
}

func (p *TCloseParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCloseParams(%+v)", *p)
}

// Attributes:
//   - Status
type TCloseResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTCloseResult_() *TCloseResult_ {
	return &TCloseResult_{}
}

var TCloseResult__Status_DEFAULT *status.TStatus

func (p *TCloseResult_) GetStatus() *status.TStatus {
	if !p.IsSetStatus() {
		return TCloseResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TCloseResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TCloseResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TCloseResult_) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &status.TStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TCloseResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCloseResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCloseResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TCloseResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCloseResult_(%+v)", *p)
}
