// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package runtimeprofile

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/believems/impala-thrift/execstats"
	"github.com/believems/impala-thrift/metrics"
	"github.com/believems/impala-thrift/types"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = execstats.GoUnusedProtection__
var _ = metrics.GoUnusedProtection__
var _ = types.GoUnusedProtection__

type TRuntimeProfileFormat int64

const (
	TRuntimeProfileFormat_STRING TRuntimeProfileFormat = 0
	TRuntimeProfileFormat_BASE64 TRuntimeProfileFormat = 1
	TRuntimeProfileFormat_THRIFT TRuntimeProfileFormat = 2
	TRuntimeProfileFormat_JSON   TRuntimeProfileFormat = 3
)

func (p TRuntimeProfileFormat) String() string {
	switch p {
	case TRuntimeProfileFormat_STRING:
		return "STRING"
	case TRuntimeProfileFormat_BASE64:
		return "BASE64"
	case TRuntimeProfileFormat_THRIFT:
		return "THRIFT"
	case TRuntimeProfileFormat_JSON:
		return "JSON"
	}
	return "<UNSET>"
}

func TRuntimeProfileFormatFromString(s string) (TRuntimeProfileFormat, error) {
	switch s {
	case "STRING":
		return TRuntimeProfileFormat_STRING, nil
	case "BASE64":
		return TRuntimeProfileFormat_BASE64, nil
	case "THRIFT":
		return TRuntimeProfileFormat_THRIFT, nil
	case "JSON":
		return TRuntimeProfileFormat_JSON, nil
	}
	return TRuntimeProfileFormat(0), fmt.Errorf("not a valid TRuntimeProfileFormat string")
}

func TRuntimeProfileFormatPtr(v TRuntimeProfileFormat) *TRuntimeProfileFormat { return &v }

func (p TRuntimeProfileFormat) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TRuntimeProfileFormat) UnmarshalText(text []byte) error {
	q, err := TRuntimeProfileFormatFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TRuntimeProfileFormat) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TRuntimeProfileFormat(v)
	return nil
}

func (p *TRuntimeProfileFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - Name
//   - Unit
//   - Value
type TCounter struct {
	Name  string        `thrift:"name,1,required" db:"name" json:"name"`
	Unit  metrics.TUnit `thrift:"unit,2,required" db:"unit" json:"unit"`
	Value int64         `thrift:"value,3,required" db:"value" json:"value"`
}

func NewTCounter() *TCounter {
	return &TCounter{}
}

func (p *TCounter) GetName() string {
	return p.Name
}

func (p *TCounter) GetUnit() metrics.TUnit {
	return p.Unit
}

func (p *TCounter) GetValue() int64 {
	return p.Value
}
func (p *TCounter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetUnit bool = false
	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUnit = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetUnit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unit is not set"))
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TCounter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TCounter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := metrics.TUnit(v)
		p.Unit = temp
	}
	return nil
}

func (p *TCounter) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TCounter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unit: ", p), err)
	}
	return err
}

func (p *TCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *TCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCounter(%+v)", *p)
}

// Attributes:
//   - Name
//   - Unit
//   - HasValue
//   - Values
type TAggCounter struct {
	Name     string        `thrift:"name,1,required" db:"name" json:"name"`
	Unit     metrics.TUnit `thrift:"unit,2,required" db:"unit" json:"unit"`
	HasValue []bool        `thrift:"has_value,3,required" db:"has_value" json:"has_value"`
	Values   []int64       `thrift:"values,4,required" db:"values" json:"values"`
}

func NewTAggCounter() *TAggCounter {
	return &TAggCounter{}
}

func (p *TAggCounter) GetName() string {
	return p.Name
}

func (p *TAggCounter) GetUnit() metrics.TUnit {
	return p.Unit
}

func (p *TAggCounter) GetHasValue() []bool {
	return p.HasValue
}

func (p *TAggCounter) GetValues() []int64 {
	return p.Values
}
func (p *TAggCounter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetUnit bool = false
	var issetHasValue bool = false
	var issetValues bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUnit = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetHasValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetValues = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetUnit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unit is not set"))
	}
	if !issetHasValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasValue is not set"))
	}
	if !issetValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"))
	}
	return nil
}

func (p *TAggCounter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TAggCounter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := metrics.TUnit(v)
		p.Unit = temp
	}
	return nil
}

func (p *TAggCounter) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]bool, 0, size)
	p.HasValue = tSlice
	for i := 0; i < size; i++ {
		var _elem0 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.HasValue = append(p.HasValue, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggCounter) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Values = append(p.Values, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggCounter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAggCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAggCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TAggCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unit: ", p), err)
	}
	return err
}

func (p *TAggCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_value", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:has_value: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.HasValue)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HasValue {
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:has_value: ", p), err)
	}
	return err
}

func (p *TAggCounter) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err)
	}
	return err
}

func (p *TAggCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggCounter(%+v)", *p)
}

// Attributes:
//   - Name
//   - Timestamps
//   - Labels
type TEventSequence struct {
	Name       string   `thrift:"name,1,required" db:"name" json:"name"`
	Timestamps []int64  `thrift:"timestamps,2,required" db:"timestamps" json:"timestamps"`
	Labels     []string `thrift:"labels,3,required" db:"labels" json:"labels"`
}

func NewTEventSequence() *TEventSequence {
	return &TEventSequence{}
}

func (p *TEventSequence) GetName() string {
	return p.Name
}

func (p *TEventSequence) GetTimestamps() []int64 {
	return p.Timestamps
}

func (p *TEventSequence) GetLabels() []string {
	return p.Labels
}
func (p *TEventSequence) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetTimestamps bool = false
	var issetLabels bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetTimestamps = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetLabels = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetTimestamps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamps is not set"))
	}
	if !issetLabels {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Labels is not set"))
	}
	return nil
}

func (p *TEventSequence) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TEventSequence) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Timestamps = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Timestamps = append(p.Timestamps, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TEventSequence) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Labels = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.Labels = append(p.Labels, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TEventSequence) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TEventSequence"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TEventSequence) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TEventSequence) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Timestamps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Timestamps {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamps: ", p), err)
	}
	return err
}

func (p *TEventSequence) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("labels", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:labels: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Labels {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:labels: ", p), err)
	}
	return err
}

func (p *TEventSequence) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TEventSequence(%+v)", *p)
}

// Attributes:
//   - Name
//   - LabelDict
//   - LabelIdxs
//   - Timestamps
type TAggEventSequence struct {
	Name       string    `thrift:"name,1,required" db:"name" json:"name"`
	LabelDict  []string  `thrift:"label_dict,2,required" db:"label_dict" json:"label_dict"`
	LabelIdxs  [][]int32 `thrift:"label_idxs,3,required" db:"label_idxs" json:"label_idxs"`
	Timestamps [][]int64 `thrift:"timestamps,4,required" db:"timestamps" json:"timestamps"`
}

func NewTAggEventSequence() *TAggEventSequence {
	return &TAggEventSequence{}
}

func (p *TAggEventSequence) GetName() string {
	return p.Name
}

func (p *TAggEventSequence) GetLabelDict() []string {
	return p.LabelDict
}

func (p *TAggEventSequence) GetLabelIdxs() [][]int32 {
	return p.LabelIdxs
}

func (p *TAggEventSequence) GetTimestamps() [][]int64 {
	return p.Timestamps
}
func (p *TAggEventSequence) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetLabelDict bool = false
	var issetLabelIdxs bool = false
	var issetTimestamps bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetLabelDict = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetLabelIdxs = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetTimestamps = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetLabelDict {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LabelDict is not set"))
	}
	if !issetLabelIdxs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LabelIdxs is not set"))
	}
	if !issetTimestamps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamps is not set"))
	}
	return nil
}

func (p *TAggEventSequence) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TAggEventSequence) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.LabelDict = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.LabelDict = append(p.LabelDict, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggEventSequence) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]int32, 0, size)
	p.LabelIdxs = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int32, 0, size)
		_elem5 := tSlice
		for i := 0; i < size; i++ {
			var _elem6 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem6 = v
			}
			_elem5 = append(_elem5, _elem6)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.LabelIdxs = append(p.LabelIdxs, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggEventSequence) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]int64, 0, size)
	p.Timestamps = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int64, 0, size)
		_elem7 := tSlice
		for i := 0; i < size; i++ {
			var _elem8 int64
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem8 = v
			}
			_elem7 = append(_elem7, _elem8)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Timestamps = append(p.Timestamps, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggEventSequence) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAggEventSequence"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAggEventSequence) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TAggEventSequence) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label_dict", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:label_dict: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelDict)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LabelDict {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:label_dict: ", p), err)
	}
	return err
}

func (p *TAggEventSequence) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label_idxs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:label_idxs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.LabelIdxs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LabelIdxs {
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:label_idxs: ", p), err)
	}
	return err
}

func (p *TAggEventSequence) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Timestamps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Timestamps {
		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamps: ", p), err)
	}
	return err
}

func (p *TAggEventSequence) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggEventSequence(%+v)", *p)
}

// Attributes:
//   - Name
//   - Unit
//   - PeriodMs
//   - Values
//   - StartIndex
type TTimeSeriesCounter struct {
	Name       string        `thrift:"name,1,required" db:"name" json:"name"`
	Unit       metrics.TUnit `thrift:"unit,2,required" db:"unit" json:"unit"`
	PeriodMs   int32         `thrift:"period_ms,3,required" db:"period_ms" json:"period_ms"`
	Values     []int64       `thrift:"values,4,required" db:"values" json:"values"`
	StartIndex *int64        `thrift:"start_index,5" db:"start_index" json:"start_index,omitempty"`
}

func NewTTimeSeriesCounter() *TTimeSeriesCounter {
	return &TTimeSeriesCounter{}
}

func (p *TTimeSeriesCounter) GetName() string {
	return p.Name
}

func (p *TTimeSeriesCounter) GetUnit() metrics.TUnit {
	return p.Unit
}

func (p *TTimeSeriesCounter) GetPeriodMs() int32 {
	return p.PeriodMs
}

func (p *TTimeSeriesCounter) GetValues() []int64 {
	return p.Values
}

var TTimeSeriesCounter_StartIndex_DEFAULT int64

func (p *TTimeSeriesCounter) GetStartIndex() int64 {
	if !p.IsSetStartIndex() {
		return TTimeSeriesCounter_StartIndex_DEFAULT
	}
	return *p.StartIndex
}
func (p *TTimeSeriesCounter) IsSetStartIndex() bool {
	return p.StartIndex != nil
}

func (p *TTimeSeriesCounter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetUnit bool = false
	var issetPeriodMs bool = false
	var issetValues bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUnit = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetPeriodMs = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetValues = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetUnit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unit is not set"))
	}
	if !issetPeriodMs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PeriodMs is not set"))
	}
	if !issetValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"))
	}
	return nil
}

func (p *TTimeSeriesCounter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TTimeSeriesCounter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := metrics.TUnit(v)
		p.Unit = temp
	}
	return nil
}

func (p *TTimeSeriesCounter) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PeriodMs = v
	}
	return nil
}

func (p *TTimeSeriesCounter) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem9 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.Values = append(p.Values, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TTimeSeriesCounter) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StartIndex = &v
	}
	return nil
}

func (p *TTimeSeriesCounter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTimeSeriesCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTimeSeriesCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TTimeSeriesCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unit: ", p), err)
	}
	return err
}

func (p *TTimeSeriesCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("period_ms", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:period_ms: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PeriodMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.period_ms (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:period_ms: ", p), err)
	}
	return err
}

func (p *TTimeSeriesCounter) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err)
	}
	return err
}

func (p *TTimeSeriesCounter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_index: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.StartIndex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.start_index (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_index: ", p), err)
		}
	}
	return err
}

func (p *TTimeSeriesCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTimeSeriesCounter(%+v)", *p)
}

// Attributes:
//   - Name
//   - Unit
//   - PeriodMs
//   - Values
//   - StartIndex
type TAggTimeSeriesCounter struct {
	Name       string        `thrift:"name,1,required" db:"name" json:"name"`
	Unit       metrics.TUnit `thrift:"unit,2,required" db:"unit" json:"unit"`
	PeriodMs   []int32       `thrift:"period_ms,3,required" db:"period_ms" json:"period_ms"`
	Values     [][]int64     `thrift:"values,4,required" db:"values" json:"values"`
	StartIndex []int64       `thrift:"start_index,5,required" db:"start_index" json:"start_index"`
}

func NewTAggTimeSeriesCounter() *TAggTimeSeriesCounter {
	return &TAggTimeSeriesCounter{}
}

func (p *TAggTimeSeriesCounter) GetName() string {
	return p.Name
}

func (p *TAggTimeSeriesCounter) GetUnit() metrics.TUnit {
	return p.Unit
}

func (p *TAggTimeSeriesCounter) GetPeriodMs() []int32 {
	return p.PeriodMs
}

func (p *TAggTimeSeriesCounter) GetValues() [][]int64 {
	return p.Values
}

func (p *TAggTimeSeriesCounter) GetStartIndex() []int64 {
	return p.StartIndex
}
func (p *TAggTimeSeriesCounter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetUnit bool = false
	var issetPeriodMs bool = false
	var issetValues bool = false
	var issetStartIndex bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUnit = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetPeriodMs = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetValues = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetStartIndex = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetUnit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unit is not set"))
	}
	if !issetPeriodMs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PeriodMs is not set"))
	}
	if !issetValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"))
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	return nil
}

func (p *TAggTimeSeriesCounter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TAggTimeSeriesCounter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := metrics.TUnit(v)
		p.Unit = temp
	}
	return nil
}

func (p *TAggTimeSeriesCounter) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.PeriodMs = tSlice
	for i := 0; i < size; i++ {
		var _elem10 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.PeriodMs = append(p.PeriodMs, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggTimeSeriesCounter) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]int64, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int64, 0, size)
		_elem11 := tSlice
		for i := 0; i < size; i++ {
			var _elem12 int64
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem12 = v
			}
			_elem11 = append(_elem11, _elem12)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Values = append(p.Values, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggTimeSeriesCounter) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.StartIndex = tSlice
	for i := 0; i < size; i++ {
		var _elem13 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.StartIndex = append(p.StartIndex, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggTimeSeriesCounter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAggTimeSeriesCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAggTimeSeriesCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TAggTimeSeriesCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unit: ", p), err)
	}
	return err
}

func (p *TAggTimeSeriesCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("period_ms", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:period_ms: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.PeriodMs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PeriodMs {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:period_ms: ", p), err)
	}
	return err
}

func (p *TAggTimeSeriesCounter) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err)
	}
	return err
}

func (p *TAggTimeSeriesCounter) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_index", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_index: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.StartIndex)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StartIndex {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_index: ", p), err)
	}
	return err
}

func (p *TAggTimeSeriesCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggTimeSeriesCounter(%+v)", *p)
}

// Attributes:
//   - Name
//   - Unit
//   - Sum
//   - TotalNumValues
//   - MinValue
//   - MaxValue
type TSummaryStatsCounter struct {
	Name           string        `thrift:"name,1,required" db:"name" json:"name"`
	Unit           metrics.TUnit `thrift:"unit,2,required" db:"unit" json:"unit"`
	Sum            int64         `thrift:"sum,3,required" db:"sum" json:"sum"`
	TotalNumValues int64         `thrift:"total_num_values,4,required" db:"total_num_values" json:"total_num_values"`
	MinValue       int64         `thrift:"min_value,5,required" db:"min_value" json:"min_value"`
	MaxValue       int64         `thrift:"max_value,6,required" db:"max_value" json:"max_value"`
}

func NewTSummaryStatsCounter() *TSummaryStatsCounter {
	return &TSummaryStatsCounter{}
}

func (p *TSummaryStatsCounter) GetName() string {
	return p.Name
}

func (p *TSummaryStatsCounter) GetUnit() metrics.TUnit {
	return p.Unit
}

func (p *TSummaryStatsCounter) GetSum() int64 {
	return p.Sum
}

func (p *TSummaryStatsCounter) GetTotalNumValues() int64 {
	return p.TotalNumValues
}

func (p *TSummaryStatsCounter) GetMinValue() int64 {
	return p.MinValue
}

func (p *TSummaryStatsCounter) GetMaxValue() int64 {
	return p.MaxValue
}
func (p *TSummaryStatsCounter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetUnit bool = false
	var issetSum bool = false
	var issetTotalNumValues bool = false
	var issetMinValue bool = false
	var issetMaxValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUnit = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetSum = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetTotalNumValues = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetMinValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetMaxValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetUnit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unit is not set"))
	}
	if !issetSum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sum is not set"))
	}
	if !issetTotalNumValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalNumValues is not set"))
	}
	if !issetMinValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinValue is not set"))
	}
	if !issetMaxValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxValue is not set"))
	}
	return nil
}

func (p *TSummaryStatsCounter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TSummaryStatsCounter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := metrics.TUnit(v)
		p.Unit = temp
	}
	return nil
}

func (p *TSummaryStatsCounter) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Sum = v
	}
	return nil
}

func (p *TSummaryStatsCounter) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalNumValues = v
	}
	return nil
}

func (p *TSummaryStatsCounter) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MinValue = v
	}
	return nil
}

func (p *TSummaryStatsCounter) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MaxValue = v
	}
	return nil
}

func (p *TSummaryStatsCounter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSummaryStatsCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSummaryStatsCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TSummaryStatsCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unit: ", p), err)
	}
	return err
}

func (p *TSummaryStatsCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sum", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sum: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Sum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sum (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sum: ", p), err)
	}
	return err
}

func (p *TSummaryStatsCounter) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num_values", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total_num_values: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalNumValues)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num_values (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total_num_values: ", p), err)
	}
	return err
}

func (p *TSummaryStatsCounter) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min_value", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:min_value: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MinValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min_value (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:min_value: ", p), err)
	}
	return err
}

func (p *TSummaryStatsCounter) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_value", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_value: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_value (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_value: ", p), err)
	}
	return err
}

func (p *TSummaryStatsCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSummaryStatsCounter(%+v)", *p)
}

// Attributes:
//   - Name
//   - Unit
//   - HasValue
//   - Sum
//   - TotalNumValues
//   - MinValue
//   - MaxValue
type TAggSummaryStatsCounter struct {
	Name           string        `thrift:"name,1,required" db:"name" json:"name"`
	Unit           metrics.TUnit `thrift:"unit,2,required" db:"unit" json:"unit"`
	HasValue       []bool        `thrift:"has_value,3,required" db:"has_value" json:"has_value"`
	Sum            []int64       `thrift:"sum,4,required" db:"sum" json:"sum"`
	TotalNumValues []int64       `thrift:"total_num_values,5,required" db:"total_num_values" json:"total_num_values"`
	MinValue       []int64       `thrift:"min_value,6,required" db:"min_value" json:"min_value"`
	MaxValue       []int64       `thrift:"max_value,7,required" db:"max_value" json:"max_value"`
}

func NewTAggSummaryStatsCounter() *TAggSummaryStatsCounter {
	return &TAggSummaryStatsCounter{}
}

func (p *TAggSummaryStatsCounter) GetName() string {
	return p.Name
}

func (p *TAggSummaryStatsCounter) GetUnit() metrics.TUnit {
	return p.Unit
}

func (p *TAggSummaryStatsCounter) GetHasValue() []bool {
	return p.HasValue
}

func (p *TAggSummaryStatsCounter) GetSum() []int64 {
	return p.Sum
}

func (p *TAggSummaryStatsCounter) GetTotalNumValues() []int64 {
	return p.TotalNumValues
}

func (p *TAggSummaryStatsCounter) GetMinValue() []int64 {
	return p.MinValue
}

func (p *TAggSummaryStatsCounter) GetMaxValue() []int64 {
	return p.MaxValue
}
func (p *TAggSummaryStatsCounter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetUnit bool = false
	var issetHasValue bool = false
	var issetSum bool = false
	var issetTotalNumValues bool = false
	var issetMinValue bool = false
	var issetMaxValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUnit = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetHasValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetSum = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetTotalNumValues = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetMinValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
				issetMaxValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetUnit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unit is not set"))
	}
	if !issetHasValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasValue is not set"))
	}
	if !issetSum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sum is not set"))
	}
	if !issetTotalNumValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalNumValues is not set"))
	}
	if !issetMinValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinValue is not set"))
	}
	if !issetMaxValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxValue is not set"))
	}
	return nil
}

func (p *TAggSummaryStatsCounter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TAggSummaryStatsCounter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := metrics.TUnit(v)
		p.Unit = temp
	}
	return nil
}

func (p *TAggSummaryStatsCounter) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]bool, 0, size)
	p.HasValue = tSlice
	for i := 0; i < size; i++ {
		var _elem14 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.HasValue = append(p.HasValue, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggSummaryStatsCounter) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Sum = tSlice
	for i := 0; i < size; i++ {
		var _elem15 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem15 = v
		}
		p.Sum = append(p.Sum, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggSummaryStatsCounter) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.TotalNumValues = tSlice
	for i := 0; i < size; i++ {
		var _elem16 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.TotalNumValues = append(p.TotalNumValues, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggSummaryStatsCounter) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.MinValue = tSlice
	for i := 0; i < size; i++ {
		var _elem17 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.MinValue = append(p.MinValue, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggSummaryStatsCounter) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.MaxValue = tSlice
	for i := 0; i < size; i++ {
		var _elem18 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.MaxValue = append(p.MaxValue, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggSummaryStatsCounter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAggSummaryStatsCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAggSummaryStatsCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TAggSummaryStatsCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unit: ", p), err)
	}
	return err
}

func (p *TAggSummaryStatsCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_value", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:has_value: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.HasValue)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HasValue {
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:has_value: ", p), err)
	}
	return err
}

func (p *TAggSummaryStatsCounter) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sum", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sum: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Sum)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Sum {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sum: ", p), err)
	}
	return err
}

func (p *TAggSummaryStatsCounter) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num_values", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_num_values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TotalNumValues)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TotalNumValues {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_num_values: ", p), err)
	}
	return err
}

func (p *TAggSummaryStatsCounter) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min_value", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:min_value: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.MinValue)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MinValue {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:min_value: ", p), err)
	}
	return err
}

func (p *TAggSummaryStatsCounter) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_value", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:max_value: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.MaxValue)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MaxValue {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:max_value: ", p), err)
	}
	return err
}

func (p *TAggSummaryStatsCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggSummaryStatsCounter(%+v)", *p)
}

// Attributes:
//   - PlanNodeID
//   - DataSinkID
type TRuntimeProfileNodeMetadata struct {
	PlanNodeID *types.TPlanNodeId `thrift:"plan_node_id,1" db:"plan_node_id" json:"plan_node_id,omitempty"`
	DataSinkID *types.TDataSinkId `thrift:"data_sink_id,2" db:"data_sink_id" json:"data_sink_id,omitempty"`
}

func NewTRuntimeProfileNodeMetadata() *TRuntimeProfileNodeMetadata {
	return &TRuntimeProfileNodeMetadata{}
}

var TRuntimeProfileNodeMetadata_PlanNodeID_DEFAULT types.TPlanNodeId

func (p *TRuntimeProfileNodeMetadata) GetPlanNodeID() types.TPlanNodeId {
	if !p.IsSetPlanNodeID() {
		return TRuntimeProfileNodeMetadata_PlanNodeID_DEFAULT
	}
	return *p.PlanNodeID
}

var TRuntimeProfileNodeMetadata_DataSinkID_DEFAULT types.TDataSinkId

func (p *TRuntimeProfileNodeMetadata) GetDataSinkID() types.TDataSinkId {
	if !p.IsSetDataSinkID() {
		return TRuntimeProfileNodeMetadata_DataSinkID_DEFAULT
	}
	return *p.DataSinkID
}
func (p *TRuntimeProfileNodeMetadata) CountSetFieldsTRuntimeProfileNodeMetadata() int {
	count := 0
	if p.IsSetPlanNodeID() {
		count++
	}
	if p.IsSetDataSinkID() {
		count++
	}
	return count

}

func (p *TRuntimeProfileNodeMetadata) IsSetPlanNodeID() bool {
	return p.PlanNodeID != nil
}

func (p *TRuntimeProfileNodeMetadata) IsSetDataSinkID() bool {
	return p.DataSinkID != nil
}

func (p *TRuntimeProfileNodeMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRuntimeProfileNodeMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.TPlanNodeId(v)
		p.PlanNodeID = &temp
	}
	return nil
}

func (p *TRuntimeProfileNodeMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.TDataSinkId(v)
		p.DataSinkID = &temp
	}
	return nil
}

func (p *TRuntimeProfileNodeMetadata) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsTRuntimeProfileNodeMetadata(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("TRuntimeProfileNodeMetadata"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNodeMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlanNodeID() {
		if err := oprot.WriteFieldBegin("plan_node_id", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plan_node_id: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PlanNodeID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.plan_node_id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plan_node_id: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileNodeMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataSinkID() {
		if err := oprot.WriteFieldBegin("data_sink_id", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data_sink_id: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DataSinkID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data_sink_id (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data_sink_id: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileNodeMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeProfileNodeMetadata(%+v)", *p)
}

// Attributes:
//   - NumInstances
//   - InputProfiles
//   - Counters
//   - InfoStrings
//   - SummaryStatsCounters
//   - EventSequences
//   - TimeSeriesCounters
type TAggregatedRuntimeProfileNode struct {
	NumInstances         *int32                        `thrift:"num_instances,1" db:"num_instances" json:"num_instances,omitempty"`
	InputProfiles        []string                      `thrift:"input_profiles,2" db:"input_profiles" json:"input_profiles,omitempty"`
	Counters             []*TAggCounter                `thrift:"counters,3" db:"counters" json:"counters,omitempty"`
	InfoStrings          map[string]map[string][]int32 `thrift:"info_strings,4" db:"info_strings" json:"info_strings,omitempty"`
	SummaryStatsCounters []*TAggSummaryStatsCounter    `thrift:"summary_stats_counters,5" db:"summary_stats_counters" json:"summary_stats_counters,omitempty"`
	EventSequences       []*TAggEventSequence          `thrift:"event_sequences,6" db:"event_sequences" json:"event_sequences,omitempty"`
	TimeSeriesCounters   []*TAggTimeSeriesCounter      `thrift:"time_series_counters,7" db:"time_series_counters" json:"time_series_counters,omitempty"`
}

func NewTAggregatedRuntimeProfileNode() *TAggregatedRuntimeProfileNode {
	return &TAggregatedRuntimeProfileNode{}
}

var TAggregatedRuntimeProfileNode_NumInstances_DEFAULT int32

func (p *TAggregatedRuntimeProfileNode) GetNumInstances() int32 {
	if !p.IsSetNumInstances() {
		return TAggregatedRuntimeProfileNode_NumInstances_DEFAULT
	}
	return *p.NumInstances
}

var TAggregatedRuntimeProfileNode_InputProfiles_DEFAULT []string

func (p *TAggregatedRuntimeProfileNode) GetInputProfiles() []string {
	return p.InputProfiles
}

var TAggregatedRuntimeProfileNode_Counters_DEFAULT []*TAggCounter

func (p *TAggregatedRuntimeProfileNode) GetCounters() []*TAggCounter {
	return p.Counters
}

var TAggregatedRuntimeProfileNode_InfoStrings_DEFAULT map[string]map[string][]int32

func (p *TAggregatedRuntimeProfileNode) GetInfoStrings() map[string]map[string][]int32 {
	return p.InfoStrings
}

var TAggregatedRuntimeProfileNode_SummaryStatsCounters_DEFAULT []*TAggSummaryStatsCounter

func (p *TAggregatedRuntimeProfileNode) GetSummaryStatsCounters() []*TAggSummaryStatsCounter {
	return p.SummaryStatsCounters
}

var TAggregatedRuntimeProfileNode_EventSequences_DEFAULT []*TAggEventSequence

func (p *TAggregatedRuntimeProfileNode) GetEventSequences() []*TAggEventSequence {
	return p.EventSequences
}

var TAggregatedRuntimeProfileNode_TimeSeriesCounters_DEFAULT []*TAggTimeSeriesCounter

func (p *TAggregatedRuntimeProfileNode) GetTimeSeriesCounters() []*TAggTimeSeriesCounter {
	return p.TimeSeriesCounters
}
func (p *TAggregatedRuntimeProfileNode) IsSetNumInstances() bool {
	return p.NumInstances != nil
}

func (p *TAggregatedRuntimeProfileNode) IsSetInputProfiles() bool {
	return p.InputProfiles != nil
}

func (p *TAggregatedRuntimeProfileNode) IsSetCounters() bool {
	return p.Counters != nil
}

func (p *TAggregatedRuntimeProfileNode) IsSetInfoStrings() bool {
	return p.InfoStrings != nil
}

func (p *TAggregatedRuntimeProfileNode) IsSetSummaryStatsCounters() bool {
	return p.SummaryStatsCounters != nil
}

func (p *TAggregatedRuntimeProfileNode) IsSetEventSequences() bool {
	return p.EventSequences != nil
}

func (p *TAggregatedRuntimeProfileNode) IsSetTimeSeriesCounters() bool {
	return p.TimeSeriesCounters != nil
}

func (p *TAggregatedRuntimeProfileNode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumInstances = &v
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.InputProfiles = tSlice
	for i := 0; i < size; i++ {
		var _elem19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem19 = v
		}
		p.InputProfiles = append(p.InputProfiles, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAggCounter, 0, size)
	p.Counters = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &TAggCounter{}
		if err := _elem20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.Counters = append(p.Counters, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string][]int32, size)
	p.InfoStrings = tMap
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key21 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string][]int32, size)
		_val22 := tMap
		for i := 0; i < size; i++ {
			var _key23 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key23 = v
			}
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			tSlice := make([]int32, 0, size)
			_val24 := tSlice
			for i := 0; i < size; i++ {
				var _elem25 int32
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					_elem25 = v
				}
				_val24 = append(_val24, _elem25)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
			_val22[_key23] = _val24
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.InfoStrings[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAggSummaryStatsCounter, 0, size)
	p.SummaryStatsCounters = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &TAggSummaryStatsCounter{}
		if err := _elem26.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
		}
		p.SummaryStatsCounters = append(p.SummaryStatsCounters, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAggEventSequence, 0, size)
	p.EventSequences = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &TAggEventSequence{}
		if err := _elem27.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
		}
		p.EventSequences = append(p.EventSequences, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAggTimeSeriesCounter, 0, size)
	p.TimeSeriesCounters = tSlice
	for i := 0; i < size; i++ {
		_elem28 := &TAggTimeSeriesCounter{}
		if err := _elem28.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
		}
		p.TimeSeriesCounters = append(p.TimeSeriesCounters, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAggregatedRuntimeProfileNode"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAggregatedRuntimeProfileNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumInstances() {
		if err := oprot.WriteFieldBegin("num_instances", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_instances: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NumInstances)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_instances (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_instances: ", p), err)
		}
	}
	return err
}

func (p *TAggregatedRuntimeProfileNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputProfiles() {
		if err := oprot.WriteFieldBegin("input_profiles", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:input_profiles: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.InputProfiles)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InputProfiles {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:input_profiles: ", p), err)
		}
	}
	return err
}

func (p *TAggregatedRuntimeProfileNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCounters() {
		if err := oprot.WriteFieldBegin("counters", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:counters: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Counters)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Counters {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:counters: ", p), err)
		}
	}
	return err
}

func (p *TAggregatedRuntimeProfileNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInfoStrings() {
		if err := oprot.WriteFieldBegin("info_strings", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:info_strings: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.InfoStrings)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.InfoStrings {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
					return thrift.PrependError("error writing list begin: ", err)
				}
				for _, v := range v {
					if err := oprot.WriteI32(int32(v)); err != nil {
						return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
					}
				}
				if err := oprot.WriteListEnd(); err != nil {
					return thrift.PrependError("error writing list end: ", err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:info_strings: ", p), err)
		}
	}
	return err
}

func (p *TAggregatedRuntimeProfileNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummaryStatsCounters() {
		if err := oprot.WriteFieldBegin("summary_stats_counters", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:summary_stats_counters: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SummaryStatsCounters)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SummaryStatsCounters {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:summary_stats_counters: ", p), err)
		}
	}
	return err
}

func (p *TAggregatedRuntimeProfileNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventSequences() {
		if err := oprot.WriteFieldBegin("event_sequences", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:event_sequences: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EventSequences)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.EventSequences {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:event_sequences: ", p), err)
		}
	}
	return err
}

func (p *TAggregatedRuntimeProfileNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCounters() {
		if err := oprot.WriteFieldBegin("time_series_counters", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:time_series_counters: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TimeSeriesCounters)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TimeSeriesCounters {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:time_series_counters: ", p), err)
		}
	}
	return err
}

func (p *TAggregatedRuntimeProfileNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggregatedRuntimeProfileNode(%+v)", *p)
}

// Attributes:
//   - Name
//   - NumChildren
//   - Counters
//   - Metadata
//   - Indent
//   - InfoStrings
//   - InfoStringsDisplayOrder
//   - ChildCountersMap
//   - EventSequences
//   - TimeSeriesCounters
//   - SummaryStatsCounters
//   - NodeMetadata
//   - Aggregated
type TRuntimeProfileNode struct {
	Name                    string                         `thrift:"name,1,required" db:"name" json:"name"`
	NumChildren             int32                          `thrift:"num_children,2,required" db:"num_children" json:"num_children"`
	Counters                []*TCounter                    `thrift:"counters,3,required" db:"counters" json:"counters"`
	Metadata                int64                          `thrift:"metadata,4,required" db:"metadata" json:"metadata"`
	Indent                  bool                           `thrift:"indent,5,required" db:"indent" json:"indent"`
	InfoStrings             map[string]string              `thrift:"info_strings,6,required" db:"info_strings" json:"info_strings"`
	InfoStringsDisplayOrder []string                       `thrift:"info_strings_display_order,7,required" db:"info_strings_display_order" json:"info_strings_display_order"`
	ChildCountersMap        map[string][]string            `thrift:"child_counters_map,8,required" db:"child_counters_map" json:"child_counters_map"`
	EventSequences          []*TEventSequence              `thrift:"event_sequences,9" db:"event_sequences" json:"event_sequences,omitempty"`
	TimeSeriesCounters      []*TTimeSeriesCounter          `thrift:"time_series_counters,10" db:"time_series_counters" json:"time_series_counters,omitempty"`
	SummaryStatsCounters    []*TSummaryStatsCounter        `thrift:"summary_stats_counters,11" db:"summary_stats_counters" json:"summary_stats_counters,omitempty"`
	NodeMetadata            *TRuntimeProfileNodeMetadata   `thrift:"node_metadata,12" db:"node_metadata" json:"node_metadata,omitempty"`
	Aggregated              *TAggregatedRuntimeProfileNode `thrift:"aggregated,13" db:"aggregated" json:"aggregated,omitempty"`
}

func NewTRuntimeProfileNode() *TRuntimeProfileNode {
	return &TRuntimeProfileNode{}
}

func (p *TRuntimeProfileNode) GetName() string {
	return p.Name
}

func (p *TRuntimeProfileNode) GetNumChildren() int32 {
	return p.NumChildren
}

func (p *TRuntimeProfileNode) GetCounters() []*TCounter {
	return p.Counters
}

func (p *TRuntimeProfileNode) GetMetadata() int64 {
	return p.Metadata
}

func (p *TRuntimeProfileNode) GetIndent() bool {
	return p.Indent
}

func (p *TRuntimeProfileNode) GetInfoStrings() map[string]string {
	return p.InfoStrings
}

func (p *TRuntimeProfileNode) GetInfoStringsDisplayOrder() []string {
	return p.InfoStringsDisplayOrder
}

func (p *TRuntimeProfileNode) GetChildCountersMap() map[string][]string {
	return p.ChildCountersMap
}

var TRuntimeProfileNode_EventSequences_DEFAULT []*TEventSequence

func (p *TRuntimeProfileNode) GetEventSequences() []*TEventSequence {
	return p.EventSequences
}

var TRuntimeProfileNode_TimeSeriesCounters_DEFAULT []*TTimeSeriesCounter

func (p *TRuntimeProfileNode) GetTimeSeriesCounters() []*TTimeSeriesCounter {
	return p.TimeSeriesCounters
}

var TRuntimeProfileNode_SummaryStatsCounters_DEFAULT []*TSummaryStatsCounter

func (p *TRuntimeProfileNode) GetSummaryStatsCounters() []*TSummaryStatsCounter {
	return p.SummaryStatsCounters
}

var TRuntimeProfileNode_NodeMetadata_DEFAULT *TRuntimeProfileNodeMetadata

func (p *TRuntimeProfileNode) GetNodeMetadata() *TRuntimeProfileNodeMetadata {
	if !p.IsSetNodeMetadata() {
		return TRuntimeProfileNode_NodeMetadata_DEFAULT
	}
	return p.NodeMetadata
}

var TRuntimeProfileNode_Aggregated_DEFAULT *TAggregatedRuntimeProfileNode

func (p *TRuntimeProfileNode) GetAggregated() *TAggregatedRuntimeProfileNode {
	if !p.IsSetAggregated() {
		return TRuntimeProfileNode_Aggregated_DEFAULT
	}
	return p.Aggregated
}
func (p *TRuntimeProfileNode) IsSetEventSequences() bool {
	return p.EventSequences != nil
}

func (p *TRuntimeProfileNode) IsSetTimeSeriesCounters() bool {
	return p.TimeSeriesCounters != nil
}

func (p *TRuntimeProfileNode) IsSetSummaryStatsCounters() bool {
	return p.SummaryStatsCounters != nil
}

func (p *TRuntimeProfileNode) IsSetNodeMetadata() bool {
	return p.NodeMetadata != nil
}

func (p *TRuntimeProfileNode) IsSetAggregated() bool {
	return p.Aggregated != nil
}

func (p *TRuntimeProfileNode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetNumChildren bool = false
	var issetCounters bool = false
	var issetMetadata bool = false
	var issetIndent bool = false
	var issetInfoStrings bool = false
	var issetInfoStringsDisplayOrder bool = false
	var issetChildCountersMap bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetNumChildren = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetCounters = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetMetadata = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetIndent = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetInfoStrings = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
				issetInfoStringsDisplayOrder = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
				issetChildCountersMap = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetNumChildren {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumChildren is not set"))
	}
	if !issetCounters {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Counters is not set"))
	}
	if !issetMetadata {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"))
	}
	if !issetIndent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Indent is not set"))
	}
	if !issetInfoStrings {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InfoStrings is not set"))
	}
	if !issetInfoStringsDisplayOrder {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InfoStringsDisplayOrder is not set"))
	}
	if !issetChildCountersMap {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChildCountersMap is not set"))
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumChildren = v
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TCounter, 0, size)
	p.Counters = tSlice
	for i := 0; i < size; i++ {
		_elem29 := &TCounter{}
		if err := _elem29.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
		}
		p.Counters = append(p.Counters, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Metadata = v
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Indent = v
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.InfoStrings = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val31 = v
		}
		p.InfoStrings[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.InfoStringsDisplayOrder = tSlice
	for i := 0; i < size; i++ {
		var _elem32 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem32 = v
		}
		p.InfoStringsDisplayOrder = append(p.InfoStringsDisplayOrder, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]string, size)
	p.ChildCountersMap = tMap
	for i := 0; i < size; i++ {
		var _key33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key33 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make([]string, 0, size)
		_val34 := tSet
		for i := 0; i < size; i++ {
			var _elem35 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem35 = v
			}
			_val34 = append(_val34, _elem35)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.ChildCountersMap[_key33] = _val34
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TEventSequence, 0, size)
	p.EventSequences = tSlice
	for i := 0; i < size; i++ {
		_elem36 := &TEventSequence{}
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.EventSequences = append(p.EventSequences, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTimeSeriesCounter, 0, size)
	p.TimeSeriesCounters = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &TTimeSeriesCounter{}
		if err := _elem37.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
		}
		p.TimeSeriesCounters = append(p.TimeSeriesCounters, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TSummaryStatsCounter, 0, size)
	p.SummaryStatsCounters = tSlice
	for i := 0; i < size; i++ {
		_elem38 := &TSummaryStatsCounter{}
		if err := _elem38.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
		}
		p.SummaryStatsCounters = append(p.SummaryStatsCounters, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField12(iprot thrift.TProtocol) error {
	p.NodeMetadata = &TRuntimeProfileNodeMetadata{}
	if err := p.NodeMetadata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NodeMetadata), err)
	}
	return nil
}

func (p *TRuntimeProfileNode) ReadField13(iprot thrift.TProtocol) error {
	p.Aggregated = &TAggregatedRuntimeProfileNode{}
	if err := p.Aggregated.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aggregated), err)
	}
	return nil
}

func (p *TRuntimeProfileNode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRuntimeProfileNode"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRuntimeProfileNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_children", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_children: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumChildren)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_children (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_children: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("counters", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:counters: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Counters)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Counters {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:counters: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metadata", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metadata: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Metadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metadata (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metadata: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("indent", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:indent: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Indent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.indent (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:indent: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info_strings", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:info_strings: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.InfoStrings)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.InfoStrings {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:info_strings: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info_strings_display_order", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:info_strings_display_order: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InfoStringsDisplayOrder)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.InfoStringsDisplayOrder {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:info_strings_display_order: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("child_counters_map", thrift.MAP, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:child_counters_map: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.ChildCountersMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ChildCountersMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for i := 0; i < len(v); i++ {
			for j := i + 1; j < len(v); j++ {
				if reflect.DeepEqual(v[i], v[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
				}
			}
		}
		for _, v := range v {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:child_counters_map: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventSequences() {
		if err := oprot.WriteFieldBegin("event_sequences", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:event_sequences: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EventSequences)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.EventSequences {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:event_sequences: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCounters() {
		if err := oprot.WriteFieldBegin("time_series_counters", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:time_series_counters: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TimeSeriesCounters)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TimeSeriesCounters {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:time_series_counters: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileNode) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummaryStatsCounters() {
		if err := oprot.WriteFieldBegin("summary_stats_counters", thrift.LIST, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:summary_stats_counters: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SummaryStatsCounters)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SummaryStatsCounters {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:summary_stats_counters: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileNode) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeMetadata() {
		if err := oprot.WriteFieldBegin("node_metadata", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:node_metadata: ", p), err)
		}
		if err := p.NodeMetadata.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NodeMetadata), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:node_metadata: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileNode) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggregated() {
		if err := oprot.WriteFieldBegin("aggregated", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:aggregated: ", p), err)
		}
		if err := p.Aggregated.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aggregated), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:aggregated: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeProfileNode(%+v)", *p)
}

// Attributes:
//   - Nodes
//   - ExecSummary
//   - ProfileVersion
type TRuntimeProfileTree struct {
	Nodes          []*TRuntimeProfileNode  `thrift:"nodes,1,required" db:"nodes" json:"nodes"`
	ExecSummary    *execstats.TExecSummary `thrift:"exec_summary,2" db:"exec_summary" json:"exec_summary,omitempty"`
	ProfileVersion *int32                  `thrift:"profile_version,3" db:"profile_version" json:"profile_version,omitempty"`
}

func NewTRuntimeProfileTree() *TRuntimeProfileTree {
	return &TRuntimeProfileTree{}
}

func (p *TRuntimeProfileTree) GetNodes() []*TRuntimeProfileNode {
	return p.Nodes
}

var TRuntimeProfileTree_ExecSummary_DEFAULT *execstats.TExecSummary

func (p *TRuntimeProfileTree) GetExecSummary() *execstats.TExecSummary {
	if !p.IsSetExecSummary() {
		return TRuntimeProfileTree_ExecSummary_DEFAULT
	}
	return p.ExecSummary
}

var TRuntimeProfileTree_ProfileVersion_DEFAULT int32

func (p *TRuntimeProfileTree) GetProfileVersion() int32 {
	if !p.IsSetProfileVersion() {
		return TRuntimeProfileTree_ProfileVersion_DEFAULT
	}
	return *p.ProfileVersion
}
func (p *TRuntimeProfileTree) IsSetExecSummary() bool {
	return p.ExecSummary != nil
}

func (p *TRuntimeProfileTree) IsSetProfileVersion() bool {
	return p.ProfileVersion != nil
}

func (p *TRuntimeProfileTree) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNodes bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetNodes = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNodes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Nodes is not set"))
	}
	return nil
}

func (p *TRuntimeProfileTree) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRuntimeProfileNode, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		_elem39 := &TRuntimeProfileNode{}
		if err := _elem39.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
		}
		p.Nodes = append(p.Nodes, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileTree) ReadField2(iprot thrift.TProtocol) error {
	p.ExecSummary = &execstats.TExecSummary{}
	if err := p.ExecSummary.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecSummary), err)
	}
	return nil
}

func (p *TRuntimeProfileTree) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ProfileVersion = &v
	}
	return nil
}

func (p *TRuntimeProfileTree) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRuntimeProfileTree"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRuntimeProfileTree) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nodes", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nodes {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodes: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileTree) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecSummary() {
		if err := oprot.WriteFieldBegin("exec_summary", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exec_summary: ", p), err)
		}
		if err := p.ExecSummary.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecSummary), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exec_summary: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileTree) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProfileVersion() {
		if err := oprot.WriteFieldBegin("profile_version", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:profile_version: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ProfileVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.profile_version (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:profile_version: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileTree) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeProfileTree(%+v)", *p)
}

// Attributes:
//   - ProfileTrees
//   - HostProfile
type TRuntimeProfileForest struct {
	ProfileTrees []*TRuntimeProfileTree `thrift:"profile_trees,1,required" db:"profile_trees" json:"profile_trees"`
	HostProfile  *TRuntimeProfileTree   `thrift:"host_profile,2" db:"host_profile" json:"host_profile,omitempty"`
}

func NewTRuntimeProfileForest() *TRuntimeProfileForest {
	return &TRuntimeProfileForest{}
}

func (p *TRuntimeProfileForest) GetProfileTrees() []*TRuntimeProfileTree {
	return p.ProfileTrees
}

var TRuntimeProfileForest_HostProfile_DEFAULT *TRuntimeProfileTree

func (p *TRuntimeProfileForest) GetHostProfile() *TRuntimeProfileTree {
	if !p.IsSetHostProfile() {
		return TRuntimeProfileForest_HostProfile_DEFAULT
	}
	return p.HostProfile
}
func (p *TRuntimeProfileForest) IsSetHostProfile() bool {
	return p.HostProfile != nil
}

func (p *TRuntimeProfileForest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProfileTrees bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetProfileTrees = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProfileTrees {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProfileTrees is not set"))
	}
	return nil
}

func (p *TRuntimeProfileForest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRuntimeProfileTree, 0, size)
	p.ProfileTrees = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &TRuntimeProfileTree{}
		if err := _elem40.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.ProfileTrees = append(p.ProfileTrees, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRuntimeProfileForest) ReadField2(iprot thrift.TProtocol) error {
	p.HostProfile = &TRuntimeProfileTree{}
	if err := p.HostProfile.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostProfile), err)
	}
	return nil
}

func (p *TRuntimeProfileForest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRuntimeProfileForest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRuntimeProfileForest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profile_trees", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profile_trees: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProfileTrees)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ProfileTrees {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profile_trees: ", p), err)
	}
	return err
}

func (p *TRuntimeProfileForest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostProfile() {
		if err := oprot.WriteFieldBegin("host_profile", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host_profile: ", p), err)
		}
		if err := p.HostProfile.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostProfile), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host_profile: ", p), err)
		}
	}
	return err
}

func (p *TRuntimeProfileForest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeProfileForest(%+v)", *p)
}
