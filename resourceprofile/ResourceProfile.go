// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package resourceprofile

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//   - MinReservation
//   - MaxReservation
//   - SpillableBufferSize
//   - MaxRowBufferSize
type TBackendResourceProfile struct {
	MinReservation      int64  `thrift:"min_reservation,1,required" db:"min_reservation" json:"min_reservation"`
	MaxReservation      int64  `thrift:"max_reservation,2,required" db:"max_reservation" json:"max_reservation"`
	SpillableBufferSize *int64 `thrift:"spillable_buffer_size,3" db:"spillable_buffer_size" json:"spillable_buffer_size,omitempty"`
	MaxRowBufferSize    *int64 `thrift:"max_row_buffer_size,4" db:"max_row_buffer_size" json:"max_row_buffer_size,omitempty"`
}

func NewTBackendResourceProfile() *TBackendResourceProfile {
	return &TBackendResourceProfile{}
}

func (p *TBackendResourceProfile) GetMinReservation() int64 {
	return p.MinReservation
}

func (p *TBackendResourceProfile) GetMaxReservation() int64 {
	return p.MaxReservation
}

var TBackendResourceProfile_SpillableBufferSize_DEFAULT int64

func (p *TBackendResourceProfile) GetSpillableBufferSize() int64 {
	if !p.IsSetSpillableBufferSize() {
		return TBackendResourceProfile_SpillableBufferSize_DEFAULT
	}
	return *p.SpillableBufferSize
}

var TBackendResourceProfile_MaxRowBufferSize_DEFAULT int64

func (p *TBackendResourceProfile) GetMaxRowBufferSize() int64 {
	if !p.IsSetMaxRowBufferSize() {
		return TBackendResourceProfile_MaxRowBufferSize_DEFAULT
	}
	return *p.MaxRowBufferSize
}
func (p *TBackendResourceProfile) IsSetSpillableBufferSize() bool {
	return p.SpillableBufferSize != nil
}

func (p *TBackendResourceProfile) IsSetMaxRowBufferSize() bool {
	return p.MaxRowBufferSize != nil
}

func (p *TBackendResourceProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMinReservation bool = false
	var issetMaxReservation bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMinReservation = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetMaxReservation = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMinReservation {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinReservation is not set"))
	}
	if !issetMaxReservation {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxReservation is not set"))
	}
	return nil
}

func (p *TBackendResourceProfile) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MinReservation = v
	}
	return nil
}

func (p *TBackendResourceProfile) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxReservation = v
	}
	return nil
}

func (p *TBackendResourceProfile) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SpillableBufferSize = &v
	}
	return nil
}

func (p *TBackendResourceProfile) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxRowBufferSize = &v
	}
	return nil
}

func (p *TBackendResourceProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TBackendResourceProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBackendResourceProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "min_reservation", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:min_reservation: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.MinReservation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min_reservation (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:min_reservation: ", p), err)
	}
	return err
}

func (p *TBackendResourceProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "max_reservation", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_reservation: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.MaxReservation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_reservation (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_reservation: ", p), err)
	}
	return err
}

func (p *TBackendResourceProfile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSpillableBufferSize() {
		if err := oprot.WriteFieldBegin(ctx, "spillable_buffer_size", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spillable_buffer_size: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.SpillableBufferSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.spillable_buffer_size (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spillable_buffer_size: ", p), err)
		}
	}
	return err
}

func (p *TBackendResourceProfile) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxRowBufferSize() {
		if err := oprot.WriteFieldBegin(ctx, "max_row_buffer_size", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_row_buffer_size: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.MaxRowBufferSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.max_row_buffer_size (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_row_buffer_size: ", p), err)
		}
	}
	return err
}

func (p *TBackendResourceProfile) Equals(other *TBackendResourceProfile) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MinReservation != other.MinReservation {
		return false
	}
	if p.MaxReservation != other.MaxReservation {
		return false
	}
	if p.SpillableBufferSize != other.SpillableBufferSize {
		if p.SpillableBufferSize == nil || other.SpillableBufferSize == nil {
			return false
		}
		if (*p.SpillableBufferSize) != (*other.SpillableBufferSize) {
			return false
		}
	}
	if p.MaxRowBufferSize != other.MaxRowBufferSize {
		if p.MaxRowBufferSize == nil || other.MaxRowBufferSize == nil {
			return false
		}
		if (*p.MaxRowBufferSize) != (*other.MaxRowBufferSize) {
			return false
		}
	}
	return true
}

func (p *TBackendResourceProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBackendResourceProfile(%+v)", *p)
}
