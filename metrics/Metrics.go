// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metrics

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TUnit int64
const (
  TUnit_UNIT TUnit = 0
  TUnit_UNIT_PER_SECOND TUnit = 1
  TUnit_CPU_TICKS TUnit = 2
  TUnit_BYTES TUnit = 3
  TUnit_BYTES_PER_SECOND TUnit = 4
  TUnit_TIME_NS TUnit = 5
  TUnit_DOUBLE_VALUE TUnit = 6
  TUnit_NONE TUnit = 7
  TUnit_TIME_MS TUnit = 8
  TUnit_TIME_S TUnit = 9
  TUnit_TIME_US TUnit = 10
  TUnit_BASIS_POINTS TUnit = 11
)

func (p TUnit) String() string {
  switch p {
  case TUnit_UNIT: return "UNIT"
  case TUnit_UNIT_PER_SECOND: return "UNIT_PER_SECOND"
  case TUnit_CPU_TICKS: return "CPU_TICKS"
  case TUnit_BYTES: return "BYTES"
  case TUnit_BYTES_PER_SECOND: return "BYTES_PER_SECOND"
  case TUnit_TIME_NS: return "TIME_NS"
  case TUnit_DOUBLE_VALUE: return "DOUBLE_VALUE"
  case TUnit_NONE: return "NONE"
  case TUnit_TIME_MS: return "TIME_MS"
  case TUnit_TIME_S: return "TIME_S"
  case TUnit_TIME_US: return "TIME_US"
  case TUnit_BASIS_POINTS: return "BASIS_POINTS"
  }
  return "<UNSET>"
}

func TUnitFromString(s string) (TUnit, error) {
  switch s {
  case "UNIT": return TUnit_UNIT, nil 
  case "UNIT_PER_SECOND": return TUnit_UNIT_PER_SECOND, nil 
  case "CPU_TICKS": return TUnit_CPU_TICKS, nil 
  case "BYTES": return TUnit_BYTES, nil 
  case "BYTES_PER_SECOND": return TUnit_BYTES_PER_SECOND, nil 
  case "TIME_NS": return TUnit_TIME_NS, nil 
  case "DOUBLE_VALUE": return TUnit_DOUBLE_VALUE, nil 
  case "NONE": return TUnit_NONE, nil 
  case "TIME_MS": return TUnit_TIME_MS, nil 
  case "TIME_S": return TUnit_TIME_S, nil 
  case "TIME_US": return TUnit_TIME_US, nil 
  case "BASIS_POINTS": return TUnit_BASIS_POINTS, nil 
  }
  return TUnit(0), fmt.Errorf("not a valid TUnit string")
}


func TUnitPtr(v TUnit) *TUnit { return &v }

func (p TUnit) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TUnit) UnmarshalText(text []byte) error {
q, err := TUnitFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TUnit) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TUnit(v)
return nil
}

func (p * TUnit) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TMetricKind int64
const (
  TMetricKind_GAUGE TMetricKind = 0
  TMetricKind_COUNTER TMetricKind = 1
  TMetricKind_PROPERTY TMetricKind = 2
  TMetricKind_STATS TMetricKind = 3
  TMetricKind_SET TMetricKind = 4
  TMetricKind_HISTOGRAM TMetricKind = 5
)

func (p TMetricKind) String() string {
  switch p {
  case TMetricKind_GAUGE: return "GAUGE"
  case TMetricKind_COUNTER: return "COUNTER"
  case TMetricKind_PROPERTY: return "PROPERTY"
  case TMetricKind_STATS: return "STATS"
  case TMetricKind_SET: return "SET"
  case TMetricKind_HISTOGRAM: return "HISTOGRAM"
  }
  return "<UNSET>"
}

func TMetricKindFromString(s string) (TMetricKind, error) {
  switch s {
  case "GAUGE": return TMetricKind_GAUGE, nil 
  case "COUNTER": return TMetricKind_COUNTER, nil 
  case "PROPERTY": return TMetricKind_PROPERTY, nil 
  case "STATS": return TMetricKind_STATS, nil 
  case "SET": return TMetricKind_SET, nil 
  case "HISTOGRAM": return TMetricKind_HISTOGRAM, nil 
  }
  return TMetricKind(0), fmt.Errorf("not a valid TMetricKind string")
}


func TMetricKindPtr(v TMetricKind) *TMetricKind { return &v }

func (p TMetricKind) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TMetricKind) UnmarshalText(text []byte) error {
q, err := TMetricKindFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TMetricKind) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TMetricKind(v)
return nil
}

func (p * TMetricKind) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
