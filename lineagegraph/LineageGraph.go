// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package lineagegraph

import (
  "bytes"
  "context"
  "database/sql/driver"
  "errors"
  "fmt"
  "github.com/apache/thrift/lib/go/thrift"
  "github.com/believems/impala-thrift/types"
  "reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = types.GoUnusedProtection__

type TEdgeType int64

const (
	TEdgeType_PROJECTION TEdgeType = 0
	TEdgeType_PREDICATE  TEdgeType = 1
)

func (p TEdgeType) String() string {
	switch p {
	case TEdgeType_PROJECTION:
		return "PROJECTION"
	case TEdgeType_PREDICATE:
		return "PREDICATE"
	}
	return "<UNSET>"
}

func TEdgeTypeFromString(s string) (TEdgeType, error) {
	switch s {
	case "PROJECTION":
		return TEdgeType_PROJECTION, nil
	case "PREDICATE":
		return TEdgeType_PREDICATE, nil
	}
	return TEdgeType(0), fmt.Errorf("not a valid TEdgeType string")
}

func TEdgeTypePtr(v TEdgeType) *TEdgeType { return &v }

func (p TEdgeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TEdgeType) UnmarshalText(text []byte) error {
	q, err := TEdgeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TEdgeType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TEdgeType(v)
	return nil
}

func (p *TEdgeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - TableName
//  - TableCreateTime
type TVertexMetadata struct {
	TableName       string `thrift:"table_name,1,required" db:"table_name" json:"table_name"`
	TableCreateTime int64  `thrift:"table_create_time,2,required" db:"table_create_time" json:"table_create_time"`
}

func NewTVertexMetadata() *TVertexMetadata {
	return &TVertexMetadata{}
}

func (p *TVertexMetadata) GetTableName() string {
	return p.TableName
}

func (p *TVertexMetadata) GetTableCreateTime() int64 {
	return p.TableCreateTime
}
func (p *TVertexMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTableName bool = false
  var issetTableCreateTime bool = false

  for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
        }
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetTableName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetTableCreateTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTableName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"))
    }
	if !issetTableCreateTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableCreateTime is not set"))
    }
	return nil
}

func (p *TVertexMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *TVertexMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableCreateTime = v
	}
	return nil
}

func (p *TVertexMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TVertexMetadata"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TVertexMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_name: ", p), err)
	}
	return err
}

func (p *TVertexMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_create_time", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_create_time: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TableCreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_create_time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_create_time: ", p), err)
	}
	return err
}

func (p *TVertexMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TVertexMetadata(%+v)", *p)
}

// Attributes:
//  - ID
//  - Label
//  - Metadata
type TVertex struct {
	ID       int64            `thrift:"id,1,required" db:"id" json:"id"`
	Label    string           `thrift:"label,2,required" db:"label" json:"label"`
	Metadata *TVertexMetadata `thrift:"metadata,3" db:"metadata" json:"metadata,omitempty"`
}

func NewTVertex() *TVertex {
	return &TVertex{}
}

func (p *TVertex) GetID() int64 {
	return p.ID
}

func (p *TVertex) GetLabel() string {
	return p.Label
}

var TVertex_Metadata_DEFAULT *TVertexMetadata

func (p *TVertex) GetMetadata() *TVertexMetadata {
	if !p.IsSetMetadata() {
		return TVertex_Metadata_DEFAULT
	}
	return p.Metadata
}
func (p *TVertex) IsSetMetadata() bool {
	return p.Metadata != nil
}

func (p *TVertex) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
  var issetLabel bool = false

  for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
        }
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetLabel = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
    }
	if !issetLabel {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Label is not set"))
    }
	return nil
}

func (p *TVertex) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TVertex) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *TVertex) ReadField3(iprot thrift.TProtocol) error {
	p.Metadata = &TVertexMetadata{}
	if err := p.Metadata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
	}
	return nil
}

func (p *TVertex) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TVertex"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TVertex) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TVertex) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:label: ", p), err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:label: ", p), err)
	}
	return err
}

func (p *TVertex) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetadata() {
		if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:metadata: ", p), err)
		}
		if err := p.Metadata.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:metadata: ", p), err)
		}
	}
	return err
}

func (p *TVertex) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TVertex(%+v)", *p)
}

// Attributes:
//  - Sources
//  - Targets
//  - Edgetype
type TMultiEdge struct {
	Sources  []*TVertex `thrift:"sources,1" db:"sources" json:"sources"`
	Targets  []*TVertex `thrift:"targets,2" db:"targets" json:"targets"`
	Edgetype TEdgeType  `thrift:"edgetype,3" db:"edgetype" json:"edgetype"`
}

func NewTMultiEdge() *TMultiEdge {
	return &TMultiEdge{}
}

func (p *TMultiEdge) GetSources() []*TVertex {
	return p.Sources
}

func (p *TMultiEdge) GetTargets() []*TVertex {
	return p.Targets
}

func (p *TMultiEdge) GetEdgetype() TEdgeType {
	return p.Edgetype
}
func (p *TMultiEdge) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
        }
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMultiEdge) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TVertex, 0, size)
	p.Sources = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TVertex{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Sources = append(p.Sources, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMultiEdge) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TVertex, 0, size)
	p.Targets = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TVertex{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Targets = append(p.Targets, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMultiEdge) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TEdgeType(v)
		p.Edgetype = temp
	}
	return nil
}

func (p *TMultiEdge) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMultiEdge"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMultiEdge) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sources", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sources: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sources)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Sources {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sources: ", p), err)
	}
	return err
}

func (p *TMultiEdge) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targets", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Targets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Targets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targets: ", p), err)
	}
	return err
}

func (p *TMultiEdge) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("edgetype", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edgetype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Edgetype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.edgetype (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edgetype: ", p), err)
	}
	return err
}

func (p *TMultiEdge) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMultiEdge(%+v)", *p)
}

// Attributes:
//  - QueryText
//  - Hash
//  - User
//  - Started
//  - Ended
//  - Edges
//  - Vertices
//  - QueryID
//  - TableLocation
type TLineageGraph struct {
	QueryText     string           `thrift:"query_text,1,required" db:"query_text" json:"query_text"`
	Hash          string           `thrift:"hash,2,required" db:"hash" json:"hash"`
	User          string           `thrift:"user,3,required" db:"user" json:"user"`
	Started       int64            `thrift:"started,4,required" db:"started" json:"started"`
	Ended         *int64           `thrift:"ended,5" db:"ended" json:"ended,omitempty"`
	Edges         []*TMultiEdge    `thrift:"edges,6" db:"edges" json:"edges"`
	Vertices      []*TVertex       `thrift:"vertices,7" db:"vertices" json:"vertices"`
	QueryID       *types.TUniqueId `thrift:"query_id,8,required" db:"query_id" json:"query_id"`
	TableLocation *string          `thrift:"table_location,9" db:"table_location" json:"table_location,omitempty"`
}

func NewTLineageGraph() *TLineageGraph {
	return &TLineageGraph{}
}

func (p *TLineageGraph) GetQueryText() string {
	return p.QueryText
}

func (p *TLineageGraph) GetHash() string {
	return p.Hash
}

func (p *TLineageGraph) GetUser() string {
	return p.User
}

func (p *TLineageGraph) GetStarted() int64 {
	return p.Started
}

var TLineageGraph_Ended_DEFAULT int64

func (p *TLineageGraph) GetEnded() int64 {
	if !p.IsSetEnded() {
		return TLineageGraph_Ended_DEFAULT
	}
	return *p.Ended
}

func (p *TLineageGraph) GetEdges() []*TMultiEdge {
	return p.Edges
}

func (p *TLineageGraph) GetVertices() []*TVertex {
	return p.Vertices
}

var TLineageGraph_QueryID_DEFAULT *types.TUniqueId

func (p *TLineageGraph) GetQueryID() *types.TUniqueId {
	if !p.IsSetQueryID() {
		return TLineageGraph_QueryID_DEFAULT
	}
	return p.QueryID
}

var TLineageGraph_TableLocation_DEFAULT string

func (p *TLineageGraph) GetTableLocation() string {
	if !p.IsSetTableLocation() {
		return TLineageGraph_TableLocation_DEFAULT
	}
	return *p.TableLocation
}
func (p *TLineageGraph) IsSetEnded() bool {
	return p.Ended != nil
}

func (p *TLineageGraph) IsSetQueryID() bool {
	return p.QueryID != nil
}

func (p *TLineageGraph) IsSetTableLocation() bool {
	return p.TableLocation != nil
}

func (p *TLineageGraph) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetQueryText bool = false
  var issetHash bool = false
  var issetUser bool = false
  var issetStarted bool = false
  var issetQueryID bool = false

  for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
        }
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetQueryText = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetHash = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetUser = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetStarted = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
				issetQueryID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetQueryText {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryText is not set"))
    }
	if !issetHash {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hash is not set"))
    }
	if !issetUser {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"))
    }
	if !issetStarted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Started is not set"))
    }
	if !issetQueryID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryID is not set"))
    }
	return nil
}

func (p *TLineageGraph) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.QueryText = v
	}
	return nil
}

func (p *TLineageGraph) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Hash = v
	}
	return nil
}

func (p *TLineageGraph) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *TLineageGraph) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Started = v
	}
	return nil
}

func (p *TLineageGraph) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Ended = &v
	}
	return nil
}

func (p *TLineageGraph) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMultiEdge, 0, size)
	p.Edges = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &TMultiEdge{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Edges = append(p.Edges, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TLineageGraph) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TVertex, 0, size)
	p.Vertices = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TVertex{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Vertices = append(p.Vertices, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TLineageGraph) ReadField8(iprot thrift.TProtocol) error {
	p.QueryID = &types.TUniqueId{}
	if err := p.QueryID.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryID), err)
	}
	return nil
}

func (p *TLineageGraph) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TableLocation = &v
	}
	return nil
}

func (p *TLineageGraph) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TLineageGraph"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TLineageGraph) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_text", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_text: ", p), err)
	}
	if err := oprot.WriteString(string(p.QueryText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_text (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_text: ", p), err)
	}
	return err
}

func (p *TLineageGraph) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hash", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hash: ", p), err)
	}
	if err := oprot.WriteString(string(p.Hash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hash (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hash: ", p), err)
	}
	return err
}

func (p *TLineageGraph) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user: ", p), err)
	}
	return err
}

func (p *TLineageGraph) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:started: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Started)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.started (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:started: ", p), err)
	}
	return err
}

func (p *TLineageGraph) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnded() {
		if err := oprot.WriteFieldBegin("ended", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ended: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Ended)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ended (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ended: ", p), err)
		}
	}
	return err
}

func (p *TLineageGraph) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("edges", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:edges: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Edges)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Edges {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:edges: ", p), err)
	}
	return err
}

func (p *TLineageGraph) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vertices", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vertices: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Vertices)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Vertices {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vertices: ", p), err)
	}
	return err
}

func (p *TLineageGraph) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_id", thrift.STRUCT, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:query_id: ", p), err)
	}
	if err := p.QueryID.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryID), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:query_id: ", p), err)
	}
	return err
}

func (p *TLineageGraph) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableLocation() {
		if err := oprot.WriteFieldBegin("table_location", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:table_location: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TableLocation)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.table_location (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:table_location: ", p), err)
		}
	}
	return err
}

func (p *TLineageGraph) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLineageGraph(%+v)", *p)
}
