// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package networktest

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Data
type ThriftDataParams struct {
  Data string `thrift:"data,1,required" db:"data" json:"data"`
}

func NewThriftDataParams() *ThriftDataParams {
  return &ThriftDataParams{}
}


func (p *ThriftDataParams) GetData() string {
  return p.Data
}
func (p *ThriftDataParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetData = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"));
  }
  return nil
}

func (p *ThriftDataParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *ThriftDataParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThriftDataParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftDataParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *ThriftDataParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftDataParams(%+v)", *p)
}

// Attributes:
//  - BytesReceived
type ThriftDataResult_ struct {
  BytesReceived int64 `thrift:"bytes_received,1,required" db:"bytes_received" json:"bytes_received"`
}

func NewThriftDataResult_() *ThriftDataResult_ {
  return &ThriftDataResult_{}
}


func (p *ThriftDataResult_) GetBytesReceived() int64 {
  return p.BytesReceived
}
func (p *ThriftDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBytesReceived bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetBytesReceived = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBytesReceived{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BytesReceived is not set"));
  }
  return nil
}

func (p *ThriftDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BytesReceived = v
}
  return nil
}

func (p *ThriftDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThriftDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bytes_received", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bytes_received: ", p), err) }
  if err := oprot.WriteI64(int64(p.BytesReceived)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bytes_received (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bytes_received: ", p), err) }
  return err
}

func (p *ThriftDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftDataResult_(%+v)", *p)
}

type NetworkTestService interface {
  // Parameters:
  //  - Params
  Send(ctx context.Context, params *ThriftDataParams) (r *ThriftDataResult_, err error)
}

type NetworkTestServiceClient struct {
  c thrift.TClient
}

func NewNetworkTestServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *NetworkTestServiceClient {
  return &NetworkTestServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewNetworkTestServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *NetworkTestServiceClient {
  return &NetworkTestServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewNetworkTestServiceClient(c thrift.TClient) *NetworkTestServiceClient {
  return &NetworkTestServiceClient{
    c: c,
  }
}

func (p *NetworkTestServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Params
func (p *NetworkTestServiceClient) Send(ctx context.Context, params *ThriftDataParams) (r *ThriftDataResult_, err error) {
  var _args0 NetworkTestServiceSendArgs
  _args0.Params = params
  var _result1 NetworkTestServiceSendResult
  if err = p.Client_().Call(ctx, "Send", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type NetworkTestServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler NetworkTestService
}

func (p *NetworkTestServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *NetworkTestServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *NetworkTestServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewNetworkTestServiceProcessor(handler NetworkTestService) *NetworkTestServiceProcessor {

  self2 := &NetworkTestServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["Send"] = &networkTestServiceProcessorSend{handler:handler}
return self2
}

func (p *NetworkTestServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type networkTestServiceProcessorSend struct {
  handler NetworkTestService
}

func (p *networkTestServiceProcessorSend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NetworkTestServiceSendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := NetworkTestServiceSendResult{}
var retval *ThriftDataResult_
  var err2 error
  if retval, err2 = p.handler.Send(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Send: " + err2.Error())
    oprot.WriteMessageBegin("Send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Send", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type NetworkTestServiceSendArgs struct {
  Params *ThriftDataParams `thrift:"params,1" db:"params" json:"params"`
}

func NewNetworkTestServiceSendArgs() *NetworkTestServiceSendArgs {
  return &NetworkTestServiceSendArgs{}
}

var NetworkTestServiceSendArgs_Params_DEFAULT *ThriftDataParams
func (p *NetworkTestServiceSendArgs) GetParams() *ThriftDataParams {
  if !p.IsSetParams() {
    return NetworkTestServiceSendArgs_Params_DEFAULT
  }
return p.Params
}
func (p *NetworkTestServiceSendArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *NetworkTestServiceSendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NetworkTestServiceSendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &ThriftDataParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *NetworkTestServiceSendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Send_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NetworkTestServiceSendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *NetworkTestServiceSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NetworkTestServiceSendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type NetworkTestServiceSendResult struct {
  Success *ThriftDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewNetworkTestServiceSendResult() *NetworkTestServiceSendResult {
  return &NetworkTestServiceSendResult{}
}

var NetworkTestServiceSendResult_Success_DEFAULT *ThriftDataResult_
func (p *NetworkTestServiceSendResult) GetSuccess() *ThriftDataResult_ {
  if !p.IsSetSuccess() {
    return NetworkTestServiceSendResult_Success_DEFAULT
  }
return p.Success
}
func (p *NetworkTestServiceSendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *NetworkTestServiceSendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NetworkTestServiceSendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ThriftDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *NetworkTestServiceSendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Send_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NetworkTestServiceSendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *NetworkTestServiceSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NetworkTestServiceSendResult(%+v)", *p)
}


