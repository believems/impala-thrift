// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package zip

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//   - ArchiveFile
//   - DestinationDir
type TExtractFromZipParams struct {
	ArchiveFile    string `thrift:"archive_file,1,required" db:"archive_file" json:"archive_file"`
	DestinationDir string `thrift:"destination_dir,2,required" db:"destination_dir" json:"destination_dir"`
}

func NewTExtractFromZipParams() *TExtractFromZipParams {
	return &TExtractFromZipParams{}
}

func (p *TExtractFromZipParams) GetArchiveFile() string {
	return p.ArchiveFile
}

func (p *TExtractFromZipParams) GetDestinationDir() string {
	return p.DestinationDir
}
func (p *TExtractFromZipParams) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetArchiveFile bool = false
	var issetDestinationDir bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetArchiveFile = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetDestinationDir = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetArchiveFile {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ArchiveFile is not set"))
	}
	if !issetDestinationDir {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DestinationDir is not set"))
	}
	return nil
}

func (p *TExtractFromZipParams) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ArchiveFile = v
	}
	return nil
}

func (p *TExtractFromZipParams) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DestinationDir = v
	}
	return nil
}

func (p *TExtractFromZipParams) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TExtractFromZipParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TExtractFromZipParams) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "archive_file", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:archive_file: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ArchiveFile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.archive_file (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:archive_file: ", p), err)
	}
	return err
}

func (p *TExtractFromZipParams) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "destination_dir", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destination_dir: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.DestinationDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.destination_dir (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destination_dir: ", p), err)
	}
	return err
}

func (p *TExtractFromZipParams) Equals(other *TExtractFromZipParams) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ArchiveFile != other.ArchiveFile {
		return false
	}
	if p.DestinationDir != other.DestinationDir {
		return false
	}
	return true
}

func (p *TExtractFromZipParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExtractFromZipParams(%+v)", *p)
}
